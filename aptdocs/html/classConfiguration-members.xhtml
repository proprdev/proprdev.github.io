<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: Member List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Configuration Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="classConfiguration.xhtml">Configuration</a>, including all inherited members.</p>
<table class="directory">
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Clear</b>(const std::string &amp;Name) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>Clear</b>() (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Clear</b>(std::string const &amp;List, std::string const &amp;Value) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>Clear</b>(std::string const &amp;List, int const &amp;Value) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>CndSet</b>(const char *Name, const std::string &amp;Value) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>CndSet</b>(const char *Name, const int Value) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Configuration</b>(const Item *Root) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">explicit</span></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>Configuration</b>() (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Dump</b>() (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>Dump</b>(std::ostream &amp;str) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Dump</b>(std::ostream &amp;str, char const *const root, char const *const format, bool const emptyValue) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>Exists</b>(const std::string &amp;Name) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Exists</b>(const char *Name) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>ExistsAny</b>(const char *Name) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Find</b>(const char *Name, const char *Default=0) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>Find</b>(std::string const &amp;Name, const char *Default=0) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Find</b>(std::string const &amp;Name, std::string const &amp;Default) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>FindAny</b>(const char *Name, const char *Default=0) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>FindB</b>(const char *Name, bool const &amp;Default=false) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>FindB</b>(std::string const &amp;Name, bool const &amp;Default=false) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>FindDir</b>(const char *Name, const char *Default=0) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>FindFile</b>(const char *Name, const char *Default=0) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>FindI</b>(const char *Name, int const &amp;Default=0) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>FindI</b>(std::string const &amp;Name, int const &amp;Default=0) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classConfiguration.xhtml#a82921e6f004e5dd3604688eb8ebd66fe">FindVector</a>(const char *Name, std::string const &amp;Default=&quot;&quot;, bool const Keys=false) const</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>FindVector</b>(std::string const &amp;Name, std::string const &amp;Default=&quot;&quot;, bool const Keys=false) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>MoveSubTree</b>(char const *const OldRoot, char const *const NewRoot) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>Set</b>(const std::string &amp;Name, const std::string &amp;Value) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Set</b>(const char *Name, const std::string &amp;Value) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>Set</b>(const char *Name, const int &amp;Value) (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>Tree</b>(const char *Name) const (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>~Configuration</b>() (defined in <a class="el" href="classConfiguration.xhtml">Configuration</a>)</td><td class="entry"><a class="el" href="classConfiguration.xhtml">Configuration</a></td><td class="entry"></td></tr>
</table></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
