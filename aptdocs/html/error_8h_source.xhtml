<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/contrib/error.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_c6ef23f15b074dcedf6810e24f2a7676.xhtml">contrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">error.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Global Error Class - Global error mechanism</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   This class has a single global instance. When a function needs to </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   generate an error condition, such as a read error, it calls a member</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   in this class to add the error to a stack of errors. </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   By using a stack the problem with a scheme like errno is removed and</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   it allows a very detailed account of what went wrong to be transmitted</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   to the UI for display. (Errno has problems because each function sets</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   errno to 0 if it didn&#39;t have an error thus eraseing erno in the process</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">   of cleanup)</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   Several predefined error generators are provided to handle common </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   things like errno. The general idea is that all methods return a bool.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">   If the bool is true then things are OK, if it is false then things </span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">   should start being undone and the stack should unwind under program</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   control.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   A Warning should not force the return of false. Things did not fail, but</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   they might have had unexpected problems. Errors are stored in a FIFO</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   so Pop will return the first item..</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">   I have some thoughts about extending this into a more general UI&lt;-&gt; </span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">   Engine interface, ie allowing the Engine to say &#39;The disk is full&#39; in </span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">   a dialog that says &#39;Panic&#39; and &#39;Retry&#39;.. The error generator functions</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">   like errno, Warning and Error return false always so this is normal:</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">     if (open(..))</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">        return _error-&gt;Errno(..);</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   This source is placed in the Public Domain, do with it what you will</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   It was originally written by Jason Gunthorpe.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#ifndef PKGLIB_ERROR_H</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#define PKGLIB_ERROR_H</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &lt;stdarg.h&gt;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &lt;stddef.h&gt;</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml">   51</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classGlobalError.xhtml">GlobalError</a>                                            <span class="comment">/*{{{*/</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">public</span>:                                                                 <span class="comment">/*{{{*/</span></div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561b">   55</a></span>&#160;        <span class="keyword">enum</span> <a class="code" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561b">MsgType</a> {</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561ba651d8a47a6976d6fe05c0e03fb4cd2d0">   58</a></span>&#160;                FATAL = 40,</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561ba2fd6f336d08340583bd620a7f5694c90">   60</a></span>&#160;                ERROR = 30,</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561ba984de77c680eaff141ec910e25568a81">   62</a></span>&#160;                WARNING = 20,</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561baed8762ff982b982ce3d67f81ab34f1d4">   64</a></span>&#160;                NOTICE = 10,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                DEBUG = 0</div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561ba0593585da9181e972974c1274d8f2b4f">   67</a></span>&#160;        };</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#aad9dbd341423bd851460b3758639237e">   76</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classGlobalError.xhtml#aad9dbd341423bd851460b3758639237e">FatalE</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *Function,<span class="keyword">const</span> <span class="keywordtype">char</span> *Description,...) APT_PRINTF(3) APT_COLD;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#af5fae022d83601f40fde149ebafd1cce">   85</a></span>&#160;        <span class="keywordtype">bool</span> Errno(const <span class="keywordtype">char</span> *Function,const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(3) APT_COLD;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#aad6b628986a4a856e289477bde506744">   97</a></span>&#160;        <span class="keywordtype">bool</span> WarningE(const <span class="keywordtype">char</span> *Function,const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(3) APT_COLD;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#ae354ceb52b63c8e30d17caaca6159dd7">  106</a></span>&#160;        <span class="keywordtype">bool</span> NoticeE(const <span class="keywordtype">char</span> *Function,const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(3) APT_COLD;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a93b848d9522749268832bafa64f6a5c2">  115</a></span>&#160;        <span class="keywordtype">bool</span> DebugE(const <span class="keywordtype">char</span> *Function,const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(3) APT_COLD;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a00e3b810d806f9d632844f1fdab275e3">  123</a></span>&#160;        <span class="keywordtype">bool</span> InsertErrno(<a class="code" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561b">MsgType</a> const &amp;type, const <span class="keywordtype">char</span>* Function,</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                         const <span class="keywordtype">char</span>* Description,...) APT_PRINTF(4) APT_COLD;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordtype">bool</span> InsertErrno(<a class="code" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561b">MsgType</a> type, const <span class="keywordtype">char</span>* Function,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                         const <span class="keywordtype">char</span>* Description, va_list &amp;args,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                         <span class="keywordtype">int</span> const errsv, <span class="keywordtype">size_t</span> &amp;msgSize) APT_COLD;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a7cacbea0f1054d0aef0b5b4505a559e7">  158</a></span>&#160;        <span class="keywordtype">bool</span> Fatal(const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(2) APT_COLD;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a94e3c521c32a44fd786b9f22f153b85d">  166</a></span>&#160;        <span class="keywordtype">bool</span> Error(const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(2) APT_COLD;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#ada014c1d78ce219fc8657bd0d6b33c17">  177</a></span>&#160;        <span class="keywordtype">bool</span> Warning(const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(2) APT_COLD;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a8c06d18a7c1fbf94f3e5622d5c40cd9a">  190</a></span>&#160;        <span class="keywordtype">bool</span> Notice(const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(2) APT_COLD;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#ae297fbea06bddac8ae8dac88e76f5cb0">  198</a></span>&#160;        <span class="keywordtype">bool</span> Debug(const <span class="keywordtype">char</span> *Description,...) APT_PRINTF(2) APT_COLD;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a077d42684d901b09856da43ba4300090">  205</a></span>&#160;        <span class="keywordtype">bool</span> Insert(<a class="code" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561b">MsgType</a> const &amp;type, const <span class="keywordtype">char</span>* Description,...) APT_PRINTF(3) APT_COLD;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordtype">bool</span> Insert(<a class="code" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561b">MsgType</a> type, const <span class="keywordtype">char</span>* Description,</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                         va_list &amp;args, <span class="keywordtype">size_t</span> &amp;msgSize) APT_COLD;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a17591c060e662603e5d6c2e14c35500a">  227</a></span>&#160;        inline <span class="keywordtype">bool</span> PendingError() const APT_PURE {<span class="keywordflow">return</span> PendingFlag;};</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordtype">bool</span> empty(MsgType <span class="keyword">const</span> &amp;threshold = WARNING) <span class="keyword">const</span> APT_PURE;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordtype">bool</span> PopMessage(std::string &amp;Text);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordtype">void</span> Discard();</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordtype">void</span> DumpErrors(std::ostream &amp;out, MsgType <span class="keyword">const</span> &amp;threshold = WARNING,</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                        <span class="keywordtype">bool</span> <span class="keyword">const</span> &amp;mergeStack = <span class="keyword">true</span>);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a92db7530702b6110f3727ac3404543bd">  270</a></span>&#160;        <span class="keywordtype">void</span> <span class="keyword">inline</span> <a class="code" href="classGlobalError.xhtml#a92db7530702b6110f3727ac3404543bd">DumpErrors</a>(<a class="code" href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561b">MsgType</a> <span class="keyword">const</span> &amp;threshold) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                DumpErrors(std::cerr, threshold);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="comment">// mvo: we do this instead of using a default parameter in the</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="comment">//      previous declaration to avoid a (subtle) API break for</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="comment">//      e.g. sigc++ and mem_fun0</span></div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a81be42602b9ad2301c54674471818908">  282</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">void</span> <span class="keyword">inline</span> <a class="code" href="classGlobalError.xhtml#a81be42602b9ad2301c54674471818908">DumpErrors</a>() {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                DumpErrors(WARNING);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordtype">void</span> PushToStack();</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordtype">void</span> RevertToStack();</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordtype">void</span> MergeWithStack();</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="classGlobalError.xhtml#a4524748d3e229651211c74135a59ff0b">  304</a></span>&#160;        <span class="keywordtype">size_t</span> <a class="code" href="classGlobalError.xhtml#a4524748d3e229651211c74135a59ff0b">StackCount</a>() const APT_PURE {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keywordflow">return</span> Stacks.size();</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <a class="code" href="classGlobalError.xhtml">GlobalError</a>();</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword">private</span>:                                                                <span class="comment">/*{{{*/</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keyword">struct </span>Item {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                std::string Text;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                MsgType Type;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                Item(<span class="keywordtype">char</span> <span class="keyword">const</span> *Text, MsgType <span class="keyword">const</span> &amp;Type) :</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        Text(Text), Type(Type) {};</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                APT_HIDDEN <span class="keyword">friend</span> std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out, Item i);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        };</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        APT_HIDDEN <span class="keyword">friend</span> std::ostream &amp;operator&lt;&lt;(std::ostream &amp;out, Item i);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        std::list&lt;Item&gt; Messages;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordtype">bool</span> PendingFlag;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keyword">struct </span>MsgStack {</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                std::list&lt;Item&gt; Messages;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                <span class="keywordtype">bool</span> <span class="keyword">const</span> PendingFlag;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                MsgStack(std::list&lt;Item&gt; <span class="keyword">const</span> &amp;Messages, <span class="keywordtype">bool</span> <span class="keyword">const</span> &amp;Pending) :</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                         Messages(Messages), PendingFlag(Pending) {};</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        };</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        std::list&lt;MsgStack&gt; Stacks;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;};</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">// The &#39;extra-ansi&#39; syntax is used to help with collisions. </span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;APT_PUBLIC <a class="code" href="classGlobalError.xhtml">GlobalError</a> *_GetErrorObj();</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keyword">static</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classGlobalError.xhtml">GlobalError</a>* operator -&gt;() { <span class="keywordflow">return</span> _GetErrorObj(); }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;} _error APT_UNUSED;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassGlobalError_xhtml"><div class="ttname"><a href="classGlobalError.xhtml">GlobalError</a></div><div class="ttdef"><b>Definition:</b> error.h:52</div></div>
<div class="ttc" id="aclassGlobalError_xhtml_a2ea0bb09adcce7f655e8f8ee8d30561b"><div class="ttname"><a href="classGlobalError.xhtml#a2ea0bb09adcce7f655e8f8ee8d30561b">GlobalError::MsgType</a></div><div class="ttdeci">MsgType</div><div class="ttdoc">a message can have one of following severity</div><div class="ttdef"><b>Definition:</b> error.h:55</div></div>
<div class="ttc" id="aclassGlobalError_xhtml_a4524748d3e229651211c74135a59ff0b"><div class="ttname"><a href="classGlobalError.xhtml#a4524748d3e229651211c74135a59ff0b">GlobalError::StackCount</a></div><div class="ttdeci">size_t StackCount() const APT_PURE</div><div class="ttdoc">return the deep of the stack</div><div class="ttdef"><b>Definition:</b> error.h:304</div></div>
<div class="ttc" id="aclassGlobalError_xhtml_a81be42602b9ad2301c54674471818908"><div class="ttname"><a href="classGlobalError.xhtml#a81be42602b9ad2301c54674471818908">GlobalError::DumpErrors</a></div><div class="ttdeci">void DumpErrors()</div><div class="ttdoc">dumps the messages of type WARNING or higher to std::cerr</div><div class="ttdef"><b>Definition:</b> error.h:282</div></div>
<div class="ttc" id="aclassGlobalError_xhtml_a92db7530702b6110f3727ac3404543bd"><div class="ttname"><a href="classGlobalError.xhtml#a92db7530702b6110f3727ac3404543bd">GlobalError::DumpErrors</a></div><div class="ttdeci">void DumpErrors(MsgType const &amp;threshold)</div><div class="ttdoc">dumps the list of messages to std::cerr</div><div class="ttdef"><b>Definition:</b> error.h:270</div></div>
<div class="ttc" id="aclassGlobalError_xhtml_aad9dbd341423bd851460b3758639237e"><div class="ttname"><a href="classGlobalError.xhtml#aad9dbd341423bd851460b3758639237e">GlobalError::FatalE</a></div><div class="ttdeci">bool FatalE(const char *Function, const char *Description,...) APT_PRINTF(3) APT_COLD</div><div class="ttdoc">add a fatal error message with errno to the list</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
