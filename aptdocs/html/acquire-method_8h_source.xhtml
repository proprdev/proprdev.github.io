<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/acquire-method.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">acquire-method.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="acquire-method_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Acquire Method - Method helper class + functions</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   These functions are designed to be used within the method task to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   ease communication with APT.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef PKGLIB_ACQUIRE_METHOD_H</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define PKGLIB_ACQUIRE_METHOD_H</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/hashes.h&gt;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;stdarg.h&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;time.h&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classpkgAcqMethod.xhtml">   33</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgAcqMethod.xhtml">pkgAcqMethod</a></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="structpkgAcqMethod_1_1FetchItem.xhtml">   37</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structpkgAcqMethod_1_1FetchItem.xhtml">FetchItem</a></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;   {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      <a class="code" href="structpkgAcqMethod_1_1FetchItem.xhtml">FetchItem</a> *Next;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      std::string Uri;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      std::string DestFile;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <span class="keywordtype">int</span> DestFileFd;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      time_t LastModified;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      <span class="keywordtype">bool</span> IndexFile;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      <span class="keywordtype">bool</span> FailIgnore;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      <a class="code" href="classHashStringList.xhtml">HashStringList</a> ExpectedHashes;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      <span class="comment">// a maximum size we will download, this can be the exact filesize</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="comment">// for when we know it or a arbitrary limit when we don&#39;t know the</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <span class="comment">// filesize (like a InRelease file)</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> MaximumSize;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <a class="code" href="structpkgAcqMethod_1_1FetchItem.xhtml">FetchItem</a>();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <span class="keyword">virtual</span> ~<a class="code" href="structpkgAcqMethod_1_1FetchItem.xhtml">FetchItem</a>();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      std::string Proxy(); <span class="comment">// For internal use only.</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="keywordtype">void</span> Proxy(std::string <span class="keyword">const</span> &amp;Proxy) APT_HIDDEN;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="keyword">private</span>:</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keyword">struct </span><a class="code" href="structpkgAcqMethod_1_1FetchItem_1_1Private.xhtml">Private</a>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <a class="code" href="structpkgAcqMethod_1_1FetchItem_1_1Private.xhtml">Private</a> *<span class="keyword">const</span> d;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;   };</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="structpkgAcqMethod_1_1FetchResult.xhtml">   63</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structpkgAcqMethod_1_1FetchResult.xhtml">FetchResult</a></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;   {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      <a class="code" href="classHashStringList.xhtml">HashStringList</a> <a class="code" href="classHashes.xhtml">Hashes</a>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      std::vector&lt;std::string&gt; GPGVOutput;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      time_t LastModified;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <span class="keywordtype">bool</span> IMSHit;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      std::string Filename;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> ResumePoint;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      <span class="keywordtype">void</span> TakeHashes(<span class="keyword">class</span> <a class="code" href="classHashes.xhtml">Hashes</a> &amp;Hash);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      <a class="code" href="structpkgAcqMethod_1_1FetchResult.xhtml">FetchResult</a>();</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <span class="keyword">virtual</span> ~<a class="code" href="structpkgAcqMethod_1_1FetchResult.xhtml">FetchResult</a>();</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <span class="keyword">private</span>:</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      <span class="keywordtype">void</span> * <span class="keyword">const</span> d;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;   };</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;   <span class="comment">// State</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;   std::vector&lt;std::string&gt; Messages;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;   <a class="code" href="structpkgAcqMethod_1_1FetchItem.xhtml">FetchItem</a> *Queue;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;   <a class="code" href="structpkgAcqMethod_1_1FetchItem.xhtml">FetchItem</a> *QueueBack;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;   std::string FailReason;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;   std::string UsedMirror;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;   std::string IP;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;   <span class="comment">// Handlers for messages</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classConfiguration.xhtml">Configuration</a>(std::string Message);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Fetch(<a class="code" href="structpkgAcqMethod_1_1FetchItem.xhtml">FetchItem</a> * <span class="comment">/*Item*/</span>) {<span class="keywordflow">return</span> <span class="keyword">true</span>;};</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> URIAcquire(std::string <span class="keyword">const</span> &amp;<span class="comment">/*Message*/</span>, FetchItem *Itm) { <span class="keywordflow">return</span> Fetch(Itm); };</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;   <span class="comment">// Outgoing messages</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   <span class="keywordtype">void</span> Fail(<span class="keywordtype">bool</span> Transient = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> Fail(<span class="keyword">const</span> <span class="keywordtype">char</span> *Why, <span class="keywordtype">bool</span> Transient = <span class="keyword">false</span>) {Fail(std::string(Why),Transient);};</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Fail(std::string Why, <span class="keywordtype">bool</span> Transient = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">void</span> URIStart(FetchResult &amp;Res);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">void</span> URIDone(FetchResult &amp;Res,FetchResult *Alt = 0);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;   <span class="keywordtype">void</span> SendMessage(std::string <span class="keyword">const</span> &amp;header, std::unordered_map&lt;std::string, std::string&gt; &amp;&amp;fields);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;   <span class="keywordtype">bool</span> MediaFail(std::string Required,std::string Drive);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Exit() {};</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Use SendMessage instead&quot;</span>) void PrintStatus(<span class="keywordtype">char</span> const * const header, const <span class="keywordtype">char</span>* Format, va_list &amp;args) const;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;   public:</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;   enum CnfFlags</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;   {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      SingleInstance = (1 &lt;&lt; 0),</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      Pipeline = (1 &lt;&lt; 1),</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      SendConfig = (1 &lt;&lt; 2),</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      LocalOnly = (1 &lt;&lt; 3),</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      NeedsCleanup = (1 &lt;&lt; 4),</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      Removable = (1 &lt;&lt; 5),</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      AuxRequests = (1 &lt;&lt; 6),</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      SendURIEncoded = (1 &lt;&lt; 7),</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;   };</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;   <span class="keywordtype">void</span> Log(<span class="keyword">const</span> <span class="keywordtype">char</span> *Format,...);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;   <span class="keywordtype">void</span> Status(<span class="keyword">const</span> <span class="keywordtype">char</span> *Format,...);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;   </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;   <span class="keywordtype">void</span> Redirect(<span class="keyword">const</span> std::string &amp;NewURI);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;   <span class="keywordtype">int</span> Run(<span class="keywordtype">bool</span> Single = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFailReason(std::string Msg) {FailReason = Msg;};</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> SetIP(std::string aIP) {IP = aIP;};</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;   </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;   <a class="code" href="classpkgAcqMethod.xhtml">pkgAcqMethod</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *Ver,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags = 0);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classpkgAcqMethod.xhtml">pkgAcqMethod</a>();</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;   <span class="keywordtype">void</span> DropPrivsOrDie();</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;   <span class="keyword">private</span>:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;   APT_HIDDEN <span class="keywordtype">void</span> Dequeue();</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;};</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassConfiguration_xhtml"><div class="ttname"><a href="classConfiguration.xhtml">Configuration</a></div><div class="ttdef"><b>Definition:</b> configuration.h:40</div></div>
<div class="ttc" id="aclassHashStringList_xhtml"><div class="ttname"><a href="classHashStringList.xhtml">HashStringList</a></div><div class="ttdef"><b>Definition:</b> hashes.h:65</div></div>
<div class="ttc" id="aclassHashes_xhtml"><div class="ttname"><a href="classHashes.xhtml">Hashes</a></div><div class="ttdef"><b>Definition:</b> hashes.h:170</div></div>
<div class="ttc" id="aclasspkgAcqMethod_xhtml"><div class="ttname"><a href="classpkgAcqMethod.xhtml">pkgAcqMethod</a></div><div class="ttdef"><b>Definition:</b> acquire-method.h:34</div></div>
<div class="ttc" id="astructpkgAcqMethod_1_1FetchItem_1_1Private_xhtml"><div class="ttname"><a href="structpkgAcqMethod_1_1FetchItem_1_1Private.xhtml">pkgAcqMethod::FetchItem::Private</a></div><div class="ttdef"><b>Definition:</b> acquire-method.cc:580</div></div>
<div class="ttc" id="astructpkgAcqMethod_1_1FetchItem_xhtml"><div class="ttname"><a href="structpkgAcqMethod_1_1FetchItem.xhtml">pkgAcqMethod::FetchItem</a></div><div class="ttdef"><b>Definition:</b> acquire-method.h:38</div></div>
<div class="ttc" id="astructpkgAcqMethod_1_1FetchResult_xhtml"><div class="ttname"><a href="structpkgAcqMethod_1_1FetchResult.xhtml">pkgAcqMethod::FetchResult</a></div><div class="ttdef"><b>Definition:</b> acquire-method.h:64</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
