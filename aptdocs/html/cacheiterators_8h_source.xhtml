<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/cacheiterators.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cacheiterators.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Cache Iterators - Iterators for navigating the cache structure</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   The iterators all provides ++,==,!=,-&gt;,* and end for their type.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   The end function can be used to tell if the list has been fully</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   traversed.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   Unlike STL iterators these contain helper functions to access the data</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   that is being iterated over. This is because the data structures can&#39;t</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   be formed in a manner that is intuitive to use and also mmapable.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">   For each variable in the target structure that would need a translation</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   to be accessed correctly a translating function of the same name is</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   present in the iterator. If applicable the translating function will</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   return an iterator.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">   The DepIterator can iterate over two lists, a list of &#39;version depends&#39;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   or a list of &#39;package reverse depends&#39;. The type is determined by the</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">   structure passed to the constructor, which should be the structure</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   that has the depends pointer as a member. The provide iterator has the</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   same system.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">   This header is not user includable, please use apt-pkg/pkgcache.h</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#ifndef PKGLIB_CACHEITERATORS_H</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#define PKGLIB_CACHEITERATORS_H</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#ifndef __PKGLIB_IN_PKGCACHE_H</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#warning apt-pkg/cacheiterators.h should not be included directly, include apt-pkg/pkgcache.h instead</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;iosfwd&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/string_view.h&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">// abstract Iterator template                                           /*{{{*/</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/* This template provides the very basic iterator methods we</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">   need to have for doing some walk-over-the-cache magic */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classpkgCache.xhtml">   47</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Str, <span class="keyword">typename</span> Itr&gt; <span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::<a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a> :</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                        <span class="keyword">public</span> std::iterator&lt;std::forward_iterator_tag, Str&gt; {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        Str* OwnerPointer()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>Itr const*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;OwnerPointer(); }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        Str *S;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="classpkgCache.xhtml">pkgCache</a> *Owner;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> end()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner == 0 || S == OwnerPointer();}</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="comment">// Comparison</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> Itr &amp;B)<span class="keyword"> const </span>{<span class="keywordflow">return</span> S == B.S;}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> Itr &amp;B)<span class="keyword"> const </span>{<span class="keywordflow">return</span> S != B.S;}</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">inline</span> Str *operator -&gt;() {<span class="keywordflow">return</span> S;}</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keyword">inline</span> Str <span class="keyword">const</span> *operator -&gt;()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S;}</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">inline</span> <span class="keyword">operator</span> Str *() {<span class="keywordflow">return</span> S == OwnerPointer() ? 0 : S;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">inline</span> <span class="keyword">operator</span> Str <span class="keyword">const</span> *() <span class="keyword">const</span> {<span class="keywordflow">return</span> S == OwnerPointer() ? 0 : S;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">inline</span> Str &amp;operator *() {<span class="keywordflow">return</span> *S;}</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">inline</span> Str <span class="keyword">const</span> &amp;operator *()<span class="keyword"> const </span>{<span class="keywordflow">return</span> *S;}</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classpkgCache.xhtml">pkgCache</a> *Cache()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// Mixed stuff</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsGood()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> S &amp;&amp; Owner &amp;&amp; ! end();}</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Index()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S - OwnerPointer();}</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;Str&gt;</a> MapPointer()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;Str&gt;</a>(Index()) ;}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordtype">void</span> ReMap(<span class="keywordtype">void</span> <span class="keyword">const</span> * <span class="keyword">const</span> oldMap, <span class="keywordtype">void</span> * <span class="keyword">const</span> newMap) {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">if</span> (Owner == 0 || S == 0)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                S = <span class="keyword">static_cast&lt;</span>Str *<span class="keyword">&gt;</span>(newMap) + (S - <span class="keyword">static_cast&lt;</span>Str <span class="keyword">const </span>*<span class="keyword">&gt;</span>(oldMap));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">// Constructors - look out for the variable assigning</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>() : S(0), Owner(0) {}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">inline</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,Str *T = 0) : S(T), Owner(&amp;Owner) {}</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;};</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">// Group Iterator                                                       /*{{{*/</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">/* Packages with the same name are collected in a Group so someone only</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">   interest in package names can iterate easily over the names, so the</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">   different architectures can be treated as of the &quot;same&quot; package</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">   (apt internally treat them as totally different packages) */</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::GrpIterator: <span class="keyword">public</span> Iterator&lt;Group, GrpIterator&gt; {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordtype">long</span> HashIndex;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">inline</span> Group* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;GrpP : 0;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// This constructor is the &#39;begin&#39; constructor, never use it.</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">explicit</span> <span class="keyword">inline</span> GrpIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner) : Iterator&lt;Group, GrpIterator&gt;(Owner), HashIndex(-1) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                S = OwnerPointer();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                operator++();</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        GrpIterator&amp; operator++();</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">inline</span> GrpIterator operator++(<span class="keywordtype">int</span>) { GrpIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Name()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Name == 0?0:Owner-&gt;StrP + S-&gt;Name;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keyword">inline</span> PkgIterator PackageList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keyword">inline</span> VerIterator VersionsInSource() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        PkgIterator FindPkg(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Arch = <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a>(<span class="stringliteral">&quot;any&quot;</span>, 3)) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classpkgCache.xhtml#a8431e924471ea5ba03b66feea437505d">  129</a></span>&#160;        PkgIterator <a class="code" href="classpkgCache.xhtml#a8431e924471ea5ba03b66feea437505d">FindPreferredPkg</a>(<span class="keywordtype">bool</span> <span class="keyword">const</span> &amp;PreferNonVirtual = <span class="keyword">true</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        PkgIterator NextPkg(PkgIterator <span class="keyword">const</span> &amp;Pkg) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">// Constructors</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keyword">inline</span> GrpIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, <a class="code" href="structpkgCache_1_1Group.xhtml">Group</a> *Trg) : <a class="code" href="classpkgCache_1_1Iterator.xhtml">Iterator</a>&lt;<a class="code" href="structpkgCache_1_1Group.xhtml">Group</a>, GrpIterator&gt;(Owner, Trg), HashIndex(0) {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        S = OwnerPointer();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">inline</span> GrpIterator() : Iterator&lt;Group, GrpIterator&gt;(), HashIndex(0) {}</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;};</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">// Package Iterator                                                     /*{{{*/</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::PkgIterator: <span class="keyword">public</span> Iterator&lt;Package, PkgIterator&gt; {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordtype">long</span> HashIndex;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keyword">inline</span> Package* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;PkgP : 0;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="comment">// This constructor is the &#39;begin&#39; constructor, never use it.</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">explicit</span> <span class="keyword">inline</span> PkgIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner) : Iterator&lt;Package, PkgIterator&gt;(Owner), HashIndex(-1) {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                S = OwnerPointer();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                operator++();</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        PkgIterator&amp; operator++();</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keyword">inline</span> PkgIterator operator++(<span class="keywordtype">int</span>) { PkgIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keyword">enum</span> OkState {NeedsNothing,NeedsUnpack,NeedsConfigure};</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Name()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Group().Name(); }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> Purge()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;CurrentState == pkgCache::State::Purge ||</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                (S-&gt;CurrentVer == 0 &amp;&amp; S-&gt;CurrentState == pkgCache::State::NotInstalled);}</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Arch()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Arch == 0?0:Owner-&gt;StrP + S-&gt;Arch;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">inline</span> APT_PURE GrpIterator Group()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> GrpIterator(*Owner, Owner-&gt;GrpP + S-&gt;Group);}</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keyword">inline</span> VerIterator VersionList() const APT_PURE;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        inline VerIterator CurrentVer() const APT_PURE;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        inline DepIterator RevDependsList() const APT_PURE;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        inline PrvIterator ProvidesList() const APT_PURE;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        OkState State() const APT_PURE;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        const <span class="keywordtype">char</span> *CurVersion() const APT_PURE;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment">//Nice printable representation</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        APT_DEPRECATED_MSG(&quot;Use APT::PrettyPkg instead&quot;) friend std::ostream&amp; operator &lt;&lt;(std::ostream&amp; out, PkgIterator i);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        std::<span class="keywordtype">string</span> FullName(<span class="keywordtype">bool</span> const &amp;Pretty = false) const;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="comment">// Constructors</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        inline PkgIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,Package *Trg) : Iterator&lt;Package, PkgIterator&gt;(Owner, Trg), HashIndex(0) {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        S = OwnerPointer();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">inline</span> PkgIterator() : Iterator&lt;Package, PkgIterator&gt;(), HashIndex(0) {}</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;};</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">// Version Iterator                                                     /*{{{*/</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::VerIterator : <span class="keyword">public</span> Iterator&lt;Version, VerIterator&gt; {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">inline</span> Version* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;VerP : 0;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keyword">inline</span> VerIterator&amp; operator++() {<span class="keywordflow">if</span> (S != Owner-&gt;VerP) S = Owner-&gt;VerP + S-&gt;NextVer; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keyword">inline</span> VerIterator operator++(<span class="keywordtype">int</span>) { VerIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keyword">inline</span> VerIterator NextInSource()</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;           <span class="keywordflow">if</span> (S != Owner-&gt;VerP)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;              S = Owner-&gt;VerP + S-&gt;NextInSource;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;           <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="comment">// Comparison</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordtype">int</span> CompareVer(<span class="keyword">const</span> VerIterator &amp;B) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classpkgCache.xhtml#a486da0be3dac5e591e2655486cc1030a">  211</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classpkgCache.xhtml#a486da0be3dac5e591e2655486cc1030a">SimilarVer</a>(<span class="keyword">const</span> VerIterator &amp;B)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keywordflow">return</span> (B.end() == <span class="keyword">false</span> &amp;&amp; S-&gt;Hash == B-&gt;Hash &amp;&amp; strcmp(VerStr(), B.VerStr()) == 0);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *VerStr()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;VerStr == 0?0:Owner-&gt;StrP + S-&gt;VerStr;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Section()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Section == 0?0:Owner-&gt;StrP + S-&gt;Section;}</div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classpkgCache.xhtml#aaac2eed48d4cbb75721008224d11d19c">  220</a></span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classpkgCache.xhtml#aaac2eed48d4cbb75721008224d11d19c">SourcePkgName</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;StrP + S-&gt;SourcePkgName;}</div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classpkgCache.xhtml#aa8700f9c05be4b40480c3531bfa3a652">  223</a></span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classpkgCache.xhtml#aa8700f9c05be4b40480c3531bfa3a652">SourceVerStr</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;StrP + S-&gt;SourceVerStr;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Arch()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                <span class="keywordflow">if</span> ((S-&gt;MultiArch &amp; <a class="code" href="structpkgCache_1_1Version.xhtml#a8324be5b5e844cc9e33d3924da11025fa54991d225c58ce0af43461d4e9a82312">pkgCache::Version::All</a>) == <a class="code" href="structpkgCache_1_1Version.xhtml#a8324be5b5e844cc9e33d3924da11025fa54991d225c58ce0af43461d4e9a82312">pkgCache::Version::All</a>)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <span class="keywordflow">return</span> <span class="stringliteral">&quot;all&quot;</span>;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                <span class="keywordflow">return</span> S-&gt;ParentPkg == 0?0:Owner-&gt;StrP + ParentPkg()-&gt;Arch;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keyword">inline</span> PkgIterator ParentPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + S-&gt;ParentPkg);}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keyword">inline</span> DescIterator DescriptionList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        DescIterator TranslatedDescriptionForLanguage(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> lang) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        DescIterator TranslatedDescription() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keyword">inline</span> DepIterator DependsList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keyword">inline</span> PrvIterator ProvidesList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keyword">inline</span> VerFileIterator FileList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordtype">bool</span> Downloadable() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *PriorityType()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;Priority(S-&gt;Priority);}</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> *MultiArchType() const APT_PURE;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        std::<span class="keywordtype">string</span> RelStr() const;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordtype">bool</span> Automatic() const;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        VerFileIterator NewestFile() const;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">#ifdef APT_COMPILING_APT</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> PhasedUpdatePercentage()<span class="keyword"> const</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;           <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span>Version::Extra *<span class="keyword">&gt;</span>(Owner-&gt;Map.Data()) + S-&gt;d)-&gt;PhasedUpdatePercentage;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> PhasedUpdatePercentage(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> percentage)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;           <span class="keywordflow">if</span> (percentage &gt; 100)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;              <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;           (<span class="keyword">static_cast&lt;</span>Version::Extra *<span class="keyword">&gt;</span>(Owner-&gt;Map.Data()) + S-&gt;d)-&gt;PhasedUpdatePercentage = <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(percentage);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;           <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keyword">inline</span> VerIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,Version *Trg = 0) : Iterator&lt;Version, VerIterator&gt;(Owner, Trg) {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                        S = OwnerPointer();</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keyword">inline</span> VerIterator() : Iterator&lt;Version, VerIterator&gt;() {}</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;};</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">// Description Iterator                                                 /*{{{*/</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::DescIterator : <span class="keyword">public</span> Iterator&lt;Description, DescIterator&gt; {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keyword">inline</span> Description* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;DescP : 0;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keyword">inline</span> DescIterator&amp; operator++() {<span class="keywordflow">if</span> (S != Owner-&gt;DescP) S = Owner-&gt;DescP + S-&gt;NextDesc; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keyword">inline</span> DescIterator operator++(<span class="keywordtype">int</span>) { DescIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="comment">// Comparison</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordtype">int</span> CompareDesc(<span class="keyword">const</span> DescIterator &amp;B) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *LanguageCode()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;StrP + S-&gt;language_code;}</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *md5()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;StrP + S-&gt;md5sum;}</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keyword">inline</span> DescFileIterator FileList() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keyword">inline</span> DescIterator() : Iterator&lt;Description, DescIterator&gt;() {}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keyword">inline</span> DescIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,Description *Trg = 0) : Iterator&lt;Description, DescIterator&gt;(Owner, Trg) {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                        S = Owner.DescP;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;};</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">// Dependency iterator                                                  /*{{{*/</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::DepIterator : <span class="keyword">public</span> Iterator&lt;Dependency, DepIterator&gt; {</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keyword">enum</span> {DepVer, DepRev} Type;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        DependencyData * S2;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keyword">inline</span> Dependency* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;DepP : 0;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        DepIterator&amp; operator++();</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keyword">inline</span> DepIterator operator++(<span class="keywordtype">int</span>) { DepIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *TargetVer()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S2-&gt;Version == 0?0:Owner-&gt;StrP + S2-&gt;Version;}</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keyword">inline</span> PkgIterator TargetPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + S2-&gt;Package);}</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keyword">inline</span> PkgIterator SmartTargetPkg()<span class="keyword"> const </span>{PkgIterator R(*Owner,0);SmartTargetPkg(R);<span class="keywordflow">return</span> R;}</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keyword">inline</span> VerIterator ParentVer()<span class="keyword"> const </span>{<span class="keywordflow">return</span> VerIterator(*Owner,Owner-&gt;VerP + S-&gt;ParentVer);}</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keyword">inline</span> PkgIterator ParentPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + Owner-&gt;VerP[uint32_t(S-&gt;ParentVer)].ParentPkg);}</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> Reverse()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Type == DepRev;}</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordtype">bool</span> IsCritical() const APT_PURE;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordtype">bool</span> IsNegative() const APT_PURE;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordtype">bool</span> IsIgnorable(PrvIterator const &amp;Prv) const APT_PURE;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordtype">bool</span> IsIgnorable(PkgIterator const &amp;Pkg) const APT_PURE;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="comment">/* MultiArch can be translated to SingleArch for an resolver and we did so,</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">           by adding dependencies to help the resolver understand the problem, but</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">           sometimes it is needed to identify these to ignore them… */</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        inline <span class="keywordtype">bool</span> IsMultiArchImplicit() const APT_PURE {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <span class="keywordflow">return</span> (S2-&gt;CompareOp &amp; <a class="code" href="structpkgCache_1_1Dep.xhtml#aa3b0f58e581c41bc31d4b96cc4281ad6af9c5b729bdc83645d06cb71bd67938d7">pkgCache::Dep::MultiArchImplicit</a>) == <a class="code" href="structpkgCache_1_1Dep.xhtml#aa3b0f58e581c41bc31d4b96cc4281ad6af9c5b729bdc83645d06cb71bd67938d7">pkgCache::Dep::MultiArchImplicit</a>;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="comment">/* This covers additionally negative dependencies, which aren&#39;t arch-specific,</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">           but change architecture nonetheless as a Conflicts: foo does applies for all archs */</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordtype">bool</span> IsImplicit() const APT_PURE;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordtype">bool</span> IsSatisfied(VerIterator const &amp;Ver) const APT_PURE;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordtype">bool</span> IsSatisfied(PrvIterator const &amp;Prv) const APT_PURE;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordtype">void</span> GlobOr(DepIterator &amp;Start,DepIterator &amp;End);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        Version **AllTargets() const;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordtype">bool</span> SmartTargetPkg(PkgIterator &amp;Result) const;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        inline const <span class="keywordtype">char</span> *CompType()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;CompType(S2-&gt;CompareOp);}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *DepType()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Owner-&gt;DepType(S2-&gt;Type);}</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="comment">// overrides because we are special</span></div>
<div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="structpkgCache_1_1DependencyProxy.xhtml">  336</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="structpkgCache_1_1DependencyProxy.xhtml">DependencyProxy</a></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;           <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> &amp;<a class="code" href="structpkgCache_1_1Version.xhtml">Version</a>;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;           <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::Package&gt;</a> &amp;<a class="code" href="structpkgCache_1_1Package.xhtml">Package</a>;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;           map_id_t &amp;ID;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;           <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> &amp;Type;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;           <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> &amp;CompareOp;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;           <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::Version&gt;</a> &amp;ParentVer;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;           <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::DependencyData&gt;</a> &amp;<a class="code" href="structpkgCache_1_1DependencyData.xhtml">DependencyData</a>;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;           <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;Dependency&gt;</a> &amp;NextRevDepends;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;           <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;Dependency&gt;</a> &amp;NextDepends;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;           <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::DependencyData&gt;</a> &amp;NextData;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;           <a class="code" href="structpkgCache_1_1DependencyProxy.xhtml">DependencyProxy</a> <span class="keyword">const</span> * operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">this</span>; }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;           <a class="code" href="structpkgCache_1_1DependencyProxy.xhtml">DependencyProxy</a> * operator-&gt;() { <span class="keywordflow">return</span> <span class="keyword">this</span>; }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        };</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keyword">inline</span> <a class="code" href="structpkgCache_1_1DependencyProxy.xhtml">DependencyProxy</a> operator-&gt;()<span class="keyword"> const </span>{<span class="keywordflow">return</span> (<a class="code" href="structpkgCache_1_1DependencyProxy.xhtml">DependencyProxy</a>) { S2-&gt;Version, S2-&gt;Package, S-&gt;ID, S2-&gt;Type, S2-&gt;CompareOp, S-&gt;ParentVer, S-&gt;DependencyData, S-&gt;NextRevDepends, S-&gt;NextDepends, S2-&gt;NextData };}</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keyword">inline</span> DependencyProxy operator-&gt;() {<span class="keywordflow">return</span> (DependencyProxy) { S2-&gt;Version, S2-&gt;Package, S-&gt;ID, S2-&gt;Type, S2-&gt;CompareOp, S-&gt;ParentVer, S-&gt;DependencyData, S-&gt;NextRevDepends, S-&gt;NextDepends, S2-&gt;NextData };}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordtype">void</span> ReMap(<span class="keywordtype">void</span> <span class="keyword">const</span> * <span class="keyword">const</span> oldMap, <span class="keywordtype">void</span> * <span class="keyword">const</span> newMap)</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                Iterator&lt;Dependency, DepIterator&gt;::ReMap(oldMap, newMap);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keywordflow">if</span> (Owner == 0 || S == 0 || S2 == 0)</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                S2 = <span class="keyword">static_cast&lt;</span>DependencyData *<span class="keyword">&gt;</span>(newMap) + (S2 - <span class="keyword">static_cast&lt;</span>DependencyData <span class="keyword">const </span>*<span class="keyword">&gt;</span>(oldMap));</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="comment">//Nice printable representation</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Use APT::PrettyDep instead&quot;</span>) friend std::ostream&amp; operator &lt;&lt;(std::ostream&amp; out, DepIterator D);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        inline DepIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Dependency *Trg, Version* = 0) :</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                Iterator&lt;Dependency, DepIterator&gt;(Owner, Trg), Type(DepVer), S2(Trg == 0 ? Owner.DepDataP : (Owner.DepDataP + Trg-&gt;DependencyData)) {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                        S = Owner.DepP;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">inline</span> DepIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Dependency *Trg, Package*) :</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                Iterator&lt;Dependency, DepIterator&gt;(Owner, Trg), Type(DepRev), S2(Trg == 0 ? Owner.DepDataP : (Owner.DepDataP + Trg-&gt;DependencyData)) {</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        S = Owner.DepP;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keyword">inline</span> DepIterator() : Iterator&lt;Dependency, DepIterator&gt;(), Type(DepVer), S2(0) {}</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;};</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">// Provides iterator                                                    /*{{{*/</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::PrvIterator : <span class="keyword">public</span> Iterator&lt;Provides, PrvIterator&gt; {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keyword">enum</span> {PrvVer, PrvPkg} Type;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keyword">inline</span> Provides* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;ProvideP : 0;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        }</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keyword">inline</span> PrvIterator&amp; operator ++() {<span class="keywordflow">if</span> (S != Owner-&gt;ProvideP) S = Owner-&gt;ProvideP +</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;           (Type == PrvVer?S-&gt;NextPkgProv:S-&gt;NextProvides); <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keyword">inline</span> PrvIterator operator++(<span class="keywordtype">int</span>) { PrvIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Name()<span class="keyword"> const </span>{<span class="keywordflow">return</span> ParentPkg().Name();}</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *ProvideVersion()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;ProvideVersion == 0?0:Owner-&gt;StrP + S-&gt;ProvideVersion;}</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keyword">inline</span> PkgIterator ParentPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + S-&gt;ParentPkg);}</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keyword">inline</span> VerIterator OwnerVer()<span class="keyword"> const </span>{<span class="keywordflow">return</span> VerIterator(*Owner,Owner-&gt;VerP + S-&gt;Version);}</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keyword">inline</span> PkgIterator OwnerPkg()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + Owner-&gt;VerP[uint32_t(S-&gt;Version)].ParentPkg);}</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="comment">/* MultiArch can be translated to SingleArch for an resolver and we did so,</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">           by adding provides to help the resolver understand the problem, but</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">           sometimes it is needed to identify these to ignore them… */</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keywordtype">bool</span> IsMultiArchImplicit() const APT_PURE</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        { <span class="keywordflow">return</span> (S-&gt;Flags &amp; <a class="code" href="structpkgCache_1_1Flag.xhtml#a1c2ee6cc883dab3ea2ef28a1f6d73f7aaf9c5b729bdc83645d06cb71bd67938d7">pkgCache::Flag::MultiArchImplicit</a>) == <a class="code" href="structpkgCache_1_1Flag.xhtml#a1c2ee6cc883dab3ea2ef28a1f6d73f7aaf9c5b729bdc83645d06cb71bd67938d7">pkgCache::Flag::MultiArchImplicit</a>; }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keyword">inline</span> PrvIterator() : Iterator&lt;Provides, PrvIterator&gt;(), Type(PrvVer) {}</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keyword">inline</span> PrvIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Provides *Trg, Version*) :</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                Iterator&lt;Provides, PrvIterator&gt;(Owner, Trg), Type(PrvVer) {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                        S = Owner.ProvideP;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keyword">inline</span> PrvIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner, Provides *Trg, Package*) :</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                Iterator&lt;Provides, PrvIterator&gt;(Owner, Trg), Type(PrvPkg) {</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                <span class="keywordflow">if</span> (S == 0)</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                        S = Owner.ProvideP;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;};</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">// Release file                                                         /*{{{*/</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::RlsFileIterator : <span class="keyword">public</span> Iterator&lt;ReleaseFile, RlsFileIterator&gt; {</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keyword">inline</span> ReleaseFile* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;RlsFileP : 0;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="keyword">inline</span> RlsFileIterator&amp; operator++() {<span class="keywordflow">if</span> (S != Owner-&gt;RlsFileP) S = Owner-&gt;RlsFileP + S-&gt;NextFile;<span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keyword">inline</span> RlsFileIterator operator++(<span class="keywordtype">int</span>) { RlsFileIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *FileName()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;FileName == 0?0:Owner-&gt;StrP + S-&gt;FileName;}</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Archive()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Archive == 0?0:Owner-&gt;StrP + S-&gt;Archive;}</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Version()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Version == 0?0:Owner-&gt;StrP + S-&gt;Version;}</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Origin()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Origin == 0?0:Owner-&gt;StrP + S-&gt;Origin;}</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Codename()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Codename ==0?0:Owner-&gt;StrP + S-&gt;Codename;}</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Label()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Label == 0?0:Owner-&gt;StrP + S-&gt;Label;}</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Site()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Site == 0?0:Owner-&gt;StrP + S-&gt;Site;}</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> Flagged(<a class="code" href="structpkgCache_1_1Flag.xhtml#a1ef5d1f0f0b4088db16167a4661476cd">pkgCache::Flag::ReleaseFileFlags</a> <span class="keyword">const</span> flag)<span class="keyword"> const </span>{<span class="keywordflow">return</span> (S-&gt;Flags &amp; flag) == flag; }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        std::string RelStr();</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="comment">// Constructors</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keyword">inline</span> RlsFileIterator() : Iterator&lt;ReleaseFile, RlsFileIterator&gt;() {}</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keyword">explicit</span> <span class="keyword">inline</span> RlsFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner) : Iterator&lt;ReleaseFile, RlsFileIterator&gt;(Owner, Owner.RlsFileP) {}</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keyword">inline</span> RlsFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,ReleaseFile *Trg) : Iterator&lt;ReleaseFile, RlsFileIterator&gt;(Owner, Trg) {}</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;};</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">// Package file                                                         /*{{{*/</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::PkgFileIterator : <span class="keyword">public</span> Iterator&lt;PackageFile, PkgFileIterator&gt; {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keyword">inline</span> PackageFile* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;PkgFileP : 0;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        }</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keyword">inline</span> PkgFileIterator&amp; operator++() {<span class="keywordflow">if</span> (S != Owner-&gt;PkgFileP) S = Owner-&gt;PkgFileP + S-&gt;NextFile; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keyword">inline</span> PkgFileIterator operator++(<span class="keywordtype">int</span>) { PkgFileIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160; </div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *FileName()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;FileName == 0?0:Owner-&gt;StrP + S-&gt;FileName;}</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keyword">inline</span> pkgCache::RlsFileIterator ReleaseFile()<span class="keyword"> const </span>{<span class="keywordflow">return</span> RlsFileIterator(*Owner, Owner-&gt;RlsFileP + S-&gt;Release);}</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Archive()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Release == 0 ? Component() : ReleaseFile().Archive();}</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Version()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Release == 0 ? NULL : ReleaseFile().Version();}</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Origin()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Release == 0 ? NULL : ReleaseFile().Origin();}</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Codename()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Release == 0 ? NULL : ReleaseFile().Codename();}</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Label()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Release == 0 ? NULL : ReleaseFile().Label();}</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Site()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Release == 0 ? NULL : ReleaseFile().Site();}</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> Flagged(<a class="code" href="structpkgCache_1_1Flag.xhtml#a1ef5d1f0f0b4088db16167a4661476cd">pkgCache::Flag::ReleaseFileFlags</a> <span class="keyword">const</span> flag)<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Release== 0 ? false : ReleaseFile().Flagged(flag);}</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> Flagged(<a class="code" href="structpkgCache_1_1Flag.xhtml#a434200db8c166ff0c46eb0a70158a89d">pkgCache::Flag::PkgFFlags</a> <span class="keyword">const</span> flag)<span class="keyword"> const </span>{<span class="keywordflow">return</span> (S-&gt;Flags &amp; flag) == flag;}</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Component()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Component == 0?0:Owner-&gt;StrP + S-&gt;Component;}</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *Architecture()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;Architecture == 0?0:Owner-&gt;StrP + S-&gt;Architecture;}</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *IndexType()<span class="keyword"> const </span>{<span class="keywordflow">return</span> S-&gt;IndexType == 0?0:Owner-&gt;StrP + S-&gt;IndexType;}</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        std::string RelStr();</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160; </div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="comment">// Constructors</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keyword">inline</span> PkgFileIterator() : Iterator&lt;PackageFile, PkgFileIterator&gt;() {}</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keyword">explicit</span> <span class="keyword">inline</span> PkgFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner) : Iterator&lt;PackageFile, PkgFileIterator&gt;(Owner, Owner.PkgFileP) {}</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keyword">inline</span> PkgFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,PackageFile *Trg) : Iterator&lt;PackageFile, PkgFileIterator&gt;(Owner, Trg) {}</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;};</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">// Version File                                                         /*{{{*/</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::VerFileIterator : <span class="keyword">public</span> <a class="code" href="classpkgCache_1_1Iterator.xhtml">pkgCache::Iterator</a>&lt;VerFile, VerFileIterator&gt; {</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keyword">inline</span> VerFile* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;VerFileP : 0;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160; </div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <span class="keyword">inline</span> VerFileIterator&amp; operator++() {<span class="keywordflow">if</span> (S != Owner-&gt;VerFileP) S = Owner-&gt;VerFileP + S-&gt;NextFile; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        <span class="keyword">inline</span> VerFileIterator operator++(<span class="keywordtype">int</span>) { VerFileIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="keyword">inline</span> PkgFileIterator File()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgFileIterator(*Owner, Owner-&gt;PkgFileP + S-&gt;File);}</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160; </div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keyword">inline</span> VerFileIterator() : Iterator&lt;VerFile, VerFileIterator&gt;() {}</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <span class="keyword">inline</span> VerFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,VerFile *Trg) : Iterator&lt;VerFile, VerFileIterator&gt;(Owner, Trg) {}</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;};</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">// Description File                                                     /*{{{*/</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgCache.xhtml">pkgCache</a>::DescFileIterator : <span class="keyword">public</span> Iterator&lt;DescFile, DescFileIterator&gt; {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keyword">inline</span> DescFile* OwnerPointer()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                <span class="keywordflow">return</span> (Owner != 0) ? Owner-&gt;DescFileP : 0;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        }</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160; </div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <span class="comment">// Iteration</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="keyword">inline</span> DescFileIterator&amp; operator++() {<span class="keywordflow">if</span> (S != Owner-&gt;DescFileP) S = Owner-&gt;DescFileP + S-&gt;NextFile; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keyword">inline</span> DescFileIterator operator++(<span class="keywordtype">int</span>) { DescFileIterator <span class="keyword">const</span> tmp(*<span class="keyword">this</span>); operator++(); <span class="keywordflow">return</span> tmp; }</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        <span class="comment">// Accessors</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keyword">inline</span> PkgFileIterator File()<span class="keyword"> const </span>{<span class="keywordflow">return</span> PkgFileIterator(*Owner, Owner-&gt;PkgFileP + S-&gt;File);}</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keyword">inline</span> DescFileIterator() : Iterator&lt;DescFile, DescFileIterator&gt;() {}</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keyword">inline</span> DescFileIterator(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Owner,DescFile *Trg) : Iterator&lt;DescFile, DescFileIterator&gt;(Owner, Trg) {}</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;};</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">// Inlined Begin functions can&#39;t be in the class because of order problems /*{{{*/</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="keyword">inline</span> pkgCache::PkgIterator pkgCache::GrpIterator::PackageList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> PkgIterator(*Owner,Owner-&gt;PkgP + S-&gt;FirstPackage);}</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;       <span class="keyword">inline</span> pkgCache::VerIterator pkgCache::GrpIterator::VersionsInSource()<span class="keyword"> const</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="keyword">       </span>{</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;          <span class="keywordflow">return</span> VerIterator(*Owner, Owner-&gt;VerP + S-&gt;VersionsInSource);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;       }</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="keyword">inline</span> pkgCache::VerIterator pkgCache::PkgIterator::VersionList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> VerIterator(*Owner,Owner-&gt;VerP + S-&gt;VersionList);}</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="keyword">inline</span> pkgCache::VerIterator pkgCache::PkgIterator::CurrentVer()<span class="keyword"> const</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> VerIterator(*Owner,Owner-&gt;VerP + S-&gt;CurrentVer);}</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="keyword">inline</span> pkgCache::DepIterator pkgCache::PkgIterator::RevDependsList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> DepIterator(*Owner,Owner-&gt;DepP + S-&gt;RevDepends,S);}</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="keyword">inline</span> pkgCache::PrvIterator pkgCache::PkgIterator::ProvidesList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> PrvIterator(*Owner,Owner-&gt;ProvideP + S-&gt;ProvidesList,S);}</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="keyword">inline</span> pkgCache::DescIterator pkgCache::VerIterator::DescriptionList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> DescIterator(*Owner,Owner-&gt;DescP + S-&gt;DescriptionList);}</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="keyword">inline</span> pkgCache::PrvIterator pkgCache::VerIterator::ProvidesList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> PrvIterator(*Owner,Owner-&gt;ProvideP + S-&gt;ProvidesList,S);}</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keyword">inline</span> pkgCache::DepIterator pkgCache::VerIterator::DependsList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> DepIterator(*Owner,Owner-&gt;DepP + S-&gt;DependsList,S);}</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="keyword">inline</span> pkgCache::VerFileIterator pkgCache::VerIterator::FileList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> VerFileIterator(*Owner,Owner-&gt;VerFileP + S-&gt;FileList);}</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="keyword">inline</span> pkgCache::DescFileIterator pkgCache::DescIterator::FileList()<span class="keyword"> const</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="keyword">       </span>{<span class="keywordflow">return</span> DescFileIterator(*Owner,Owner-&gt;DescFileP + S-&gt;FileList);}</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassAPT_1_1StringView_xhtml"><div class="ttname"><a href="classAPT_1_1StringView.xhtml">APT::StringView</a></div><div class="ttdoc">Simple subset of std::string_view from C++17.</div><div class="ttdef"><b>Definition:</b> string_view.h:27</div></div>
<div class="ttc" id="aclassmap__pointer_xhtml"><div class="ttname"><a href="classmap__pointer.xhtml">map_pointer</a></div><div class="ttdef"><b>Definition:</b> pkgcache.h:98</div></div>
<div class="ttc" id="aclasspkgCache_1_1Iterator_xhtml"><div class="ttname"><a href="classpkgCache_1_1Iterator.xhtml">pkgCache::Iterator</a></div><div class="ttdef"><b>Definition:</b> pkgcache.h:144</div></div>
<div class="ttc" id="aclasspkgCache_xhtml"><div class="ttname"><a href="classpkgCache.xhtml">pkgCache</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:48</div></div>
<div class="ttc" id="aclasspkgCache_xhtml_a486da0be3dac5e591e2655486cc1030a"><div class="ttname"><a href="classpkgCache.xhtml#a486da0be3dac5e591e2655486cc1030a">pkgCache::SimilarVer</a></div><div class="ttdeci">bool SimilarVer(const VerIterator &amp;B) const</div><div class="ttdoc">compares two version and returns if they are similar</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:211</div></div>
<div class="ttc" id="aclasspkgCache_xhtml_a8431e924471ea5ba03b66feea437505d"><div class="ttname"><a href="classpkgCache.xhtml#a8431e924471ea5ba03b66feea437505d">pkgCache::FindPreferredPkg</a></div><div class="ttdeci">PkgIterator FindPreferredPkg(bool const &amp;PreferNonVirtual=true) const</div><div class="ttdoc">find the package with the &quot;best&quot; architecture</div></div>
<div class="ttc" id="aclasspkgCache_xhtml_aa8700f9c05be4b40480c3531bfa3a652"><div class="ttname"><a href="classpkgCache.xhtml#aa8700f9c05be4b40480c3531bfa3a652">pkgCache::SourceVerStr</a></div><div class="ttdeci">const char * SourceVerStr() const</div><div class="ttdoc">source version this version comes from Always contains the version string, even if it is the same as ...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:223</div></div>
<div class="ttc" id="aclasspkgCache_xhtml_aaac2eed48d4cbb75721008224d11d19c"><div class="ttname"><a href="classpkgCache.xhtml#aaac2eed48d4cbb75721008224d11d19c">pkgCache::SourcePkgName</a></div><div class="ttdeci">const char * SourcePkgName() const</div><div class="ttdoc">source package name this version comes from Always contains the name, even if it is the same as the b...</div><div class="ttdef"><b>Definition:</b> cacheiterators.h:220</div></div>
<div class="ttc" id="astructpkgCache_1_1Dep_xhtml_aa3b0f58e581c41bc31d4b96cc4281ad6af9c5b729bdc83645d06cb71bd67938d7"><div class="ttname"><a href="structpkgCache_1_1Dep.xhtml#aa3b0f58e581c41bc31d4b96cc4281ad6af9c5b729bdc83645d06cb71bd67938d7">pkgCache::Dep::MultiArchImplicit</a></div><div class="ttdeci">@ MultiArchImplicit</div><div class="ttdef"><b>Definition:</b> pkgcache.h:175</div></div>
<div class="ttc" id="astructpkgCache_1_1DependencyData_xhtml"><div class="ttname"><a href="structpkgCache_1_1DependencyData.xhtml">pkgCache::DependencyData</a></div><div class="ttdoc">information for a single dependency record</div><div class="ttdef"><b>Definition:</b> pkgcache.h:738</div></div>
<div class="ttc" id="astructpkgCache_1_1DependencyProxy_xhtml"><div class="ttname"><a href="structpkgCache_1_1DependencyProxy.xhtml">pkgCache::DependencyProxy</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:337</div></div>
<div class="ttc" id="astructpkgCache_1_1Flag_xhtml_a1c2ee6cc883dab3ea2ef28a1f6d73f7aaf9c5b729bdc83645d06cb71bd67938d7"><div class="ttname"><a href="structpkgCache_1_1Flag.xhtml#a1c2ee6cc883dab3ea2ef28a1f6d73f7aaf9c5b729bdc83645d06cb71bd67938d7">pkgCache::Flag::MultiArchImplicit</a></div><div class="ttdeci">@ MultiArchImplicit</div><div class="ttdef"><b>Definition:</b> pkgcache.h:206</div></div>
<div class="ttc" id="astructpkgCache_1_1Flag_xhtml_a1ef5d1f0f0b4088db16167a4661476cd"><div class="ttname"><a href="structpkgCache_1_1Flag.xhtml#a1ef5d1f0f0b4088db16167a4661476cd">pkgCache::Flag::ReleaseFileFlags</a></div><div class="ttdeci">ReleaseFileFlags</div><div class="ttdef"><b>Definition:</b> pkgcache.h:201</div></div>
<div class="ttc" id="astructpkgCache_1_1Flag_xhtml_a434200db8c166ff0c46eb0a70158a89d"><div class="ttname"><a href="structpkgCache_1_1Flag.xhtml#a434200db8c166ff0c46eb0a70158a89d">pkgCache::Flag::PkgFFlags</a></div><div class="ttdeci">PkgFFlags</div><div class="ttdef"><b>Definition:</b> pkgcache.h:196</div></div>
<div class="ttc" id="astructpkgCache_1_1Group_xhtml"><div class="ttname"><a href="structpkgCache_1_1Group.xhtml">pkgCache::Group</a></div><div class="ttdoc">groups architecture depending packages together</div><div class="ttdef"><b>Definition:</b> pkgcache.h:415</div></div>
<div class="ttc" id="astructpkgCache_1_1Package_xhtml"><div class="ttname"><a href="structpkgCache_1_1Package.xhtml">pkgCache::Package</a></div><div class="ttdoc">contains information for a single unique package</div><div class="ttdef"><b>Definition:</b> pkgcache.h:450</div></div>
<div class="ttc" id="astructpkgCache_1_1Version_xhtml"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml">pkgCache::Version</a></div><div class="ttdoc">information for a single version of a package</div><div class="ttdef"><b>Definition:</b> pkgcache.h:625</div></div>
<div class="ttc" id="astructpkgCache_1_1Version_xhtml_a8324be5b5e844cc9e33d3924da11025fa54991d225c58ce0af43461d4e9a82312"><div class="ttname"><a href="structpkgCache_1_1Version.xhtml#a8324be5b5e844cc9e33d3924da11025fa54991d225c58ce0af43461d4e9a82312">pkgCache::Version::All</a></div><div class="ttdeci">@ All</div><div class="ttdef"><b>Definition:</b> pkgcache.h:641</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
