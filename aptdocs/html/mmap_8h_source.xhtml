<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/contrib/mmap.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_c6ef23f15b074dcedf6810e24f2a7676.xhtml">contrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">mmap.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   MMap Class - Provides &#39;real&#39; mmap or a faked mmap using read().</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   The purpose of this code is to provide a generic way for clients to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   access the mmap function. In environments that do not support mmap</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   from file fd&#39;s this function will use read and normal allocated </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   memory.</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   Writing to a public mmap will always fully commit all changes when the</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   class is deleted. Ie it will rewrite the file, unless it is readonly</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">   The DynamicMMap class is used to help the on-disk data structure </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   generators. It provides a large allocated workspace and members</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   to allocate space from the workspace in an efficient fashion.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">   This source is placed in the Public Domain, do with it what you will</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">   It was originally written by Jason Gunthorpe.</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef PKGLIB_MMAP_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define PKGLIB_MMAP_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;sys/mman.h&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">class </span><a class="code" href="classFileFd.xhtml">FileFd</a>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/* This should be a 32 bit type, larger types use too much ram and smaller</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">   types are too small. Where ever possible &#39;unsigned long&#39; should be used</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   instead of this internal type */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> map_ptrloc;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classMMap.xhtml">   40</a></span>&#160;<span class="keyword">class </span><a class="code" href="classMMap.xhtml">MMap</a></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;   </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> iSize;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;   <span class="keywordtype">void</span> *Base;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;   <span class="comment">// In case mmap can not be used, we keep a dup of the file</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;   <span class="comment">// descriptor that should have been mmaped so that we can write to</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;   <span class="comment">// the file in Sync().</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;   <a class="code" href="classFileFd.xhtml">FileFd</a> *SyncToFd;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;   <span class="keywordtype">bool</span> <a class="code" href="classMMap.xhtml#abf6208ba8fc33da8217ee57b919c1892">Map</a>(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;   <span class="keywordtype">bool</span> Close(<span class="keywordtype">bool</span> DoSync = <span class="keyword">true</span>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;   </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;   <span class="keyword">enum</span> OpenFlags {NoImmMap = (1&lt;&lt;0),Public = (1&lt;&lt;1),ReadOnly = (1&lt;&lt;2),</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                   UnMapped = (1&lt;&lt;3), Moveable = (1&lt;&lt;4), Fallback = (1 &lt;&lt; 5)};</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;   <span class="comment">// Simple accessors</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;   <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="keywordtype">void</span> *() {<span class="keywordflow">return</span> Base;};</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> *Data() {<span class="keywordflow">return</span> Base;}; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size() {<span class="keywordflow">return</span> iSize;};</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> AddSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> size) {iSize += size;};</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> validData()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Base != MAP_FAILED &amp;&amp; Base != 0; };</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;   </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;   <span class="comment">// File manipulators</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;   <span class="keywordtype">bool</span> Sync();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;   <span class="keywordtype">bool</span> Sync(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Start,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Stop);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;   <a class="code" href="classMMap.xhtml">MMap</a>(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;F,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="classMMap.xhtml">MMap</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classMMap.xhtml">MMap</a>();</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;};</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classDynamicMMap.xhtml">   77</a></span>&#160;<span class="keyword">class </span><a class="code" href="classDynamicMMap.xhtml">DynamicMMap</a> : <span class="keyword">public</span> <a class="code" href="classMMap.xhtml">MMap</a></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;   </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;   <span class="comment">// This is the allocation pool structure</span></div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="structDynamicMMap_1_1Pool.xhtml">   82</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structDynamicMMap_1_1Pool.xhtml">Pool</a></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;   {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ItemSize;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Start;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Count;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;   };</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;   </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;   <a class="code" href="classFileFd.xhtml">FileFd</a> *Fd;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WorkSpace;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> GrowFactor;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> Limit;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;   <a class="code" href="structDynamicMMap_1_1Pool.xhtml">Pool</a> *Pools;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> PoolCount;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;   <span class="keywordtype">bool</span> Grow();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;   </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;   <span class="comment">// Allocation</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> RawAllocate(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Aln = 0);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Allocate(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ItemSize);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WriteString(<span class="keyword">const</span> <span class="keywordtype">char</span> *String,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Len = std::numeric_limits&lt;unsigned long&gt;::max());</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WriteString(<span class="keyword">const</span> std::string &amp;S) {<span class="keywordflow">return</span> WriteString(S.c_str(),S.length());};</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;   <span class="keywordtype">void</span> UsePools(Pool &amp;P,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Count) {Pools = &amp;P; PoolCount = Count;};</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;   </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;   <a class="code" href="classDynamicMMap.xhtml">DynamicMMap</a>(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;F,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;WorkSpace = 2*1024*1024,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;               <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;Grow = 1024*1024, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;Limit = 0);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;   <a class="code" href="classDynamicMMap.xhtml">DynamicMMap</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;WorkSpace = 2*1024*1024,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;               <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;Grow = 1024*1024, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;Limit = 0);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classDynamicMMap.xhtml">DynamicMMap</a>();</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;};</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassDynamicMMap_xhtml"><div class="ttname"><a href="classDynamicMMap.xhtml">DynamicMMap</a></div><div class="ttdef"><b>Definition:</b> mmap.h:78</div></div>
<div class="ttc" id="aclassFileFd_xhtml"><div class="ttname"><a href="classFileFd.xhtml">FileFd</a></div><div class="ttdef"><b>Definition:</b> fileutl.h:39</div></div>
<div class="ttc" id="aclassMMap_xhtml"><div class="ttname"><a href="classMMap.xhtml">MMap</a></div><div class="ttdef"><b>Definition:</b> mmap.h:41</div></div>
<div class="ttc" id="aclassMMap_xhtml_abf6208ba8fc33da8217ee57b919c1892"><div class="ttname"><a href="classMMap.xhtml#abf6208ba8fc33da8217ee57b919c1892">MMap::Map</a></div><div class="ttdeci">bool Map(FileFd &amp;Fd)</div><div class="ttdef"><b>Definition:</b> mmap.cc:64</div></div>
<div class="ttc" id="astructDynamicMMap_1_1Pool_xhtml"><div class="ttname"><a href="structDynamicMMap_1_1Pool.xhtml">DynamicMMap::Pool</a></div><div class="ttdef"><b>Definition:</b> mmap.h:83</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
