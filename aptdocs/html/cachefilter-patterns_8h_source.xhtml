<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/cachefilter-patterns.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cachefilter-patterns.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * cachefilter-patterns.h - Pattern parser and additional patterns as matchers</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * Copyright (c) 2019 Canonical Ltd</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * SPDX-License-Identifier: GPL-2.0+</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#ifndef APT_CACHEFILTER_PATTERNS_H</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#define APT_CACHEFILTER_PATTERNS_H</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/cachefile.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="cachefilter_8h.xhtml">apt-pkg/cachefilter.h</a>&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/error.h&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/string_view.h&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/strutl.h&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#ifndef APT_COMPILING_APT</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#error Internal header</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span>APT</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>Internal</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1PatternTreeParser.xhtml">   39</a></span>&#160;<span class="keyword">struct </span>APT_PUBLIC <a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser.xhtml">PatternTreeParser</a></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">   42</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">Node</a></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;   {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      <span class="keywordtype">size_t</span> start = 0;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      <span class="keywordtype">size_t</span> end = 0;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      <span class="keyword">explicit</span> <a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">Node</a>(<span class="keywordtype">size_t</span> start = 0, <span class="keywordtype">size_t</span> end = 0) : start(start), end(end) {}</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="keyword">virtual</span> std::ostream &amp;render(std::ostream &amp;os) { <span class="keywordflow">return</span> os; };</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      std::nullptr_t error(std::string message);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keyword">virtual</span> ~<a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">Node</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;   };</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Error.xhtml">   54</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Error.xhtml">Error</a> : <span class="keyword">public</span> std::exception</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;   {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">Node</a> location;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      std::string message;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Error.xhtml">Error</a>(<a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">Node</a> location, std::string message) : location(location), message(message) {}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span> *what() <span class="keyword">const</span> <span class="keywordflow">throw</span>() <span class="keyword">override</span> { <span class="keywordflow">return</span> message.c_str(); }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;   };</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1PatternNode.xhtml">   63</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1PatternNode.xhtml">PatternNode</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">Node</a></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;   {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> term;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      std::vector&lt;std::unique_ptr&lt;Node&gt;&gt; arguments;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <span class="keywordtype">bool</span> haveArgumentList = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      APT_HIDDEN std::ostream &amp;render(std::ostream &amp;stream) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      APT_HIDDEN <span class="keywordtype">bool</span> matches(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> name, <span class="keywordtype">int</span> min, <span class="keywordtype">int</span> max);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   };</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1WordNode.xhtml">   73</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1WordNode.xhtml">WordNode</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">Node</a></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> word;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <span class="keywordtype">bool</span> quoted = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      APT_HIDDEN std::ostream &amp;render(std::ostream &amp;stream) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;   };</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1State.xhtml">   80</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1State.xhtml">State</a></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;   {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      <span class="keywordtype">size_t</span> offset = 0;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;   };</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;   <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> sentence;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser_1_1State.xhtml">State</a> state;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1PatternTreeParser.xhtml">PatternTreeParser</a>(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> sentence) : sentence(sentence){};</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;   off_t skipSpace()</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <span class="keywordflow">while</span> (sentence[state.offset] == <span class="charliteral">&#39; &#39;</span> || sentence[state.offset] == <span class="charliteral">&#39;\t&#39;</span> || sentence[state.offset] == <span class="charliteral">&#39;\r&#39;</span> || sentence[state.offset] == <span class="charliteral">&#39;\n&#39;</span>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;         state.offset++;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      <span class="keywordflow">return</span> state.offset;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   };</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;   std::unique_ptr&lt;Node&gt; parseTop();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;   std::unique_ptr&lt;Node&gt; parse(); <span class="comment">// public for test cases only</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;   <span class="keyword">private</span>:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parseOr();</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parseAnd();</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parseUnary();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parsePrimary();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parseGroup();</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parsePattern();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parseShortPattern();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parseArgument(<span class="keywordtype">bool</span> shrt);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parseWord(<span class="keywordtype">bool</span> shrt);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;   APT_HIDDEN std::unique_ptr&lt;Node&gt; parseQuotedWord();</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;};</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1PatternParser.xhtml">  123</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1PatternParser.xhtml">PatternParser</a></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;   <a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *file;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;   std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; aPattern(std::unique_ptr&lt;PatternTreeParser::Node&gt; &amp;nodeP);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;   std::string aWord(std::unique_ptr&lt;PatternTreeParser::Node&gt; &amp;nodeP);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;};</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">namespace </span>Patterns</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">using namespace </span>APT::CacheFilter;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">  136</a></span>&#160;<span class="keyword">class </span><a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;   regex_t *pattern;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;   <a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a>(std::string <span class="keyword">const</span> &amp;<span class="keywordtype">string</span>);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;   ~<a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a>();</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;   <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <span class="keywordtype">char</span> *cstring);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;   <span class="keywordtype">bool</span> operator()(std::string <span class="keyword">const</span> &amp;<span class="keywordtype">string</span>)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;   {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <span class="keywordflow">return</span> (*<span class="keyword">this</span>)(<span class="keywordtype">string</span>.c_str());</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;   }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;};</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsAutomatic.xhtml">  150</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsAutomatic.xhtml">PackageIsAutomatic</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;   <a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsAutomatic.xhtml">PackageIsAutomatic</a>(<a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache) : Cache(Cache) {}</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      assert(Cache != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      <span class="keywordflow">return</span> ((*Cache)[Pkg].Flags &amp; pkgCache::Flag::Auto) != 0;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;   }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;};</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsBroken.xhtml">  161</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsBroken.xhtml">PackageIsBroken</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;   <a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsBroken.xhtml">PackageIsBroken</a>(<a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache) : Cache(Cache) {}</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      assert(Cache != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      <span class="keyword">auto</span> state = (*Cache)[Pkg];</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      <span class="keywordflow">return</span> state.InstBroken() || state.NowBroken();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;   }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;};</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsConfigFiles.xhtml">  173</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsConfigFiles.xhtml">PackageIsConfigFiles</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      <span class="keywordflow">return</span> Pkg-&gt;CurrentState == pkgCache::State::ConfigFiles;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;   }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;};</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsGarbage.xhtml">  181</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsGarbage.xhtml">PackageIsGarbage</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;   <a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsGarbage.xhtml">PackageIsGarbage</a>(<a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache) : Cache(Cache) {}</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      assert(Cache != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      <span class="keywordflow">return</span> (*Cache)[Pkg].Garbage;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;   }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;};</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsEssential.xhtml">  191</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsEssential.xhtml">PackageIsEssential</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="keywordflow">return</span> (Pkg-&gt;Flags &amp; pkgCache::Flag::Essential) != 0;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;   }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageHasExactName.xhtml">  199</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageHasExactName.xhtml">PackageHasExactName</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;   std::string name;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageHasExactName.xhtml">PackageHasExactName</a>(std::string name) : name(name) {}</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      <span class="keywordflow">return</span> Pkg.Name() == name;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;   }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsInstalled.xhtml">  209</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsInstalled.xhtml">PackageIsInstalled</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;   <a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsInstalled.xhtml">PackageIsInstalled</a>(<a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache) : Cache(Cache) {}</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      assert(Cache != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      <span class="keywordflow">return</span> Pkg-&gt;CurrentVer != 0;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;   }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;};</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsObsolete.xhtml">  220</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsObsolete.xhtml">PackageIsObsolete</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      <span class="comment">// This code can be written without loops, as aptitude does, but it</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      <span class="comment">// is far less readable.</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keywordflow">if</span> (pkg.CurrentVer().end())</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;         <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      <span class="comment">// See if there is any version that exists in a repository,</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="comment">// if so return false</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> ver = pkg.VersionList(); !ver.end(); ver++)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;         <span class="keywordflow">for</span> (<span class="keyword">auto</span> file = ver.FileList(); !file.end(); file++)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;         {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keywordflow">if</span> ((file.File()-&gt;Flags &amp; <a class="code" href="structpkgCache_1_1Flag.xhtml#a434200db8c166ff0c46eb0a70158a89da7e885de522413a0f214495da90ec7bfd">pkgCache::Flag::NotSource</a>) == 0)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;               <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;         }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;   }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;};</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsUpgradable.xhtml">  244</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsUpgradable.xhtml">PackageIsUpgradable</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;{</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;   <a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsUpgradable.xhtml">PackageIsUpgradable</a>(<a class="code" href="classpkgCacheFile.xhtml">pkgCacheFile</a> *Cache) : Cache(Cache) {}</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      assert(Cache != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="keywordflow">return</span> Pkg-&gt;CurrentVer != 0 &amp;&amp; (*Cache)[Pkg].Upgradable();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;   }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;};</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsVirtual.xhtml">  255</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsVirtual.xhtml">PackageIsVirtual</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;      <span class="keywordflow">return</span> Pkg-&gt;VersionList == 0;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;   }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;};</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">  263</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1Matcher.xhtml">Matcher</a></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::GrpIterator <span class="keyword">const</span> &amp;)<span class="keyword"> override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver) <span class="keyword">override</span> = 0;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> Ver = Pkg.VersionList(); not Ver.end(); Ver++)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;         <span class="keywordflow">if</span> ((*<span class="keyword">this</span>)(Ver))</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      }</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;   }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;};</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsAllVersions.xhtml">  278</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsAllVersions.xhtml">VersionIsAllVersions</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1Matcher.xhtml">Matcher</a></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;   std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; base;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsAllVersions.xhtml">VersionIsAllVersions</a>(std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; base) : base(std::move(base)) {}</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::GrpIterator <span class="keyword">const</span> &amp;)<span class="keyword"> override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;      <span class="keywordflow">return</span> (*base)(Ver);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;   }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> Ver = Pkg.VersionList(); not Ver.end(); Ver++)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;      {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;         <span class="keywordflow">if</span> (not(*<span class="keyword">this</span>)(Ver))</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;      }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;   }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;};</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionDepends.xhtml">  298</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionDepends.xhtml">VersionDepends</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;   std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; base;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;   pkgCache::Dep::DepType type;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionDepends.xhtml">VersionDepends</a>(std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; base, pkgCache::Dep::DepType type = pkgCache::Dep::Depends) : base(std::move(base)), type(type) {}</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::GrpIterator <span class="keyword">const</span> &amp;)<span class="keyword"> override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> D = Ver.DependsList(); not D.end(); D++)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;      {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;         <span class="keywordflow">if</span> (D.IsImplicit())</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;         <span class="keywordflow">if</span> (D-&gt;Type != type)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;         <span class="keywordflow">if</span> ((*base)(D.TargetPkg()))</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;   }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;};</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1PackageReverseDepends.xhtml">  320</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageReverseDepends.xhtml">PackageReverseDepends</a> : <span class="keyword">public</span> <a class="code" href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">PackageMatcher</a></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;   std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; base;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;   pkgCache::Dep::DepType type;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1PackageReverseDepends.xhtml">PackageReverseDepends</a>(std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; base, pkgCache::Dep::DepType type = pkgCache::Dep::Depends) : base(std::move(base)), type(type) {}</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg)<span class="keyword"> override</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> D = Pkg.RevDependsList(); not D.end(); D++)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;      {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;         <span class="keywordflow">if</span> (D.IsImplicit())</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;         <span class="keywordflow">if</span> (D-&gt;Type != type)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;         <span class="keywordflow">if</span> ((*base)(D.ParentVer()))</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;   }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;};</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsAnyVersion.xhtml">  341</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsAnyVersion.xhtml">VersionIsAnyVersion</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;   std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; base;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsAnyVersion.xhtml">VersionIsAnyVersion</a>(std::unique_ptr&lt;APT::CacheFilter::Matcher&gt; base) : base(std::move(base)) {}</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;      <span class="keywordflow">return</span> (*base)(Ver);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;   }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;};</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsArchive.xhtml">  351</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsArchive.xhtml">VersionIsArchive</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;   <a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a> matcher;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsArchive.xhtml">VersionIsArchive</a>(std::string <span class="keyword">const</span> &amp;pattern) : matcher(pattern) {}</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> VF = Ver.FileList(); not VF.end(); VF++)</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;      {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;         <span class="keywordflow">if</span> (VF.File().Archive() &amp;&amp; matcher(VF.File().Archive()))</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;      }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;   }</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;};</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsOrigin.xhtml">  366</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsOrigin.xhtml">VersionIsOrigin</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;{</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;   <a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a> matcher;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsOrigin.xhtml">VersionIsOrigin</a>(std::string <span class="keyword">const</span> &amp;pattern) : matcher(pattern) {}</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> VF = Ver.FileList(); not VF.end(); VF++)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;      {</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;         <span class="keywordflow">if</span> (VF.File().Origin() &amp;&amp; matcher(VF.File().Origin()))</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;   }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;};</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSection.xhtml">  381</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSection.xhtml">VersionIsSection</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;{</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;   <a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a> matcher;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSection.xhtml">VersionIsSection</a>(std::string <span class="keyword">const</span> &amp;pattern) : matcher(pattern) {}</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;      <span class="keywordflow">return</span> matcher(Ver.Section());</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;   }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;};</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSourcePackage.xhtml">  391</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSourcePackage.xhtml">VersionIsSourcePackage</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;   <a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a> matcher;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSourcePackage.xhtml">VersionIsSourcePackage</a>(std::string <span class="keyword">const</span> &amp;pattern) : matcher(pattern) {}</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;      <span class="keywordflow">return</span> matcher(Ver.SourcePkgName());</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;   }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;};</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSourceVersion.xhtml">  401</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSourceVersion.xhtml">VersionIsSourceVersion</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;{</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;   <a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a> matcher;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSourceVersion.xhtml">VersionIsSourceVersion</a>(std::string <span class="keyword">const</span> &amp;pattern) : matcher(pattern) {}</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;      <span class="keywordflow">return</span> matcher(Ver.SourceVerStr());</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;   }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;};</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsVersion.xhtml">  411</a></span>&#160;<span class="keyword">struct </span>APT_HIDDEN <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsVersion.xhtml">VersionIsVersion</a> : <span class="keyword">public</span> <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">VersionAnyMatcher</a></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;{</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;   <a class="code" href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">BaseRegexMatcher</a> matcher;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;   <a class="code" href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsVersion.xhtml">VersionIsVersion</a>(std::string <span class="keyword">const</span> &amp;pattern) : matcher(pattern) {}</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;   <span class="keywordtype">bool</span> operator()(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver)<span class="keyword"> override</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;      <span class="keywordflow">return</span> matcher(Ver.VerStr());</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;   }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;};</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;} <span class="comment">// namespace Patterns</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;} <span class="comment">// namespace Internal</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;} <span class="comment">// namespace APT</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="acachefilter_8h_xhtml"><div class="ttname"><a href="cachefilter_8h.xhtml">cachefilter.h</a></div></div>
<div class="ttc" id="aclassAPT_1_1CacheFilter_1_1Matcher_xhtml"><div class="ttname"><a href="classAPT_1_1CacheFilter_1_1Matcher.xhtml">APT::CacheFilter::Matcher</a></div><div class="ttdef"><b>Definition:</b> cachefilter.h:23</div></div>
<div class="ttc" id="aclassAPT_1_1CacheFilter_1_1PackageMatcher_xhtml"><div class="ttname"><a href="classAPT_1_1CacheFilter_1_1PackageMatcher.xhtml">APT::CacheFilter::PackageMatcher</a></div><div class="ttdef"><b>Definition:</b> cachefilter.h:31</div></div>
<div class="ttc" id="aclassAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher_xhtml"><div class="ttname"><a href="classAPT_1_1Internal_1_1Patterns_1_1BaseRegexMatcher.xhtml">APT::Internal::Patterns::BaseRegexMatcher</a></div><div class="ttdoc">Basic helper class for matching regex.</div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:137</div></div>
<div class="ttc" id="aclassAPT_1_1StringView_xhtml"><div class="ttname"><a href="classAPT_1_1StringView.xhtml">APT::StringView</a></div><div class="ttdoc">Simple subset of std::string_view from C++17.</div><div class="ttdef"><b>Definition:</b> string_view.h:27</div></div>
<div class="ttc" id="aclasspkgCacheFile_xhtml"><div class="ttname"><a href="classpkgCacheFile.xhtml">pkgCacheFile</a></div><div class="ttdef"><b>Definition:</b> cachefile.h:33</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1PatternParser_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1PatternParser.xhtml">APT::Internal::PatternParser</a></div><div class="ttdoc">PatternParser parses the given sentence into a parse tree.</div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:124</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1PatternTreeParser_1_1Error_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Error.xhtml">APT::Internal::PatternTreeParser::Error</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:55</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1PatternTreeParser_1_1Node_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1PatternTreeParser_1_1Node.xhtml">APT::Internal::PatternTreeParser::Node</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:43</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1PatternTreeParser_1_1PatternNode_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1PatternTreeParser_1_1PatternNode.xhtml">APT::Internal::PatternTreeParser::PatternNode</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:64</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1PatternTreeParser_1_1State_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1PatternTreeParser_1_1State.xhtml">APT::Internal::PatternTreeParser::State</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:81</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1PatternTreeParser_1_1WordNode_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1PatternTreeParser_1_1WordNode.xhtml">APT::Internal::PatternTreeParser::WordNode</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:74</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1PatternTreeParser_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1PatternTreeParser.xhtml">APT::Internal::PatternTreeParser</a></div><div class="ttdoc">PatternTreeParser parses the given sentence into a parse tree.</div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:40</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageHasExactName_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageHasExactName.xhtml">APT::Internal::Patterns::PackageHasExactName</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:200</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsAutomatic_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsAutomatic.xhtml">APT::Internal::Patterns::PackageIsAutomatic</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:151</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsBroken_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsBroken.xhtml">APT::Internal::Patterns::PackageIsBroken</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:162</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsConfigFiles_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsConfigFiles.xhtml">APT::Internal::Patterns::PackageIsConfigFiles</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:174</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsEssential_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsEssential.xhtml">APT::Internal::Patterns::PackageIsEssential</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:192</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsGarbage_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsGarbage.xhtml">APT::Internal::Patterns::PackageIsGarbage</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:182</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsInstalled_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsInstalled.xhtml">APT::Internal::Patterns::PackageIsInstalled</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:210</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsObsolete_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsObsolete.xhtml">APT::Internal::Patterns::PackageIsObsolete</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:221</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsUpgradable_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsUpgradable.xhtml">APT::Internal::Patterns::PackageIsUpgradable</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:245</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageIsVirtual_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageIsVirtual.xhtml">APT::Internal::Patterns::PackageIsVirtual</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:256</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1PackageReverseDepends_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1PackageReverseDepends.xhtml">APT::Internal::Patterns::PackageReverseDepends</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:321</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionAnyMatcher.xhtml">APT::Internal::Patterns::VersionAnyMatcher</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:264</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionDepends_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionDepends.xhtml">APT::Internal::Patterns::VersionDepends</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:299</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionIsAllVersions_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsAllVersions.xhtml">APT::Internal::Patterns::VersionIsAllVersions</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:279</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionIsAnyVersion_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsAnyVersion.xhtml">APT::Internal::Patterns::VersionIsAnyVersion</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:342</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionIsArchive_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsArchive.xhtml">APT::Internal::Patterns::VersionIsArchive</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:352</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionIsOrigin_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsOrigin.xhtml">APT::Internal::Patterns::VersionIsOrigin</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:367</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionIsSection_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSection.xhtml">APT::Internal::Patterns::VersionIsSection</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:382</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionIsSourcePackage_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSourcePackage.xhtml">APT::Internal::Patterns::VersionIsSourcePackage</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:392</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionIsSourceVersion_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsSourceVersion.xhtml">APT::Internal::Patterns::VersionIsSourceVersion</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:402</div></div>
<div class="ttc" id="astructAPT_1_1Internal_1_1Patterns_1_1VersionIsVersion_xhtml"><div class="ttname"><a href="structAPT_1_1Internal_1_1Patterns_1_1VersionIsVersion.xhtml">APT::Internal::Patterns::VersionIsVersion</a></div><div class="ttdef"><b>Definition:</b> cachefilter-patterns.h:412</div></div>
<div class="ttc" id="astructpkgCache_1_1Flag_xhtml_a434200db8c166ff0c46eb0a70158a89da7e885de522413a0f214495da90ec7bfd"><div class="ttname"><a href="structpkgCache_1_1Flag.xhtml#a434200db8c166ff0c46eb0a70158a89da7e885de522413a0f214495da90ec7bfd">pkgCache::Flag::NotSource</a></div><div class="ttdeci">@ NotSource</div><div class="ttdef"><b>Definition:</b> pkgcache.h:197</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
