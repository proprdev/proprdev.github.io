<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/indexfile.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">indexfile.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Index File - Abstraction for an index of archive/source file.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   There are 4 primary sorts of index files, all represented by this </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   class:</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   Binary index files </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   Binary translation files </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   Binary index files describing the local system</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   Source index files</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">   They are all bundled together here, and the interfaces for </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   sources.list, acquire, cache gen and record parsing all use this class</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   to access the underlying representation.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef PKGLIB_INDEXFILE_H</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define PKGLIB_INDEXFILE_H</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="pkgcache_8h.xhtml">apt-pkg/pkgcache.h</a>&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/pkgrecords.h&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/srcrecords.h&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a>;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span><a class="code" href="classOpProgress.xhtml">OpProgress</a>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classIndexTarget.xhtml">   37</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classIndexTarget.xhtml">IndexTarget</a>                                                    <span class="comment">/*{{{*/</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classIndexTarget.xhtml#aaf8eea5037c53d12d3f31ab9e032712c">   42</a></span>&#160;   std::string <a class="code" href="classIndexTarget.xhtml#aaf8eea5037c53d12d3f31ab9e032712c">URI</a>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classIndexTarget.xhtml#a72a1a381861908396ddca53a1fa28f97">   45</a></span>&#160;   std::string <a class="code" href="classIndexTarget.xhtml#a72a1a381861908396ddca53a1fa28f97">Description</a>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classIndexTarget.xhtml#a9248dc77e748314774ae2c9b1618e6a9">   48</a></span>&#160;   std::string <a class="code" href="classIndexTarget.xhtml#a9248dc77e748314774ae2c9b1618e6a9">ShortDesc</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classIndexTarget.xhtml#ac440ac0ee12cd359222c7fed14141811">   52</a></span>&#160;   std::string <a class="code" href="classIndexTarget.xhtml#ac440ac0ee12cd359222c7fed14141811">MetaKey</a>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classIndexTarget.xhtml#a2b4fd5d72b64352ddc4c2d2670c3359b">   55</a></span>&#160;   <span class="keywordtype">bool</span> <a class="code" href="classIndexTarget.xhtml#a2b4fd5d72b64352ddc4c2d2670c3359b">IsOptional</a>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classIndexTarget.xhtml#a6f85944ab4004ae5371b34661e18306e">   58</a></span>&#160;   <span class="keywordtype">bool</span> <a class="code" href="classIndexTarget.xhtml#a6f85944ab4004ae5371b34661e18306e">KeepCompressed</a>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classIndexTarget.xhtml#aa3a841efcdba1c5b4f6895a7b50dcfac">   63</a></span>&#160;   std::map&lt;std::string, std::string&gt; <a class="code" href="classIndexTarget.xhtml#aa3a841efcdba1c5b4f6895a7b50dcfac">Options</a>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;   <a class="code" href="classIndexTarget.xhtml">IndexTarget</a>(std::string <span class="keyword">const</span> &amp;MetaKey, std::string <span class="keyword">const</span> &amp;ShortDesc,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;         std::string <span class="keyword">const</span> &amp;LongDesc, std::string <span class="keyword">const</span> &amp;<a class="code" href="classURI.xhtml">URI</a>, <span class="keywordtype">bool</span> <span class="keyword">const</span> IsOptional,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;         <span class="keywordtype">bool</span> <span class="keyword">const</span> KeepCompressed, std::map&lt;std::string, std::string&gt; <span class="keyword">const</span> &amp;Options);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;   <span class="keyword">enum</span> OptionKeys</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;   {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      SITE,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      RELEASE,</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      COMPONENT,</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      LANGUAGE,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      ARCHITECTURE,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      BASE_URI,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      REPO_URI,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      CREATED_BY,</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      TARGET_OF,</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      FILENAME,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      EXISTING_FILENAME,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      PDIFFS,</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      COMPRESSIONTYPES,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      DEFAULTENABLED,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      SOURCESENTRY,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      BY_HASH,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      KEEPCOMPRESSEDAS,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      FALLBACK_OF,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      IDENTIFIER,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      ALLOW_INSECURE,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      ALLOW_WEAK,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      ALLOW_DOWNGRADE_TO_INSECURE,</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      INRELEASE_PATH,</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   };</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;   std::string Option(OptionKeys <span class="keyword">const</span> Key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   <span class="keywordtype">bool</span> OptionBool(OptionKeys <span class="keyword">const</span> Key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;   std::string Format(std::string format) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;};</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classpkgIndexFile.xhtml">  101</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgIndexFile.xhtml">pkgIndexFile</a></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;   <span class="keywordtype">void</span> * <span class="keyword">const</span> d;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;   <span class="keywordtype">bool</span> Trusted;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classpkgIndexFile_1_1Type.xhtml">  109</a></span>&#160;   <span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgIndexFile_1_1Type.xhtml">Type</a></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;   {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      <span class="comment">// Global list of Items supported</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      <span class="keyword">static</span> <a class="code" href="classpkgIndexFile_1_1Type.xhtml">Type</a> **GlobalList;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GlobalListLen;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <span class="keyword">static</span> <a class="code" href="classpkgIndexFile_1_1Type.xhtml">Type</a> *GetType(<span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> <a class="code" href="classpkgIndexFile_1_1Type.xhtml">Type</a>) APT_PURE;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span> *Label;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="keyword">virtual</span> pkgRecords::Parser *CreatePkgParser(pkgCache::PkgFileIterator <span class="keyword">const</span> &amp;<span class="comment">/*File*/</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> 0;};</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      <span class="keyword">virtual</span> <a class="code" href="classpkgSrcRecords_1_1Parser.xhtml">pkgSrcRecords::Parser</a> *CreateSrcPkgParser(std::string <span class="keyword">const</span> &amp;<span class="comment">/*File*/</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> 0;};</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <a class="code" href="classpkgIndexFile_1_1Type.xhtml">Type</a>();</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="keyword">virtual</span> ~<a class="code" href="classpkgIndexFile_1_1Type.xhtml">Type</a>() {};</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;   };</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;   <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classpkgIndexFile_1_1Type.xhtml">Type</a> *GetType() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;   </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;   <span class="comment">// Return descriptive strings of various sorts</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;   <span class="keyword">virtual</span> std::string ArchiveInfo(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;   <span class="keyword">virtual</span> std::string SourceInfo(<a class="code" href="classpkgSrcRecords_1_1Parser.xhtml">pkgSrcRecords::Parser</a> <span class="keyword">const</span> &amp;Record,</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                             <a class="code" href="structpkgSrcRecords_1_1File.xhtml">pkgSrcRecords::File</a> <span class="keyword">const</span> &amp;File) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;   <span class="keyword">virtual</span> std::string Describe(<span class="keywordtype">bool</span> <span class="keyword">const</span> Short = <span class="keyword">false</span>) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;   <span class="comment">// Interface for acquire</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;   <span class="keyword">virtual</span> std::string ArchiveURI(std::string <span class="keyword">const</span> &amp;<span class="comment">/*File*/</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;   <span class="comment">// Interface for the record parsers</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;   <span class="keyword">virtual</span> <a class="code" href="classpkgSrcRecords_1_1Parser.xhtml">pkgSrcRecords::Parser</a> *CreateSrcParser()<span class="keyword"> const </span>{<span class="keywordflow">return</span> 0;};</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;   </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;   <span class="comment">// Interface for the Cache Generator</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Exists() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> HasPackages() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Size() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Merge(<a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a> &amp;<span class="comment">/*Gen*/</span>, <a class="code" href="classOpProgress.xhtml">OpProgress</a>* <span class="keyword">const</span> <span class="comment">/*Prog*/</span>) { <span class="keywordflow">return</span> <span class="keyword">true</span>; };</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;   <span class="keyword">virtual</span> pkgCache::PkgFileIterator FindInCache(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Cache) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;   <span class="keywordtype">bool</span> IsTrusted()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Trusted; };</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="classpkgIndexFile.xhtml">pkgIndexFile</a>(<span class="keywordtype">bool</span> <span class="keyword">const</span> Trusted);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classpkgIndexFile.xhtml">pkgIndexFile</a>();</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;};</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classpkgDebianIndexFile.xhtml">  153</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgDebianIndexFile.xhtml">pkgDebianIndexFile</a> : <span class="keyword">public</span> <a class="code" href="classpkgIndexFile.xhtml">pkgIndexFile</a></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;   <span class="keyword">virtual</span> std::string IndexFileName() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;   <span class="keyword">virtual</span> std::string GetComponent() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;   <span class="keyword">virtual</span> std::string GetArchitecture() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;   <span class="keyword">virtual</span> std::string GetProgressDescription() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;   <span class="keyword">virtual</span> uint8_t GetIndexFlags() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OpenListFile(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Pkg, std::string <span class="keyword">const</span> &amp;FileName) = 0;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;   APT_HIDDEN <span class="keyword">virtual</span> <a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a> * CreateListParser(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Pkg);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Merge(<a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a> &amp;Gen, <a class="code" href="classOpProgress.xhtml">OpProgress</a>* <span class="keyword">const</span> Prog) APT_OVERRIDE;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;   <span class="keyword">virtual</span> pkgCache::PkgFileIterator FindInCache(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Cache) <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="classpkgDebianIndexFile.xhtml">pkgDebianIndexFile</a>(<span class="keywordtype">bool</span> <span class="keyword">const</span> Trusted);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classpkgDebianIndexFile.xhtml">pkgDebianIndexFile</a>();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;};</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classpkgDebianIndexTargetFile.xhtml">  172</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgDebianIndexTargetFile.xhtml">pkgDebianIndexTargetFile</a> : <span class="keyword">public</span> <a class="code" href="classpkgDebianIndexFile.xhtml">pkgDebianIndexFile</a></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;   <span class="keywordtype">void</span> * <span class="keyword">const</span> d;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;   <a class="code" href="classIndexTarget.xhtml">IndexTarget</a> <span class="keyword">const</span> Target;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;   <span class="keyword">virtual</span> std::string IndexFileName() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;   <span class="keyword">virtual</span> std::string GetComponent() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;   <span class="keyword">virtual</span> std::string GetArchitecture() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;   <span class="keyword">virtual</span> std::string GetProgressDescription() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OpenListFile(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Pkg, std::string <span class="keyword">const</span> &amp;FileName) APT_OVERRIDE;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;   <span class="keyword">virtual</span> std::string ArchiveURI(std::string <span class="keyword">const</span> &amp;File) <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;   <span class="keyword">virtual</span> std::string Describe(<span class="keywordtype">bool</span> <span class="keyword">const</span> Short = <span class="keyword">false</span>) <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Exists() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Size() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;   <a class="code" href="classIndexTarget.xhtml">IndexTarget</a> GetIndexTarget() <span class="keyword">const</span> APT_HIDDEN;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;   <a class="code" href="classpkgDebianIndexTargetFile.xhtml">pkgDebianIndexTargetFile</a>(<a class="code" href="classIndexTarget.xhtml">IndexTarget</a> <span class="keyword">const</span> &amp;Target, <span class="keywordtype">bool</span> <span class="keyword">const</span> Trusted);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classpkgDebianIndexTargetFile.xhtml">pkgDebianIndexTargetFile</a>();</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;};</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classpkgDebianIndexRealFile.xhtml">  195</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgDebianIndexRealFile.xhtml">pkgDebianIndexRealFile</a> : <span class="keyword">public</span> <a class="code" href="classpkgDebianIndexFile.xhtml">pkgDebianIndexFile</a></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;   <span class="keywordtype">void</span> * <span class="keyword">const</span> d;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;   std::string File;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;   <span class="keyword">virtual</span> std::string IndexFileName() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;   <span class="keyword">virtual</span> std::string GetProgressDescription() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OpenListFile(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Pkg, std::string <span class="keyword">const</span> &amp;FileName) APT_OVERRIDE;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;   <span class="keyword">virtual</span> std::string Describe(<span class="keywordtype">bool</span> <span class="keyword">const</span> <span class="comment">/*Short*/</span> = <span class="keyword">false</span>) <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Exists() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Size() <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;   <span class="keyword">virtual</span> std::string ArchiveURI(std::string <span class="keyword">const</span> &amp;<span class="comment">/*File*/</span>) <span class="keyword">const</span> APT_OVERRIDE;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;   <a class="code" href="classpkgDebianIndexRealFile.xhtml">pkgDebianIndexRealFile</a>(std::string <span class="keyword">const</span> &amp;File, <span class="keywordtype">bool</span> <span class="keyword">const</span> Trusted);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classpkgDebianIndexRealFile.xhtml">pkgDebianIndexRealFile</a>();</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;};</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassFileFd_xhtml"><div class="ttname"><a href="classFileFd.xhtml">FileFd</a></div><div class="ttdef"><b>Definition:</b> fileutl.h:39</div></div>
<div class="ttc" id="aclassIndexTarget_xhtml"><div class="ttname"><a href="classIndexTarget.xhtml">IndexTarget</a></div><div class="ttdoc">Information about an index file.</div><div class="ttdef"><b>Definition:</b> indexfile.h:39</div></div>
<div class="ttc" id="aclassIndexTarget_xhtml_a2b4fd5d72b64352ddc4c2d2670c3359b"><div class="ttname"><a href="classIndexTarget.xhtml#a2b4fd5d72b64352ddc4c2d2670c3359b">IndexTarget::IsOptional</a></div><div class="ttdeci">bool IsOptional</div><div class="ttdoc">Is it okay if the file isn't found in the meta index.</div><div class="ttdef"><b>Definition:</b> indexfile.h:55</div></div>
<div class="ttc" id="aclassIndexTarget_xhtml_a6f85944ab4004ae5371b34661e18306e"><div class="ttname"><a href="classIndexTarget.xhtml#a6f85944ab4004ae5371b34661e18306e">IndexTarget::KeepCompressed</a></div><div class="ttdeci">bool KeepCompressed</div><div class="ttdoc">If the file is downloaded compressed, do not unpack it.</div><div class="ttdef"><b>Definition:</b> indexfile.h:58</div></div>
<div class="ttc" id="aclassIndexTarget_xhtml_a72a1a381861908396ddca53a1fa28f97"><div class="ttname"><a href="classIndexTarget.xhtml#a72a1a381861908396ddca53a1fa28f97">IndexTarget::Description</a></div><div class="ttdeci">std::string Description</div><div class="ttdoc">A description of the index file.</div><div class="ttdef"><b>Definition:</b> indexfile.h:45</div></div>
<div class="ttc" id="aclassIndexTarget_xhtml_a9248dc77e748314774ae2c9b1618e6a9"><div class="ttname"><a href="classIndexTarget.xhtml#a9248dc77e748314774ae2c9b1618e6a9">IndexTarget::ShortDesc</a></div><div class="ttdeci">std::string ShortDesc</div><div class="ttdoc">A shorter description of the index file.</div><div class="ttdef"><b>Definition:</b> indexfile.h:48</div></div>
<div class="ttc" id="aclassIndexTarget_xhtml_aa3a841efcdba1c5b4f6895a7b50dcfac"><div class="ttname"><a href="classIndexTarget.xhtml#aa3a841efcdba1c5b4f6895a7b50dcfac">IndexTarget::Options</a></div><div class="ttdeci">std::map&lt; std::string, std::string &gt; Options</div><div class="ttdoc">options with which this target was created Prefer the usage of #Option if at all possible....</div><div class="ttdef"><b>Definition:</b> indexfile.h:63</div></div>
<div class="ttc" id="aclassIndexTarget_xhtml_aaf8eea5037c53d12d3f31ab9e032712c"><div class="ttname"><a href="classIndexTarget.xhtml#aaf8eea5037c53d12d3f31ab9e032712c">IndexTarget::URI</a></div><div class="ttdeci">std::string URI</div><div class="ttdoc">A URI from which the index file can be downloaded.</div><div class="ttdef"><b>Definition:</b> indexfile.h:42</div></div>
<div class="ttc" id="aclassIndexTarget_xhtml_ac440ac0ee12cd359222c7fed14141811"><div class="ttname"><a href="classIndexTarget.xhtml#ac440ac0ee12cd359222c7fed14141811">IndexTarget::MetaKey</a></div><div class="ttdeci">std::string MetaKey</div><div class="ttdoc">The key by which this index file should be looked up within the meta index file.</div><div class="ttdef"><b>Definition:</b> indexfile.h:52</div></div>
<div class="ttc" id="aclassOpProgress_xhtml"><div class="ttname"><a href="classOpProgress.xhtml">OpProgress</a></div><div class="ttdef"><b>Definition:</b> progress.h:30</div></div>
<div class="ttc" id="aclassURI_xhtml"><div class="ttname"><a href="classURI.xhtml">URI</a></div><div class="ttdef"><b>Definition:</b> strutl.h:193</div></div>
<div class="ttc" id="aclasspkgCacheGenerator_xhtml"><div class="ttname"><a href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a></div><div class="ttdef"><b>Definition:</b> pkgcachegen.h:43</div></div>
<div class="ttc" id="aclasspkgCacheListParser_xhtml"><div class="ttname"><a href="classpkgCacheListParser.xhtml">pkgCacheListParser</a></div><div class="ttdef"><b>Definition:</b> pkgcachegen.h:172</div></div>
<div class="ttc" id="aclasspkgCache_xhtml"><div class="ttname"><a href="classpkgCache.xhtml">pkgCache</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:48</div></div>
<div class="ttc" id="aclasspkgDebianIndexFile_xhtml"><div class="ttname"><a href="classpkgDebianIndexFile.xhtml">pkgDebianIndexFile</a></div><div class="ttdef"><b>Definition:</b> indexfile.h:154</div></div>
<div class="ttc" id="aclasspkgDebianIndexRealFile_xhtml"><div class="ttname"><a href="classpkgDebianIndexRealFile.xhtml">pkgDebianIndexRealFile</a></div><div class="ttdef"><b>Definition:</b> indexfile.h:196</div></div>
<div class="ttc" id="aclasspkgDebianIndexTargetFile_xhtml"><div class="ttname"><a href="classpkgDebianIndexTargetFile.xhtml">pkgDebianIndexTargetFile</a></div><div class="ttdef"><b>Definition:</b> indexfile.h:173</div></div>
<div class="ttc" id="aclasspkgIndexFile_1_1Type_xhtml"><div class="ttname"><a href="classpkgIndexFile_1_1Type.xhtml">pkgIndexFile::Type</a></div><div class="ttdef"><b>Definition:</b> indexfile.h:110</div></div>
<div class="ttc" id="aclasspkgIndexFile_xhtml"><div class="ttname"><a href="classpkgIndexFile.xhtml">pkgIndexFile</a></div><div class="ttdef"><b>Definition:</b> indexfile.h:102</div></div>
<div class="ttc" id="aclasspkgSrcRecords_1_1Parser_xhtml"><div class="ttname"><a href="classpkgSrcRecords_1_1Parser.xhtml">pkgSrcRecords::Parser</a></div><div class="ttdef"><b>Definition:</b> srcrecords.h:39</div></div>
<div class="ttc" id="apkgcache_8h_xhtml"><div class="ttname"><a href="pkgcache_8h.xhtml">pkgcache.h</a></div><div class="ttdoc">pkgCache - Structure definitions for the cache file</div></div>
<div class="ttc" id="astructpkgSrcRecords_1_1File_xhtml"><div class="ttname"><a href="structpkgSrcRecords_1_1File.xhtml">pkgSrcRecords::File</a></div><div class="ttdef"><b>Definition:</b> srcrecords.h:30</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
