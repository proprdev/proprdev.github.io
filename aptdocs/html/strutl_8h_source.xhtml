<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/contrib/strutl.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_c6ef23f15b074dcedf6810e24f2a7676.xhtml">contrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">strutl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   String Util - These are some useful string functions</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   _strstrip is a function to remove whitespace from the front and end</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   of a string.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   This source is placed in the Public Domain, do with it what you will</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   It was originally written by Jason Gunthorpe &lt;jgg@gpu.srv.ualberta.ca&gt;   </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#ifndef STRUTL_H</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#define STRUTL_H</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/string_view.h&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;stddef.h&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;time.h&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;macros.h&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>APT {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;   <span class="keyword">namespace </span>String {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      APT_PUBLIC std::string Strip(<span class="keyword">const</span> std::string &amp;s);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      APT_PUBLIC <span class="keywordtype">bool</span> Endswith(<span class="keyword">const</span> std::string &amp;s, <span class="keyword">const</span> std::string &amp;ending);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;      APT_PUBLIC <span class="keywordtype">bool</span> Startswith(<span class="keyword">const</span> std::string &amp;s, <span class="keyword">const</span> std::string &amp;starting);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      APT_PUBLIC std::string Join(std::vector&lt;std::string&gt; list, <span class="keyword">const</span> std::string &amp;sep);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;      <span class="comment">// Returns string display length honoring multi-byte characters</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      APT_PUBLIC <span class="keywordtype">size_t</span> DisplayLength(StringView str);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;   }</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> UTF8ToCodeset(<span class="keyword">const</span> <span class="keywordtype">char</span> *codeset, <span class="keyword">const</span> std::string &amp;orig, std::string *dest);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;APT_PUBLIC <span class="keywordtype">char</span> *_strstrip(<span class="keywordtype">char</span> *String);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;APT_PUBLIC <span class="keywordtype">char</span> *_strrstrip(<span class="keywordtype">char</span> *String); <span class="comment">// right strip only</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Use SubstVar to avoid memory headaches&quot;</span>) APT_PUBLIC <span class="keywordtype">char</span> *_strtabexpand(<span class="keywordtype">char</span> *String,<span class="keywordtype">size_t</span> Len);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> ParseQuoteWord(const <span class="keywordtype">char</span> *&amp;String,std::<span class="keywordtype">string</span> &amp;Res);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> ParseCWord(const <span class="keywordtype">char</span> *&amp;String,std::<span class="keywordtype">string</span> &amp;Res);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> QuoteString(const std::<span class="keywordtype">string</span> &amp;Str,const <span class="keywordtype">char</span> *Bad);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> DeQuoteString(const std::<span class="keywordtype">string</span> &amp;Str);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> DeQuoteString(std::<span class="keywordtype">string</span>::const_iterator const &amp;begin, std::<span class="keywordtype">string</span>::const_iterator const &amp;end);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">// unescape (\0XX and \xXX) from a string</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> DeEscapeString(const std::<span class="keywordtype">string</span> &amp;input);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> SizeToStr(<span class="keywordtype">double</span> Bytes);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> TimeToStr(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Sec);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> Base64Encode(const std::<span class="keywordtype">string</span> &amp;Str);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> OutputInDepth(const <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Depth, const <span class="keywordtype">char</span>* Separator=&quot;  &quot;);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> URItoFileName(const std::<span class="keywordtype">string</span> &amp;<a class="code" href="classURI.xhtml">URI</a>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> TimeRFC1123(time_t Date, <span class="keywordtype">bool</span> const NumericTimezone);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> RFC1123StrToTime(const std::<span class="keywordtype">string</span> &amp;str,time_t &amp;time) APT_MUSTCHECK;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> FTPMDTMStrToTime(const <span class="keywordtype">char</span>* const str,time_t &amp;time) APT_MUSTCHECK;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;APT_PUBLIC std::<span class="keywordtype">string</span> LookupTag(const std::<span class="keywordtype">string</span> &amp;Message,const <span class="keywordtype">char</span> *Tag,const <span class="keywordtype">char</span> *Default = 0);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;APT_PUBLIC <span class="keywordtype">int</span> StringToBool(const std::<span class="keywordtype">string</span> &amp;Text,<span class="keywordtype">int</span> Default = -1);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> ReadMessages(<span class="keywordtype">int</span> Fd, std::vector&lt;std::<span class="keywordtype">string</span>&gt; &amp;List);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> StrToNum(const <span class="keywordtype">char</span> *Str,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;Res,<span class="keywordtype">unsigned</span> Len,<span class="keywordtype">unsigned</span> Base = 0);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> StrToNum(const <span class="keywordtype">char</span> *Str,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> &amp;Res,<span class="keywordtype">unsigned</span> Len,<span class="keywordtype">unsigned</span> Base = 0);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> Base256ToNum(const <span class="keywordtype">char</span> *Str,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;Res,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Len);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> Base256ToNum(const <span class="keywordtype">char</span> *Str,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> &amp;Res,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Len);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> Hex2Num(const APT::StringView Str,<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *Num,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Length);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">// input changing string split</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> TokSplitString(<span class="keywordtype">char</span> Tok,<span class="keywordtype">char</span> *Input,<span class="keywordtype">char</span> **List,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ListMax);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">// split a given string by a char</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;APT_PUBLIC std::vector&lt;std::<span class="keywordtype">string</span>&gt; VectorizeString(std::<span class="keywordtype">string</span> const &amp;haystack, <span class="keywordtype">char</span> const &amp;split) APT_PURE;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/* \brief Return a vector of strings from string &quot;input&quot; where &quot;sep&quot;</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> * is used as the delimiter string.</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * \param input The input string.</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * \param sep The separator to use.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"> * \param maxsplit (optional) The maximum amount of splitting that</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"> * should be done .</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"> * </span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"> * The optional &quot;maxsplit&quot; argument can be used to limit the splitting,</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> * if used the string is only split on maxsplit places and the last</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * item in the vector contains the remainder string.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;APT_PUBLIC std::vector&lt;std::<span class="keywordtype">string</span>&gt; StringSplit(std::<span class="keywordtype">string</span> const &amp;input,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                     std::<span class="keywordtype">string</span> const &amp;sep, </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxsplit=std::numeric_limits&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;::max()) APT_PURE;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;APT_HIDDEN <span class="keywordtype">bool</span> iovprintf(std::ostream &amp;out, const <span class="keywordtype">char</span> *format, va_list &amp;args, ssize_t &amp;size);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;APT_PUBLIC <span class="keywordtype">void</span> ioprintf(std::ostream &amp;out,const <span class="keywordtype">char</span> *format,...) APT_PRINTF(2);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;APT_PUBLIC <span class="keywordtype">void</span> strprintf(std::<span class="keywordtype">string</span> &amp;out,const <span class="keywordtype">char</span> *format,...) APT_PRINTF(2);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;APT_PUBLIC <span class="keywordtype">char</span> *safe_snprintf(<span class="keywordtype">char</span> *Buffer,<span class="keywordtype">char</span> *End,const <span class="keywordtype">char</span> *Format,...) APT_PRINTF(3);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> CheckDomainList(const std::<span class="keywordtype">string</span> &amp;Host, const std::<span class="keywordtype">string</span> &amp;List);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">/* Do some compat mumbo jumbo */</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#define tolower_ascii  tolower_ascii_inline</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">#define isspace_ascii  isspace_ascii_inline</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;APT_PURE APT_HOT</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> tolower_ascii_unsafe(<span class="keywordtype">int</span> <span class="keyword">const</span> c)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;   <span class="keywordflow">return</span> c | 0x20;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;APT_PURE APT_HOT</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> tolower_ascii_inline(<span class="keywordtype">int</span> <span class="keyword">const</span> c)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;   <span class="keywordflow">return</span> (c &gt;= <span class="charliteral">&#39;A&#39;</span> &amp;&amp; c &lt;= <span class="charliteral">&#39;Z&#39;</span>) ? c + 32 : c;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;APT_PURE APT_HOT</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> isspace_ascii_inline(<span class="keywordtype">int</span> <span class="keyword">const</span> c)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;   <span class="comment">// 9=&#39;\t&#39;,10=&#39;\n&#39;,11=&#39;\v&#39;,12=&#39;\f&#39;,13=&#39;\r&#39;,32=&#39; &#39;</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;   <span class="keywordflow">return</span> (c &gt;= 9 &amp;&amp; c &lt;= 13) || c == <span class="charliteral">&#39; &#39;</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;APT_PUBLIC std::string StripEpoch(<span class="keyword">const</span> std::string &amp;VerStr);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">#define APT_MKSTRCMP(name,func) \</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">inline APT_PURE int name(const char *A,const char *B) {return func(A,A+strlen(A),B,B+strlen(B));} \</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">inline APT_PURE int name(const char *A,const char *AEnd,const char *B) {return func(A,AEnd,B,B+strlen(B));} \</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">inline APT_PURE int name(const std::string&amp; A,const char *B) {return func(A.c_str(),A.c_str()+A.length(),B,B+strlen(B));} \</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">inline APT_PURE int name(const std::string&amp; A,const std::string&amp; B) {return func(A.c_str(),A.c_str()+A.length(),B.c_str(),B.c_str()+B.length());} \</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">inline APT_PURE int name(const std::string&amp; A,const char *B,const char *BEnd) {return func(A.c_str(),A.c_str()+A.length(),B,BEnd);}</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#define APT_MKSTRCMP2(name,func) \</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">inline APT_PURE int name(const char *A,const char *AEnd,const char *B) {return func(A,AEnd,B,B+strlen(B));} \</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">inline APT_PURE int name(const std::string&amp; A,const char *B) {return func(A.begin(),A.end(),B,B+strlen(B));} \</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">inline APT_PURE int name(const std::string&amp; A,const std::string&amp; B) {return func(A.begin(),A.end(),B.begin(),B.end());} \</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">inline APT_PURE int name(const std::string&amp; A,const char *B,const char *BEnd) {return func(A.begin(),A.end(),B,BEnd);}</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;APT_PUBLIC <span class="keywordtype">int</span> APT_PURE stringcmp(<span class="keyword">const</span> <span class="keywordtype">char</span> *A,<span class="keyword">const</span> <span class="keywordtype">char</span> *AEnd,<span class="keyword">const</span> <span class="keywordtype">char</span> *B,<span class="keyword">const</span> <span class="keywordtype">char</span> *BEnd);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;APT_PUBLIC <span class="keywordtype">int</span> APT_PURE stringcasecmp(<span class="keyword">const</span> <span class="keywordtype">char</span> *A,<span class="keyword">const</span> <span class="keywordtype">char</span> *AEnd,<span class="keyword">const</span> <span class="keywordtype">char</span> *B,<span class="keyword">const</span> <span class="keywordtype">char</span> *BEnd);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">/* We assume that GCC 3 indicates that libstdc++3 is in use too. In that</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">   case the definition of string::const_iterator is not the same as</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">   const char * and we need these extra functions */</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#if __GNUC__ &gt;= 3</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;APT_PUBLIC <span class="keywordtype">int</span> APT_PURE stringcmp(std::string::const_iterator A,std::string::const_iterator AEnd,</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;              <span class="keyword">const</span> <span class="keywordtype">char</span> *B,<span class="keyword">const</span> <span class="keywordtype">char</span> *BEnd);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;APT_PUBLIC <span class="keywordtype">int</span> APT_PURE stringcmp(std::string::const_iterator A,std::string::const_iterator AEnd,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;              std::string::const_iterator B,std::string::const_iterator BEnd);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;APT_PUBLIC <span class="keywordtype">int</span> APT_PURE stringcasecmp(std::string::const_iterator A,std::string::const_iterator AEnd,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">char</span> *B,<span class="keyword">const</span> <span class="keywordtype">char</span> *BEnd);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;APT_PUBLIC <span class="keywordtype">int</span> APT_PURE stringcasecmp(std::string::const_iterator A,std::string::const_iterator AEnd,</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                  std::string::const_iterator B,std::string::const_iterator BEnd);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">inline</span> APT_PURE <span class="keywordtype">int</span> stringcmp(std::string::const_iterator A,std::string::const_iterator Aend,<span class="keyword">const</span> <span class="keywordtype">char</span> *B) {<span class="keywordflow">return</span> stringcmp(A,Aend,B,B+strlen(B));}</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">inline</span> APT_PURE <span class="keywordtype">int</span> stringcasecmp(std::string::const_iterator A,std::string::const_iterator Aend,<span class="keyword">const</span> <span class="keywordtype">char</span> *B) {<span class="keywordflow">return</span> stringcasecmp(A,Aend,B,B+strlen(B));}</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;APT_MKSTRCMP2(stringcmp,stringcmp)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;APT_MKSTRCMP2(stringcasecmp,stringcasecmp)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">// Return the length of a NULL-terminated string array</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;APT_PUBLIC <span class="keywordtype">size_t</span> APT_PURE strv_length(<span class="keyword">const</span> <span class="keywordtype">char</span> **str_array);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *DeNull(<span class="keyword">const</span> <span class="keywordtype">char</span> *s) {<span class="keywordflow">return</span> (s == 0?<span class="stringliteral">&quot;(null)&quot;</span>:s);}</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classURI.xhtml">  192</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classURI.xhtml">URI</a></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;   <span class="keywordtype">void</span> CopyFrom(<span class="keyword">const</span> std::string &amp;From);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;   std::string Access;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;   std::string User;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;   std::string Password;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;   std::string Host;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;   std::string Path;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Port;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;   </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;   <span class="keyword">operator</span> std::string();</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> operator =(<span class="keyword">const</span> std::string &amp;From) {CopyFrom(From);}</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> empty() {<span class="keywordflow">return</span> Access.empty();};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;   <span class="keyword">static</span> std::string SiteOnly(<span class="keyword">const</span> std::string &amp;<a class="code" href="classURI.xhtml">URI</a>);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;   <span class="keyword">static</span> std::string ArchiveOnly(<span class="keyword">const</span> std::string &amp;<a class="code" href="classURI.xhtml">URI</a>);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;   <span class="keyword">static</span> std::string NoUserPassword(<span class="keyword">const</span> std::string &amp;<a class="code" href="classURI.xhtml">URI</a>);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="classURI.xhtml">URI</a>(std::string Path) { CopyFrom(Path); }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;   <a class="code" href="classURI.xhtml">URI</a>() : Port(0) {}</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;};</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="structSubstVar.xhtml">  216</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structSubstVar.xhtml">SubstVar</a></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;   <span class="keyword">const</span> <span class="keywordtype">char</span> *Subst;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;   <span class="keyword">const</span> std::string *Contents;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;};</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;APT_PUBLIC std::string <a class="code" href="structSubstVar.xhtml">SubstVar</a>(std::string Str,<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structSubstVar.xhtml">SubstVar</a> *Vars);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;APT_PUBLIC std::string <a class="code" href="structSubstVar.xhtml">SubstVar</a>(<span class="keyword">const</span> std::string &amp;Str,<span class="keyword">const</span> std::string &amp;Subst,<span class="keyword">const</span> std::string &amp;Contents);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="structRxChoiceList.xhtml">  224</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structRxChoiceList.xhtml">RxChoiceList</a></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;   <span class="keywordtype">void</span> *UserData;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;   <span class="keyword">const</span> <span class="keywordtype">char</span> *Str;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;   <span class="keywordtype">bool</span> Hit;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;};</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;APT_PUBLIC <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> RegexChoice(<a class="code" href="structRxChoiceList.xhtml">RxChoiceList</a> *Rxs,<span class="keyword">const</span> <span class="keywordtype">char</span> **ListBegin,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                      <span class="keyword">const</span> <span class="keywordtype">char</span> **ListEnd);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassURI_xhtml"><div class="ttname"><a href="classURI.xhtml">URI</a></div><div class="ttdef"><b>Definition:</b> strutl.h:193</div></div>
<div class="ttc" id="astructRxChoiceList_xhtml"><div class="ttname"><a href="structRxChoiceList.xhtml">RxChoiceList</a></div><div class="ttdef"><b>Definition:</b> strutl.h:225</div></div>
<div class="ttc" id="astructSubstVar_xhtml"><div class="ttname"><a href="structSubstVar.xhtml">SubstVar</a></div><div class="ttdef"><b>Definition:</b> strutl.h:217</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
