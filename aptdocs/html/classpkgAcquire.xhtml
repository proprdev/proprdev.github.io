<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: pkgAcquire Struct Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-types">Protected Types</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classpkgAcquire-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">pkgAcquire Struct Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__acquire.xhtml">Acquire system                                        {{{</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Represents the process by which a <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> object should retrieve a file or a collection of files.  
 <a href="classpkgAcquire.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="acquire-item_8h_source.xhtml">apt-pkg/acquire-item.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for pkgAcquire:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classpkgAcquire__inherit__graph.svg" width="382" height="291"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for pkgAcquire:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classpkgAcquire__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A single item placed in this queue.  <a href="structpkgAcquire_1_1QItem.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:abd4abbf0fe1f8b5299675b590315b4b9"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9">ItemState</a> { <br />
&#160;&#160;<a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9aafe4203baf90d29ba26cdca204795329">StatIdle</a>
, <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9a2438768d0d80b2bcbf37ffa6bae5d445">StatFetching</a>
, <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9a875850b5de48d7a0ae71c47fbbef4832">StatDone</a>
, <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9a8523989e15c68262bb5469f61fbe72ba">StatError</a>
, <br />
&#160;&#160;<a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9a19728efb594f55c57218604ad77b25db">StatAuthError</a>
, <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9a29a70e77eba9ee9773d3e6ac26348820">StatTransientNetworkError</a>
<br />
 }</td></tr>
<tr class="memdesc:abd4abbf0fe1f8b5299675b590315b4b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The current status of this item.  <a href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9">More...</a><br /></td></tr>
<tr class="separator:abd4abbf0fe1f8b5299675b590315b4b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad45c2d8ba7020a5b66bb0563cc773820"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820">RunResult</a> { <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820a45a66636ecd16b869e4aadd738813583">Continue</a>
, <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820a1f506c828f4945d6b5a7bf71445f7d54">Failed</a>
, <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820ad1e026338c0200900908a176717682b8">Cancelled</a>
 }</td></tr>
<tr class="memdesc:ad45c2d8ba7020a5b66bb0563cc773820"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides information on how a download terminated.  <a href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820">More...</a><br /></td></tr>
<tr class="separator:ad45c2d8ba7020a5b66bb0563cc773820"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5c96d11fbbc0a036b3c504b5b6b7568"><td class="memItemLeft" align="right" valign="top"><a id="ad5c96d11fbbc0a036b3c504b5b6b7568"></a>
typedef std::vector&lt; Item * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ItemIterator</b></td></tr>
<tr class="separator:ad5c96d11fbbc0a036b3c504b5b6b7568"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a865ab8f36abc917006d6d1f651c8b132"><td class="memItemLeft" align="right" valign="top"><a id="a865ab8f36abc917006d6d1f651c8b132"></a>
typedef std::vector&lt; Item * &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ItemCIterator</b></td></tr>
<tr class="separator:a865ab8f36abc917006d6d1f651c8b132"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8798e6e4055734c7f1e234ef4acd9371"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a8798e6e4055734c7f1e234ef4acd9371">Failed</a> (std::string const &amp;Message, <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">pkgAcquire::MethodConfig</a> const *const Cnf)</td></tr>
<tr class="memdesc:a8798e6e4055734c7f1e234ef4acd9371"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked by the acquire worker when the object couldn't be fetched.  <a href="classpkgAcquire.xhtml#a8798e6e4055734c7f1e234ef4acd9371">More...</a><br /></td></tr>
<tr class="separator:a8798e6e4055734c7f1e234ef4acd9371"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a1ad2ca6cf85eaa2c01508a6d70cfd6"><td class="memItemLeft" align="right" valign="top"><a id="a2a1ad2ca6cf85eaa2c01508a6d70cfd6"></a>
APT_HIDDEN void&#160;</td><td class="memItemRight" valign="bottom"><b>FailMessage</b> (std::string const &amp;Message)</td></tr>
<tr class="separator:a2a1ad2ca6cf85eaa2c01508a6d70cfd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16cbb205286be182faec2cbc0434eef2"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a16cbb205286be182faec2cbc0434eef2">VerifyDone</a> (std::string const &amp;Message, <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">pkgAcquire::MethodConfig</a> const *const Cnf)</td></tr>
<tr class="memdesc:a16cbb205286be182faec2cbc0434eef2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked by the acquire worker to check if the successfully fetched object is also the objected we wanted to have.  <a href="classpkgAcquire.xhtml#a16cbb205286be182faec2cbc0434eef2">More...</a><br /></td></tr>
<tr class="separator:a16cbb205286be182faec2cbc0434eef2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17d459e7612a763c8eb2aa4aae9a6418"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a17d459e7612a763c8eb2aa4aae9a6418">Done</a> (std::string const &amp;Message, <a class="el" href="classHashStringList.xhtml">HashStringList</a> const &amp;<a class="el" href="classHashes.xhtml">Hashes</a>, <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">pkgAcquire::MethodConfig</a> const *const Cnf)</td></tr>
<tr class="memdesc:a17d459e7612a763c8eb2aa4aae9a6418"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked by the acquire worker when the object was fetched successfully.  <a href="classpkgAcquire.xhtml#a17d459e7612a763c8eb2aa4aae9a6418">More...</a><br /></td></tr>
<tr class="separator:a17d459e7612a763c8eb2aa4aae9a6418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bd3f16c6fa3134500f50f0bf8fd4ecd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a3bd3f16c6fa3134500f50f0bf8fd4ecd">Start</a> (std::string const &amp;Message, unsigned long long const Size)</td></tr>
<tr class="memdesc:a3bd3f16c6fa3134500f50f0bf8fd4ecd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when the worker starts to fetch this object.  <a href="classpkgAcquire.xhtml#a3bd3f16c6fa3134500f50f0bf8fd4ecd">More...</a><br /></td></tr>
<tr class="separator:a3bd3f16c6fa3134500f50f0bf8fd4ecd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65c34bf145cef32f615c0fd7be757a36"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a65c34bf145cef32f615c0fd7be757a36">Custom600Headers</a> () const</td></tr>
<tr class="memdesc:a65c34bf145cef32f615c0fd7be757a36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Custom headers to be sent to the fetch process.  <a href="classpkgAcquire.xhtml#a65c34bf145cef32f615c0fd7be757a36">More...</a><br /></td></tr>
<tr class="separator:a65c34bf145cef32f615c0fd7be757a36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acec8f68d03a6207df4ce6604a64074ba"><td class="memItemLeft" align="right" valign="top"><a id="acec8f68d03a6207df4ce6604a64074ba"></a>
APT_HIDDEN std::unordered_map&lt; std::string, std::string &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>ModifyCustomFields</b> ()</td></tr>
<tr class="separator:acec8f68d03a6207df4ce6604a64074ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af289d6112c96c3b0e71e682cc89ef887"><td class="memItemLeft" align="right" valign="top"><a id="af289d6112c96c3b0e71e682cc89ef887"></a>
APT_HIDDEN bool&#160;</td><td class="memItemRight" valign="bottom"><b>PopAlternativeURI</b> (std::string &amp;NewURI)</td></tr>
<tr class="separator:af289d6112c96c3b0e71e682cc89ef887"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e00dc542ab49fbe07320afe12c313cf"><td class="memItemLeft" align="right" valign="top"><a id="a1e00dc542ab49fbe07320afe12c313cf"></a>
APT_HIDDEN bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsGoodAlternativeURI</b> (std::string const &amp;AltUri) const</td></tr>
<tr class="separator:a1e00dc542ab49fbe07320afe12c313cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a3c029f6466ad0827767446cb1892d6"><td class="memItemLeft" align="right" valign="top"><a id="a0a3c029f6466ad0827767446cb1892d6"></a>
APT_HIDDEN void&#160;</td><td class="memItemRight" valign="bottom"><b>PushAlternativeURI</b> (std::string &amp;&amp;NewURI, std::unordered_map&lt; std::string, std::string &gt; &amp;&amp;fields, bool const at_the_back)</td></tr>
<tr class="separator:a0a3c029f6466ad0827767446cb1892d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5007439c121990f1d7bb2d0fc5f81db"><td class="memItemLeft" align="right" valign="top"><a id="ae5007439c121990f1d7bb2d0fc5f81db"></a>
APT_HIDDEN void&#160;</td><td class="memItemRight" valign="bottom"><b>RemoveAlternativeSite</b> (std::string &amp;&amp;OldSite)</td></tr>
<tr class="separator:ae5007439c121990f1d7bb2d0fc5f81db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad340ff53c2faad023e3f11627e91c5b6"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ad340ff53c2faad023e3f11627e91c5b6">DescURI</a> () const =0</td></tr>
<tr class="memdesc:ad340ff53c2faad023e3f11627e91c5b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">A "descriptive" URI-like string.  <a href="classpkgAcquire.xhtml#ad340ff53c2faad023e3f11627e91c5b6">More...</a><br /></td></tr>
<tr class="separator:ad340ff53c2faad023e3f11627e91c5b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89dc1a987d2902d03b28100d3427d129"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a89dc1a987d2902d03b28100d3427d129">ShortDesc</a> () const</td></tr>
<tr class="memdesc:a89dc1a987d2902d03b28100d3427d129"><td class="mdescLeft">&#160;</td><td class="mdescRight">Short item description.  <a href="classpkgAcquire.xhtml#a89dc1a987d2902d03b28100d3427d129">More...</a><br /></td></tr>
<tr class="separator:a89dc1a987d2902d03b28100d3427d129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2977f974805071d438df8dd73292fe72"><td class="memItemLeft" align="right" valign="top"><a id="a2977f974805071d438df8dd73292fe72"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a2977f974805071d438df8dd73292fe72">Finished</a> ()</td></tr>
<tr class="memdesc:a2977f974805071d438df8dd73292fe72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked by the worker when the download is completely done. <br /></td></tr>
<tr class="separator:a2977f974805071d438df8dd73292fe72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a908a8a85047dd5a135a84be0f3bc1baa"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classHashStringList.xhtml">HashStringList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a908a8a85047dd5a135a84be0f3bc1baa">GetExpectedHashes</a> () const =0</td></tr>
<tr class="separator:a908a8a85047dd5a135a84be0f3bc1baa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a237fd00f8b6cfdd3cdcf1815846149e0"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a237fd00f8b6cfdd3cdcf1815846149e0">HashSum</a> () const</td></tr>
<tr class="separator:a237fd00f8b6cfdd3cdcf1815846149e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1136af95870160bb254473a2f7e59a86"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a1136af95870160bb254473a2f7e59a86">HashesRequired</a> () const</td></tr>
<tr class="separator:a1136af95870160bb254473a2f7e59a86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5b29a075a3faef3bc2b34663801a256"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#af5b29a075a3faef3bc2b34663801a256">GetOwner</a> () const</td></tr>
<tr class="separator:af5b29a075a3faef3bc2b34663801a256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8e75834ab1da01539a9a2047171e5c3"><td class="memItemLeft" align="right" valign="top"><a id="ae8e75834ab1da01539a9a2047171e5c3"></a>
pkgAcquire::ItemDesc &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetItemDesc</b> ()</td></tr>
<tr class="separator:ae8e75834ab1da01539a9a2047171e5c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbd5b67ba93cd4d1d0d19ad5a37704a5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#abbd5b67ba93cd4d1d0d19ad5a37704a5">IsTrusted</a> () const</td></tr>
<tr class="separator:abbd5b67ba93cd4d1d0d19ad5a37704a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeb2ad33090ed27447bfe86ff8d9d883"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#aeeb2ad33090ed27447bfe86ff8d9d883">SetActiveSubprocess</a> (std::string const &amp;subprocess)</td></tr>
<tr class="memdesc:aeeb2ad33090ed27447bfe86ff8d9d883"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the name of the current active subprocess.  <a href="classpkgAcquire.xhtml#aeeb2ad33090ed27447bfe86ff8d9d883">More...</a><br /></td></tr>
<tr class="separator:aeeb2ad33090ed27447bfe86ff8d9d883"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa391d1c541349a2c9d0968ef8660b45e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#aa391d1c541349a2c9d0968ef8660b45e">Item</a> (<a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *const <a class="el" href="classpkgAcquire.xhtml#ac0b2d9156c461297e38e9f3fdf2771b3">Owner</a>)</td></tr>
<tr class="memdesc:aa391d1c541349a2c9d0968ef8660b45e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize an item.  <a href="classpkgAcquire.xhtml#aa391d1c541349a2c9d0968ef8660b45e">More...</a><br /></td></tr>
<tr class="separator:aa391d1c541349a2c9d0968ef8660b45e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73dc08e4fcad28172942d233f825e391"><td class="memItemLeft" align="right" valign="top"><a id="a73dc08e4fcad28172942d233f825e391"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a73dc08e4fcad28172942d233f825e391">~Item</a> ()</td></tr>
<tr class="memdesc:a73dc08e4fcad28172942d233f825e391"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove this item from its owner's queue by invoking <a class="el" href="classpkgAcquire.xhtml#ae3e5902c5c7d0b5c6856e6761205a39c" title="Remove the given item from the list of items.">pkgAcquire::Remove</a>. <br /></td></tr>
<tr class="separator:a73dc08e4fcad28172942d233f825e391"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c88d4828c50fef9ed7469cf592c7707"><td class="memItemLeft" align="right" valign="top"><a id="a3c88d4828c50fef9ed7469cf592c7707"></a>
bool APT_HIDDEN&#160;</td><td class="memItemRight" valign="bottom"><b>IsRedirectionLoop</b> (std::string const &amp;NewURI)</td></tr>
<tr class="separator:a3c88d4828c50fef9ed7469cf592c7707"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14b95e9dfd9a18f94878cdf849c60053"><td class="memItemLeft" align="right" valign="top"><a id="a14b95e9dfd9a18f94878cdf849c60053"></a>
int APT_HIDDEN&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a14b95e9dfd9a18f94878cdf849c60053">Priority</a> ()</td></tr>
<tr class="memdesc:a14b95e9dfd9a18f94878cdf849c60053"><td class="mdescLeft">&#160;</td><td class="mdescRight">The priority of the item, used for queuing. <br /></td></tr>
<tr class="separator:a14b95e9dfd9a18f94878cdf849c60053"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37fbf2dea83d49ebf053ecc76c5b39b3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a37fbf2dea83d49ebf053ecc76c5b39b3">QueueItem</a> (pkgAcquire::Queue::QItem *Item)</td></tr>
<tr class="memdesc:a37fbf2dea83d49ebf053ecc76c5b39b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the subprocess to download the given item.  <a href="classpkgAcquire.xhtml#a37fbf2dea83d49ebf053ecc76c5b39b3">More...</a><br /></td></tr>
<tr class="separator:a37fbf2dea83d49ebf053ecc76c5b39b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b863cae95ab82a3c6ead543a1df6667"><td class="memItemLeft" align="right" valign="top"><a id="a9b863cae95ab82a3c6ead543a1df6667"></a>
APT_HIDDEN bool&#160;</td><td class="memItemRight" valign="bottom"><b>ReplyAux</b> (pkgAcquire::ItemDesc const &amp;Item)</td></tr>
<tr class="separator:a9b863cae95ab82a3c6ead543a1df6667"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa70efaa4751ac6d5d54dce88fe725e0a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#aa70efaa4751ac6d5d54dce88fe725e0a">Start</a> ()</td></tr>
<tr class="memdesc:aa70efaa4751ac6d5d54dce88fe725e0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start up the worker and fill in <a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297" title="The configuration of this method. On startup, the target of this pointer is filled in with basic data...">Config</a>.  <a href="classpkgAcquire.xhtml#aa70efaa4751ac6d5d54dce88fe725e0a">More...</a><br /></td></tr>
<tr class="separator:aa70efaa4751ac6d5d54dce88fe725e0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7e67c4b41efe972e0bd8ccaeacce912"><td class="memItemLeft" align="right" valign="top"><a id="ae7e67c4b41efe972e0bd8ccaeacce912"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ae7e67c4b41efe972e0bd8ccaeacce912">Pulse</a> ()</td></tr>
<tr class="memdesc:ae7e67c4b41efe972e0bd8ccaeacce912"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the worker statistics (CurrentSize, TotalSize, etc). <br /></td></tr>
<tr class="separator:ae7e67c4b41efe972e0bd8ccaeacce912"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b88e4cc12a0a74aad2b80e5313859b3"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a8b88e4cc12a0a74aad2b80e5313859b3">GetConf</a> () const</td></tr>
<tr class="separator:a8b88e4cc12a0a74aad2b80e5313859b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0cf8a483d82d1372c6f7d499937860c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> (Queue *<a class="el" href="classpkgAcquire.xhtml#a99d906c6fe7507d8452fa4566377d2eb">OwnerQ</a>, <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *<a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297">Config</a>, <a class="el" href="classpkgAcquireStatus.xhtml">pkgAcquireStatus</a> *<a class="el" href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c">Log</a>)</td></tr>
<tr class="memdesc:ac0cf8a483d82d1372c6f7d499937860c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new Worker to download files.  <a href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">More...</a><br /></td></tr>
<tr class="separator:ac0cf8a483d82d1372c6f7d499937860c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2af0336261da4341b48814adf215290"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ae2af0336261da4341b48814adf215290">Worker</a> (<a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *<a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297">Config</a>)</td></tr>
<tr class="memdesc:ae2af0336261da4341b48814adf215290"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new Worker that should just retrieve information about the fetch method.  <a href="classpkgAcquire.xhtml#ae2af0336261da4341b48814adf215290">More...</a><br /></td></tr>
<tr class="separator:ae2af0336261da4341b48814adf215290"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae505e0fb7b5ba6f2a2e42eab07a1d4ec"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ae505e0fb7b5ba6f2a2e42eab07a1d4ec">~Worker</a> ()</td></tr>
<tr class="memdesc:ae505e0fb7b5ba6f2a2e42eab07a1d4ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clean up this worker.  <a href="classpkgAcquire.xhtml#ae505e0fb7b5ba6f2a2e42eab07a1d4ec">More...</a><br /></td></tr>
<tr class="separator:ae505e0fb7b5ba6f2a2e42eab07a1d4ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad698ed345d50318b53f3cc3ae43190db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ad698ed345d50318b53f3cc3ae43190db">GetConfig</a> (std::string <a class="el" href="classpkgAcquire.xhtml#a006a979c4801f6b6ceb33cb3acd6dc89">Access</a>)</td></tr>
<tr class="memdesc:ad698ed345d50318b53f3cc3ae43190db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve information about a fetch method by name.  <a href="classpkgAcquire.xhtml#ad698ed345d50318b53f3cc3ae43190db">More...</a><br /></td></tr>
<tr class="separator:ad698ed345d50318b53f3cc3ae43190db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15888f17717fe69c2a9d4a3f511b4a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820">RunResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">Run</a> (int PulseInterval=500000)</td></tr>
<tr class="memdesc:af15888f17717fe69c2a9d4a3f511b4a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Download all the items that have been <a class="el" href="classpkgAcquire.xhtml#a81c2ed5c92ad099344f44cfd9ebdb249" title="Add the given item to the list of items.">Add()</a>ed to this download process.  <a href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">More...</a><br /></td></tr>
<tr class="separator:af15888f17717fe69c2a9d4a3f511b4a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5f038c2b480cf9ef5e19e3eba8dbaf9"><td class="memItemLeft" align="right" valign="top"><a id="ac5f038c2b480cf9ef5e19e3eba8dbaf9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ac5f038c2b480cf9ef5e19e3eba8dbaf9">Shutdown</a> ()</td></tr>
<tr class="memdesc:ac5f038c2b480cf9ef5e19e3eba8dbaf9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove all items from this download process, terminate all download workers, and empty all queues. <br /></td></tr>
<tr class="separator:ac5f038c2b480cf9ef5e19e3eba8dbaf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1670b365447a9c9262393be646dc0c83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a1670b365447a9c9262393be646dc0c83">WorkersBegin</a> ()</td></tr>
<tr class="memdesc:a1670b365447a9c9262393be646dc0c83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the first Worker object.  <a href="classpkgAcquire.xhtml#a1670b365447a9c9262393be646dc0c83">More...</a><br /></td></tr>
<tr class="separator:a1670b365447a9c9262393be646dc0c83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae88f77b544d05718eb98cf4c93bad3e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ae88f77b544d05718eb98cf4c93bad3e8">WorkerStep</a> (<a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *I) APT_PURE</td></tr>
<tr class="memdesc:ae88f77b544d05718eb98cf4c93bad3e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Advance to the next Worker object.  <a href="classpkgAcquire.xhtml#ae88f77b544d05718eb98cf4c93bad3e8">More...</a><br /></td></tr>
<tr class="separator:ae88f77b544d05718eb98cf4c93bad3e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af54b860e41ab56ec44a007f3542dbe82"><td class="memItemLeft" align="right" valign="top"><a id="af54b860e41ab56ec44a007f3542dbe82"></a>
ItemIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#af54b860e41ab56ec44a007f3542dbe82">ItemsBegin</a> ()</td></tr>
<tr class="memdesc:af54b860e41ab56ec44a007f3542dbe82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the head of the list of items. <br /></td></tr>
<tr class="separator:af54b860e41ab56ec44a007f3542dbe82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a6b92d0b6ba451f5c40e5d17a1ed405"><td class="memItemLeft" align="right" valign="top"><a id="a8a6b92d0b6ba451f5c40e5d17a1ed405"></a>
ItemCIterator&#160;</td><td class="memItemRight" valign="bottom"><b>ItemsBegin</b> () const</td></tr>
<tr class="separator:a8a6b92d0b6ba451f5c40e5d17a1ed405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06f41681fab7fd54db89fa55c09fac43"><td class="memItemLeft" align="right" valign="top"><a id="a06f41681fab7fd54db89fa55c09fac43"></a>
ItemIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a06f41681fab7fd54db89fa55c09fac43">ItemsEnd</a> ()</td></tr>
<tr class="memdesc:a06f41681fab7fd54db89fa55c09fac43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the end iterator of the list of items. <br /></td></tr>
<tr class="separator:a06f41681fab7fd54db89fa55c09fac43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa093d383470a218978b033971cf74a26"><td class="memItemLeft" align="right" valign="top"><a id="aa093d383470a218978b033971cf74a26"></a>
ItemCIterator&#160;</td><td class="memItemRight" valign="bottom"><b>ItemsEnd</b> () const</td></tr>
<tr class="separator:aa093d383470a218978b033971cf74a26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03a67f9076e4dd4a46bb429a9b1f5164"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#ad7be95273598f4fcd8b0279f7f8145fc">UriIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a03a67f9076e4dd4a46bb429a9b1f5164">UriBegin</a> ()</td></tr>
<tr class="memdesc:a03a67f9076e4dd4a46bb429a9b1f5164"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the head of the list of enqueued item URIs.  <a href="classpkgAcquire.xhtml#a03a67f9076e4dd4a46bb429a9b1f5164">More...</a><br /></td></tr>
<tr class="separator:a03a67f9076e4dd4a46bb429a9b1f5164"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e782c6e73a812c3650623fe076d4dcc"><td class="memItemLeft" align="right" valign="top"><a id="a5e782c6e73a812c3650623fe076d4dcc"></a>
<a class="el" href="classpkgAcquire.xhtml#ad7be95273598f4fcd8b0279f7f8145fc">UriIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a5e782c6e73a812c3650623fe076d4dcc">UriEnd</a> ()</td></tr>
<tr class="memdesc:a5e782c6e73a812c3650623fe076d4dcc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the end iterator of the list of enqueued item URIs. <br /></td></tr>
<tr class="separator:a5e782c6e73a812c3650623fe076d4dcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae5af42b94e25de2d233e1bfa6b0688c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#aae5af42b94e25de2d233e1bfa6b0688c">Clean</a> (std::string Dir)</td></tr>
<tr class="separator:aae5af42b94e25de2d233e1bfa6b0688c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a155b1c5f08787829418fc297bfc5d1d5"><td class="memItemLeft" align="right" valign="top">unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a155b1c5f08787829418fc297bfc5d1d5">TotalNeeded</a> ()</td></tr>
<tr class="separator:a155b1c5f08787829418fc297bfc5d1d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08457b069b64cfcb38ba4ab429baedef"><td class="memItemLeft" align="right" valign="top">unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a08457b069b64cfcb38ba4ab429baedef">FetchNeeded</a> ()</td></tr>
<tr class="separator:a08457b069b64cfcb38ba4ab429baedef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af56f208869586464f3e478be784994a5"><td class="memItemLeft" align="right" valign="top">unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#af56f208869586464f3e478be784994a5">PartialPresent</a> ()</td></tr>
<tr class="separator:af56f208869586464f3e478be784994a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f5d351e5e37ab3241156c4106e7f2a5"><td class="memItemLeft" align="right" valign="top"><a id="a9f5d351e5e37ab3241156c4106e7f2a5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetLog</b> (<a class="el" href="classpkgAcquireStatus.xhtml">pkgAcquireStatus</a> *Progress)</td></tr>
<tr class="separator:a9f5d351e5e37ab3241156c4106e7f2a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d019487d6dfd10c9f4801c55a2a65d2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a9d019487d6dfd10c9f4801c55a2a65d2">GetLock</a> (std::string const &amp;Lock)</td></tr>
<tr class="memdesc:a9d019487d6dfd10c9f4801c55a2a65d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">acquire lock and perform directory setup  <a href="classpkgAcquire.xhtml#a9d019487d6dfd10c9f4801c55a2a65d2">More...</a><br /></td></tr>
<tr class="separator:a9d019487d6dfd10c9f4801c55a2a65d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9350e6c4105830bbf28af0a8cd3948bb"><td class="memItemLeft" align="right" valign="top"><a id="a9350e6c4105830bbf28af0a8cd3948bb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a9350e6c4105830bbf28af0a8cd3948bb">pkgAcquire</a> (<a class="el" href="classpkgAcquireStatus.xhtml">pkgAcquireStatus</a> *<a class="el" href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c">Log</a>)</td></tr>
<tr class="memdesc:a9350e6c4105830bbf28af0a8cd3948bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a new <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a>. <br /></td></tr>
<tr class="separator:a9350e6c4105830bbf28af0a8cd3948bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63b3097945b28966895045ffeaeb658c"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a63b3097945b28966895045ffeaeb658c">~pkgAcquire</a> ()</td></tr>
<tr class="memdesc:a63b3097945b28966895045ffeaeb658c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroy this <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> object.  <a href="classpkgAcquire.xhtml#a63b3097945b28966895045ffeaeb658c">More...</a><br /></td></tr>
<tr class="separator:a63b3097945b28966895045ffeaeb658c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2af342681f220fe125323f83c45dd074"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a2af342681f220fe125323f83c45dd074">Enqueue</a> (ItemDesc &amp;Item)</td></tr>
<tr class="memdesc:a2af342681f220fe125323f83c45dd074"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert the given fetch request into this queue.  <a href="classpkgAcquire.xhtml#a2af342681f220fe125323f83c45dd074">More...</a><br /></td></tr>
<tr class="separator:a2af342681f220fe125323f83c45dd074"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a875744fa53902d8821377a9222166a47"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a875744fa53902d8821377a9222166a47">Dequeue</a> (Item *<a class="el" href="classpkgAcquire.xhtml#ac0b2d9156c461297e38e9f3fdf2771b3">Owner</a>)</td></tr>
<tr class="memdesc:a875744fa53902d8821377a9222166a47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove all fetch requests for the given item from this queue.  <a href="classpkgAcquire.xhtml#a875744fa53902d8821377a9222166a47">More...</a><br /></td></tr>
<tr class="separator:a875744fa53902d8821377a9222166a47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f9ed1e8cd6cec8f8c325d05207c8c48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a8f9ed1e8cd6cec8f8c325d05207c8c48">FindItem</a> (std::string <a class="el" href="classURI.xhtml">URI</a>, <a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">pkgAcquire::Worker</a> *<a class="el" href="classpkgAcquire.xhtml#ac0b2d9156c461297e38e9f3fdf2771b3">Owner</a>) APT_PURE</td></tr>
<tr class="memdesc:a8f9ed1e8cd6cec8f8c325d05207c8c48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Locate an item in this queue.  <a href="classpkgAcquire.xhtml#a8f9ed1e8cd6cec8f8c325d05207c8c48">More...</a><br /></td></tr>
<tr class="separator:a8f9ed1e8cd6cec8f8c325d05207c8c48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76f3403ec41517cce48d96a5b1f54e1e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a76f3403ec41517cce48d96a5b1f54e1e">ItemStart</a> (<a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a> *Itm, unsigned long long Size)</td></tr>
<tr class="separator:a76f3403ec41517cce48d96a5b1f54e1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dc41a112e43fd568e47e7a9c682112c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a6dc41a112e43fd568e47e7a9c682112c">ItemDone</a> (<a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a> *Itm)</td></tr>
<tr class="memdesc:a6dc41a112e43fd568e47e7a9c682112c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the given item from this queue and set its state to pkgAcquire::Item::StatDone.  <a href="classpkgAcquire.xhtml#a6dc41a112e43fd568e47e7a9c682112c">More...</a><br /></td></tr>
<tr class="separator:a6dc41a112e43fd568e47e7a9c682112c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4442bc1bb880bd798d3c08a153364b8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ab4442bc1bb880bd798d3c08a153364b8">Startup</a> ()</td></tr>
<tr class="memdesc:ab4442bc1bb880bd798d3c08a153364b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start the worker process associated with this queue.  <a href="classpkgAcquire.xhtml#ab4442bc1bb880bd798d3c08a153364b8">More...</a><br /></td></tr>
<tr class="separator:ab4442bc1bb880bd798d3c08a153364b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0483a6e5db0c15e5445bcc6a00262204"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a0483a6e5db0c15e5445bcc6a00262204">Shutdown</a> (bool Final)</td></tr>
<tr class="memdesc:a0483a6e5db0c15e5445bcc6a00262204"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shut down the worker process associated with this queue.  <a href="classpkgAcquire.xhtml#a0483a6e5db0c15e5445bcc6a00262204">More...</a><br /></td></tr>
<tr class="separator:a0483a6e5db0c15e5445bcc6a00262204"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b2dd956b1adc90b13d47e26121d5486"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a5b2dd956b1adc90b13d47e26121d5486">Cycle</a> ()</td></tr>
<tr class="memdesc:a5b2dd956b1adc90b13d47e26121d5486"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send idle items to the worker process.  <a href="classpkgAcquire.xhtml#a5b2dd956b1adc90b13d47e26121d5486">More...</a><br /></td></tr>
<tr class="separator:a5b2dd956b1adc90b13d47e26121d5486"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf4fe627ab803887ecd2a8af30f17147"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#abf4fe627ab803887ecd2a8af30f17147">Bump</a> ()</td></tr>
<tr class="memdesc:abf4fe627ab803887ecd2a8af30f17147"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check for items that could be enqueued.  <a href="classpkgAcquire.xhtml#abf4fe627ab803887ecd2a8af30f17147">More...</a><br /></td></tr>
<tr class="separator:abf4fe627ab803887ecd2a8af30f17147"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97969ee86e84f640800a60dbc94e3ad7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a97969ee86e84f640800a60dbc94e3ad7">Queue</a> (std::string const &amp;<a class="el" href="classpkgAcquire.xhtml#adc852f586959ce13117d737cf3f14899">Name</a>, <a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *const <a class="el" href="classpkgAcquire.xhtml#ac0b2d9156c461297e38e9f3fdf2771b3">Owner</a>)</td></tr>
<tr class="memdesc:a97969ee86e84f640800a60dbc94e3ad7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new Queue.  <a href="classpkgAcquire.xhtml#a97969ee86e84f640800a60dbc94e3ad7">More...</a><br /></td></tr>
<tr class="separator:a97969ee86e84f640800a60dbc94e3ad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9b9b24243b14b459eeae65f3b0c283a"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ab9b9b24243b14b459eeae65f3b0c283a">~Queue</a> ()</td></tr>
<tr class="separator:ab9b9b24243b14b459eeae65f3b0c283a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00f008b80917746917b874d00abd02a9"><td class="memItemLeft" align="right" valign="top"><a id="a00f008b80917746917b874d00abd02a9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator++</b> ()</td></tr>
<tr class="separator:a00f008b80917746917b874d00abd02a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2aefc5a84a51687145f8514f4029c26c"><td class="memItemLeft" align="right" valign="top"><a id="a2aefc5a84a51687145f8514f4029c26c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator++</b> (int)</td></tr>
<tr class="separator:a2aefc5a84a51687145f8514f4029c26c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f25d11a8eef1758b35542d471a90b86"><td class="memItemLeft" align="right" valign="top"><a id="a5f25d11a8eef1758b35542d471a90b86"></a>
pkgAcquire::Queue::QItem const  *&#160;</td><td class="memItemRight" valign="bottom"><b>operator-&gt;</b> () const</td></tr>
<tr class="separator:a5f25d11a8eef1758b35542d471a90b86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a311318f7f7ece973ae1c0d7ea9d07c"><td class="memItemLeft" align="right" valign="top"><a id="a1a311318f7f7ece973ae1c0d7ea9d07c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator!=</b> (<a class="el" href="classpkgAcquire.xhtml#ad7be95273598f4fcd8b0279f7f8145fc">UriIterator</a> const &amp;rhs) const</td></tr>
<tr class="separator:a1a311318f7f7ece973ae1c0d7ea9d07c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13761eea3347f077a960845d22dedb29"><td class="memItemLeft" align="right" valign="top"><a id="a13761eea3347f077a960845d22dedb29"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (<a class="el" href="classpkgAcquire.xhtml#ad7be95273598f4fcd8b0279f7f8145fc">UriIterator</a> const &amp;rhs) const</td></tr>
<tr class="separator:a13761eea3347f077a960845d22dedb29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7be95273598f4fcd8b0279f7f8145fc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ad7be95273598f4fcd8b0279f7f8145fc">UriIterator</a> (pkgAcquire::Queue *Q)</td></tr>
<tr class="memdesc:ad7be95273598f4fcd8b0279f7f8145fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new UriIterator.  <a href="classpkgAcquire.xhtml#ad7be95273598f4fcd8b0279f7f8145fc">More...</a><br /></td></tr>
<tr class="separator:ad7be95273598f4fcd8b0279f7f8145fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29c0cb60fa0c1e5f67d911bed92f2006"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> ()</td></tr>
<tr class="memdesc:a29c0cb60fa0c1e5f67d911bed92f2006"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set up the default method parameters.  <a href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">More...</a><br /></td></tr>
<tr class="separator:a29c0cb60fa0c1e5f67d911bed92f2006"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38186cf89c0a1682f3308a2c7eedbb5d"><td class="memItemLeft" align="right" valign="top"><a id="a38186cf89c0a1682f3308a2c7eedbb5d"></a>
APT_HIDDEN bool&#160;</td><td class="memItemRight" valign="bottom"><b>GetAuxRequests</b> () const</td></tr>
<tr class="separator:a38186cf89c0a1682f3308a2c7eedbb5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac68bffa5f5f9ae51baa15238d5eebff4"><td class="memItemLeft" align="right" valign="top"><a id="ac68bffa5f5f9ae51baa15238d5eebff4"></a>
APT_HIDDEN void&#160;</td><td class="memItemRight" valign="bottom"><b>SetAuxRequests</b> (bool const value)</td></tr>
<tr class="separator:ac68bffa5f5f9ae51baa15238d5eebff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd855c7e426ebc2245bcf518e120329a"><td class="memItemLeft" align="right" valign="top"><a id="afd855c7e426ebc2245bcf518e120329a"></a>
APT_HIDDEN bool&#160;</td><td class="memItemRight" valign="bottom"><b>GetSendURIEncoded</b> () const</td></tr>
<tr class="separator:afd855c7e426ebc2245bcf518e120329a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf52060ce2663b32204e999d0dbaa8bb"><td class="memItemLeft" align="right" valign="top"><a id="acf52060ce2663b32204e999d0dbaa8bb"></a>
APT_HIDDEN void&#160;</td><td class="memItemRight" valign="bottom"><b>SetSendURIEncoded</b> (bool const value)</td></tr>
<tr class="separator:acf52060ce2663b32204e999d0dbaa8bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aba77efbb5492c9ebbfe47fbcf67123ee"><td class="memItemLeft" align="right" valign="top"><a id="aba77efbb5492c9ebbfe47fbcf67123ee"></a>
static APT_HIDDEN std::string&#160;</td><td class="memItemRight" valign="bottom"><b>URIEncode</b> (std::string const &amp;part)</td></tr>
<tr class="separator:aba77efbb5492c9ebbfe47fbcf67123ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:ae28c0f6870b2474100a60250df6651f9"><td class="memItemLeft" align="right" valign="top"><a id="ae28c0f6870b2474100a60250df6651f9"></a>
enum <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9">pkgAcquire::ItemState</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Status</b></td></tr>
<tr class="separator:ae28c0f6870b2474100a60250df6651f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2638de684977037618d65aa009384b1"><td class="memItemLeft" align="right" valign="top"><a id="ab2638de684977037618d65aa009384b1"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ab2638de684977037618d65aa009384b1">ErrorText</a></td></tr>
<tr class="memdesc:ab2638de684977037618d65aa009384b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contains a textual description of the error encountered if <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9" title="The current status of this item.">ItemState</a> is <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9a8523989e15c68262bb5469f61fbe72ba" title="An error was encountered while downloading this item.">StatError</a> or <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9a19728efb594f55c57218604ad77b25db" title="The item was downloaded but its authenticity could not be verified.">StatAuthError</a>. <br /></td></tr>
<tr class="separator:ab2638de684977037618d65aa009384b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8798fd49b6306cde3810ff5744d8bfc2"><td class="memItemLeft" align="right" valign="top"><a id="a8798fd49b6306cde3810ff5744d8bfc2"></a>
unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a8798fd49b6306cde3810ff5744d8bfc2">FileSize</a></td></tr>
<tr class="memdesc:a8798fd49b6306cde3810ff5744d8bfc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of the object to fetch. <br /></td></tr>
<tr class="separator:a8798fd49b6306cde3810ff5744d8bfc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b86900df4f7c4f7fc44f4c2bc888827"><td class="memItemLeft" align="right" valign="top"><a id="a2b86900df4f7c4f7fc44f4c2bc888827"></a>
unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a2b86900df4f7c4f7fc44f4c2bc888827">PartialSize</a></td></tr>
<tr class="memdesc:a2b86900df4f7c4f7fc44f4c2bc888827"><td class="mdescLeft">&#160;</td><td class="mdescRight">How much of the object was already fetched. <br /></td></tr>
<tr class="separator:a2b86900df4f7c4f7fc44f4c2bc888827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a634f2accefd6f56896af45cedbebb08d"><td class="memItemLeft" align="right" valign="top"><a id="a634f2accefd6f56896af45cedbebb08d"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a634f2accefd6f56896af45cedbebb08d">ActiveSubprocess</a></td></tr>
<tr class="memdesc:a634f2accefd6f56896af45cedbebb08d"><td class="mdescLeft">&#160;</td><td class="mdescRight">contains the name of the subprocess that is operating on this object (for instance, "gzip", "rred" or "gpgv"). This is obsoleting #Mode from above as it can manage the lifetime of included string properly. <br /></td></tr>
<tr class="separator:a634f2accefd6f56896af45cedbebb08d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fc877a36248a6101304994352d1ad87"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a7fc877a36248a6101304994352d1ad87">ID</a></td></tr>
<tr class="memdesc:a7fc877a36248a6101304994352d1ad87"><td class="mdescLeft">&#160;</td><td class="mdescRight">A client-supplied unique identifier.  <a href="classpkgAcquire.xhtml#a7fc877a36248a6101304994352d1ad87">More...</a><br /></td></tr>
<tr class="separator:a7fc877a36248a6101304994352d1ad87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a886f6c17d366793eb6202ba2482372f5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a886f6c17d366793eb6202ba2482372f5">Complete</a></td></tr>
<tr class="memdesc:a886f6c17d366793eb6202ba2482372f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, the entire object has been successfully fetched.  <a href="classpkgAcquire.xhtml#a886f6c17d366793eb6202ba2482372f5">More...</a><br /></td></tr>
<tr class="separator:a886f6c17d366793eb6202ba2482372f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98d3c89be817752144bb35823e365fec"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a98d3c89be817752144bb35823e365fec">Local</a></td></tr>
<tr class="memdesc:a98d3c89be817752144bb35823e365fec"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, the <a class="el" href="classURI.xhtml">URI</a> of this object is "local".  <a href="classpkgAcquire.xhtml#a98d3c89be817752144bb35823e365fec">More...</a><br /></td></tr>
<tr class="separator:a98d3c89be817752144bb35823e365fec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc192c0b613d93b4ed6ddf53d2b011d"><td class="memItemLeft" align="right" valign="top"><a id="a0fc192c0b613d93b4ed6ddf53d2b011d"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><b>UsedMirror</b></td></tr>
<tr class="separator:a0fc192c0b613d93b4ed6ddf53d2b011d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d1d5538b9875279b01b81e1ef494601"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a1d1d5538b9875279b01b81e1ef494601">QueueCounter</a></td></tr>
<tr class="memdesc:a1d1d5538b9875279b01b81e1ef494601"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of fetch queues into which this item has been inserted.  <a href="classpkgAcquire.xhtml#a1d1d5538b9875279b01b81e1ef494601">More...</a><br /></td></tr>
<tr class="separator:a1d1d5538b9875279b01b81e1ef494601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bef8db29346252205b0a9be3c530739"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a4bef8db29346252205b0a9be3c530739">ExpectedAdditionalItems</a></td></tr>
<tr class="memdesc:a4bef8db29346252205b0a9be3c530739"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of additional fetch items that are expected once this item is done.  <a href="classpkgAcquire.xhtml#a4bef8db29346252205b0a9be3c530739">More...</a><br /></td></tr>
<tr class="separator:a4bef8db29346252205b0a9be3c530739"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4b5e2afff64c51303682cea9243f098"><td class="memItemLeft" align="right" valign="top"><a id="ab4b5e2afff64c51303682cea9243f098"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ab4b5e2afff64c51303682cea9243f098">DestFile</a></td></tr>
<tr class="memdesc:ab4b5e2afff64c51303682cea9243f098"><td class="mdescLeft">&#160;</td><td class="mdescRight">The name of the file into which the retrieved object will be written. <br /></td></tr>
<tr class="separator:ab4b5e2afff64c51303682cea9243f098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cf4b8b42d2691df4d19f456bad87327"><td class="memItemLeft" align="right" valign="top"><a id="a2cf4b8b42d2691df4d19f456bad87327"></a>
unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a2cf4b8b42d2691df4d19f456bad87327">Retries</a></td></tr>
<tr class="memdesc:a2cf4b8b42d2691df4d19f456bad87327"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of retries. <br /></td></tr>
<tr class="separator:a2cf4b8b42d2691df4d19f456bad87327"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbe3d9577156a7736f774428835b31e9"><td class="memItemLeft" align="right" valign="top"><a id="adbe3d9577156a7736f774428835b31e9"></a>
pkgAcquire::Queue::QItem *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#adbe3d9577156a7736f774428835b31e9">CurrentItem</a></td></tr>
<tr class="memdesc:adbe3d9577156a7736f774428835b31e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The queue entry that is currently being downloaded. <br /></td></tr>
<tr class="separator:adbe3d9577156a7736f774428835b31e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae08432c27cb86081cae64bb384b3ac4b"><td class="memItemLeft" align="right" valign="top"><a id="ae08432c27cb86081cae64bb384b3ac4b"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ae08432c27cb86081cae64bb384b3ac4b">Status</a></td></tr>
<tr class="memdesc:ae08432c27cb86081cae64bb384b3ac4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The most recent status string received from the subprocess. <br /></td></tr>
<tr class="separator:ae08432c27cb86081cae64bb384b3ac4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf8eea5037c53d12d3f31ab9e032712c"><td class="memItemLeft" align="right" valign="top"><a id="aaf8eea5037c53d12d3f31ab9e032712c"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#aaf8eea5037c53d12d3f31ab9e032712c">URI</a></td></tr>
<tr class="memdesc:aaf8eea5037c53d12d3f31ab9e032712c"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classURI.xhtml">URI</a> from which to download this item. <br /></td></tr>
<tr class="separator:aaf8eea5037c53d12d3f31ab9e032712c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72a1a381861908396ddca53a1fa28f97"><td class="memItemLeft" align="right" valign="top"><a id="a72a1a381861908396ddca53a1fa28f97"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a72a1a381861908396ddca53a1fa28f97">Description</a></td></tr>
<tr class="memdesc:a72a1a381861908396ddca53a1fa28f97"><td class="mdescLeft">&#160;</td><td class="mdescRight">description of this item. <br /></td></tr>
<tr class="separator:a72a1a381861908396ddca53a1fa28f97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9248dc77e748314774ae2c9b1618e6a9"><td class="memItemLeft" align="right" valign="top"><a id="a9248dc77e748314774ae2c9b1618e6a9"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a9248dc77e748314774ae2c9b1618e6a9">ShortDesc</a></td></tr>
<tr class="memdesc:a9248dc77e748314774ae2c9b1618e6a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">shorter description of this item. <br /></td></tr>
<tr class="separator:a9248dc77e748314774ae2c9b1618e6a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a991ea711651b5d291202505da64e379c"><td class="memItemLeft" align="right" valign="top"><a id="a991ea711651b5d291202505da64e379c"></a>
Item *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a991ea711651b5d291202505da64e379c">Owner</a></td></tr>
<tr class="memdesc:a991ea711651b5d291202505da64e379c"><td class="mdescLeft">&#160;</td><td class="mdescRight">underlying item which is to be downloaded. <br /></td></tr>
<tr class="separator:a991ea711651b5d291202505da64e379c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add1daf6c866236479bdac390ed41f80a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#add1daf6c866236479bdac390ed41f80a">Next</a></td></tr>
<tr class="memdesc:add1daf6c866236479bdac390ed41f80a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The next link on the acquire method list.  <a href="classpkgAcquire.xhtml#add1daf6c866236479bdac390ed41f80a">More...</a><br /></td></tr>
<tr class="separator:add1daf6c866236479bdac390ed41f80a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9128f413b7890b2493b88f88fe258259"><td class="memItemLeft" align="right" valign="top"><a id="a9128f413b7890b2493b88f88fe258259"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a9128f413b7890b2493b88f88fe258259">Version</a></td></tr>
<tr class="memdesc:a9128f413b7890b2493b88f88fe258259"><td class="mdescLeft">&#160;</td><td class="mdescRight">The implementation version of this acquire method. <br /></td></tr>
<tr class="separator:a9128f413b7890b2493b88f88fe258259"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73e5dd8b9abd83a562ded9c050af4fc5"><td class="memItemLeft" align="right" valign="top"><a id="a73e5dd8b9abd83a562ded9c050af4fc5"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a73e5dd8b9abd83a562ded9c050af4fc5">SingleInstance</a></td></tr>
<tr class="memdesc:a73e5dd8b9abd83a562ded9c050af4fc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, only one download queue should be created for this method. <br /></td></tr>
<tr class="separator:a73e5dd8b9abd83a562ded9c050af4fc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a184f137ba7f14f7867d1480d05645973"><td class="memItemLeft" align="right" valign="top"><a id="a184f137ba7f14f7867d1480d05645973"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a184f137ba7f14f7867d1480d05645973">Pipeline</a></td></tr>
<tr class="memdesc:a184f137ba7f14f7867d1480d05645973"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, this method supports pipelined downloading. <br /></td></tr>
<tr class="separator:a184f137ba7f14f7867d1480d05645973"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb5234a93cf150f464001a2768eb7b27"><td class="memItemLeft" align="right" valign="top"><a id="aeb5234a93cf150f464001a2768eb7b27"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#aeb5234a93cf150f464001a2768eb7b27">SendConfig</a></td></tr>
<tr class="memdesc:aeb5234a93cf150f464001a2768eb7b27"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, the worker process should send the entire APT configuration tree to the fetch subprocess when it starts up. <br /></td></tr>
<tr class="separator:aeb5234a93cf150f464001a2768eb7b27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b6e3669e200451d5531db670a0b7be8"><td class="memItemLeft" align="right" valign="top"><a id="a8b6e3669e200451d5531db670a0b7be8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a8b6e3669e200451d5531db670a0b7be8">LocalOnly</a></td></tr>
<tr class="memdesc:a8b6e3669e200451d5531db670a0b7be8"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, this fetch method does not require network access; all files are to be acquired from the local disk. <br /></td></tr>
<tr class="separator:a8b6e3669e200451d5531db670a0b7be8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18ab15b6a105e10118c35973765cce34"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a18ab15b6a105e10118c35973765cce34">NeedsCleanup</a></td></tr>
<tr class="memdesc:a18ab15b6a105e10118c35973765cce34"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, the subprocess has to carry out some cleanup actions before shutting down.  <a href="classpkgAcquire.xhtml#a18ab15b6a105e10118c35973765cce34">More...</a><br /></td></tr>
<tr class="separator:a18ab15b6a105e10118c35973765cce34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a871cd013ae63d288941eb4bc3db93ae7"><td class="memItemLeft" align="right" valign="top"><a id="a871cd013ae63d288941eb4bc3db93ae7"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a871cd013ae63d288941eb4bc3db93ae7">Removable</a></td></tr>
<tr class="memdesc:a871cd013ae63d288941eb4bc3db93ae7"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, this fetch method acquires files from removable media. <br /></td></tr>
<tr class="separator:a871cd013ae63d288941eb4bc3db93ae7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"></a>
Protected Types</h2></td></tr>
<tr class="memitem:a197f9258acb7676f5797ffbb96dd78e4"><td class="memItemLeft" align="right" valign="top"><a id="a197f9258acb7676f5797ffbb96dd78e4"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><b>RenameOnErrorState</b> { <br />
&#160;&#160;<b>HashSumMismatch</b>
, <b>SizeMismatch</b>
, <b>InvalidFormat</b>
, <b>SignatureError</b>
, <br />
&#160;&#160;<b>NotClearsigned</b>
, <b>MaximumSizeExceeded</b>
, <b>PDiffError</b>
<br />
 }</td></tr>
<tr class="separator:a197f9258acb7676f5797ffbb96dd78e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedefc2c8ff9f8aa323d296085f969555"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#aedefc2c8ff9f8aa323d296085f969555">QueueStrategy</a> { <a class="el" href="classpkgAcquire.xhtml#aedefc2c8ff9f8aa323d296085f969555ad2a3b31a571e30aeeb9d40666f04b902">QueueHost</a>
, <a class="el" href="classpkgAcquire.xhtml#aedefc2c8ff9f8aa323d296085f969555adfbf4cb90b4209e5981227965246d8f0">QueueAccess</a>
 }</td></tr>
<tr class="memdesc:aedefc2c8ff9f8aa323d296085f969555"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents the queuing strategy for remote URIs.  <a href="classpkgAcquire.xhtml#aedefc2c8ff9f8aa323d296085f969555">More...</a><br /></td></tr>
<tr class="separator:aedefc2c8ff9f8aa323d296085f969555"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a140b713d7815b8dd427cc87c2df56585"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a140b713d7815b8dd427cc87c2df56585">RenameOnError</a> (RenameOnErrorState const state)</td></tr>
<tr class="memdesc:a140b713d7815b8dd427cc87c2df56585"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rename failed file and set error.  <a href="classpkgAcquire.xhtml#a140b713d7815b8dd427cc87c2df56585">More...</a><br /></td></tr>
<tr class="separator:a140b713d7815b8dd427cc87c2df56585"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3796f802e2bbb94ea4d215acb092e1de"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a3796f802e2bbb94ea4d215acb092e1de">QueueURI</a> (ItemDesc &amp;Item)</td></tr>
<tr class="memdesc:a3796f802e2bbb94ea4d215acb092e1de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert this item into its owner's queue.  <a href="classpkgAcquire.xhtml#a3796f802e2bbb94ea4d215acb092e1de">More...</a><br /></td></tr>
<tr class="separator:a3796f802e2bbb94ea4d215acb092e1de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a717924cd0aecc1908058a6ed7ffd31f3"><td class="memItemLeft" align="right" valign="top"><a id="a717924cd0aecc1908058a6ed7ffd31f3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a717924cd0aecc1908058a6ed7ffd31f3">Dequeue</a> ()</td></tr>
<tr class="memdesc:a717924cd0aecc1908058a6ed7ffd31f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove this item from its owner's queue. <br /></td></tr>
<tr class="separator:a717924cd0aecc1908058a6ed7ffd31f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7787c3dcef8c503fb513569a9fdec68d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a7787c3dcef8c503fb513569a9fdec68d">Rename</a> (std::string const &amp;From, std::string const &amp;To)</td></tr>
<tr class="memdesc:a7787c3dcef8c503fb513569a9fdec68d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rename a file without modifying its timestamp.  <a href="classpkgAcquire.xhtml#a7787c3dcef8c503fb513569a9fdec68d">More...</a><br /></td></tr>
<tr class="separator:a7787c3dcef8c503fb513569a9fdec68d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ed94159619166b2e0aed2d88be5c875"><td class="memItemLeft" align="right" valign="top"><a id="a9ed94159619166b2e0aed2d88be5c875"></a>
virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a9ed94159619166b2e0aed2d88be5c875">GetFinalFilename</a> () const</td></tr>
<tr class="memdesc:a9ed94159619166b2e0aed2d88be5c875"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the full pathname of the final file for the current <a class="el" href="classURI.xhtml">URI</a>. <br /></td></tr>
<tr class="separator:a9ed94159619166b2e0aed2d88be5c875"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9af72b216eb95e320f0f261d9497c5c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a9af72b216eb95e320f0f261d9497c5c1">Construct</a> ()</td></tr>
<tr class="memdesc:a9af72b216eb95e320f0f261d9497c5c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common code for the constructor.  <a href="classpkgAcquire.xhtml#a9af72b216eb95e320f0f261d9497c5c1">More...</a><br /></td></tr>
<tr class="separator:a9af72b216eb95e320f0f261d9497c5c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f374a34dcd1bd9881717b345118fd49"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a1f374a34dcd1bd9881717b345118fd49">ReadMessages</a> ()</td></tr>
<tr class="memdesc:a1f374a34dcd1bd9881717b345118fd49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve any available messages from the subprocess.  <a href="classpkgAcquire.xhtml#a1f374a34dcd1bd9881717b345118fd49">More...</a><br /></td></tr>
<tr class="separator:a1f374a34dcd1bd9881717b345118fd49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26a68d57a249a042c1e32186ce2fce8b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a26a68d57a249a042c1e32186ce2fce8b">RunMessages</a> ()</td></tr>
<tr class="memdesc:a26a68d57a249a042c1e32186ce2fce8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse and dispatch pending messages.  <a href="classpkgAcquire.xhtml#a26a68d57a249a042c1e32186ce2fce8b">More...</a><br /></td></tr>
<tr class="separator:a26a68d57a249a042c1e32186ce2fce8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a3e1a57c0fe730162df8a50677ae513"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a5a3e1a57c0fe730162df8a50677ae513">InFdReady</a> ()</td></tr>
<tr class="memdesc:a5a3e1a57c0fe730162df8a50677ae513"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read and dispatch any pending messages from the subprocess.  <a href="classpkgAcquire.xhtml#a5a3e1a57c0fe730162df8a50677ae513">More...</a><br /></td></tr>
<tr class="separator:a5a3e1a57c0fe730162df8a50677ae513"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bd3e6488eaf8af11cedae06f7de9e2c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a2bd3e6488eaf8af11cedae06f7de9e2c">OutFdReady</a> ()</td></tr>
<tr class="memdesc:a2bd3e6488eaf8af11cedae06f7de9e2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send any pending commands to the subprocess.  <a href="classpkgAcquire.xhtml#a2bd3e6488eaf8af11cedae06f7de9e2c">More...</a><br /></td></tr>
<tr class="separator:a2bd3e6488eaf8af11cedae06f7de9e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3de23b9c5a564121a667dd9b392e158"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#aa3de23b9c5a564121a667dd9b392e158">Capabilities</a> (std::string Message)</td></tr>
<tr class="memdesc:aa3de23b9c5a564121a667dd9b392e158"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle a 100 Capabilities response from the subprocess.  <a href="classpkgAcquire.xhtml#aa3de23b9c5a564121a667dd9b392e158">More...</a><br /></td></tr>
<tr class="separator:aa3de23b9c5a564121a667dd9b392e158"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af79a315ab449f2046389c91e3f114326"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#af79a315ab449f2046389c91e3f114326">SendConfiguration</a> ()</td></tr>
<tr class="memdesc:af79a315ab449f2046389c91e3f114326"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a 601 <a class="el" href="classConfiguration.xhtml">Configuration</a> message (containing the APT configuration) to the subprocess.  <a href="classpkgAcquire.xhtml#af79a315ab449f2046389c91e3f114326">More...</a><br /></td></tr>
<tr class="separator:af79a315ab449f2046389c91e3f114326"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fa3dc5431fbfcd2b5ceed5f97f1eb84"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a5fa3dc5431fbfcd2b5ceed5f97f1eb84">MediaChange</a> (std::string Message)</td></tr>
<tr class="memdesc:a5fa3dc5431fbfcd2b5ceed5f97f1eb84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle a 403 Media Change message.  <a href="classpkgAcquire.xhtml#a5fa3dc5431fbfcd2b5ceed5f97f1eb84">More...</a><br /></td></tr>
<tr class="separator:a5fa3dc5431fbfcd2b5ceed5f97f1eb84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94fe52037e4594131495b1791d6654ea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a94fe52037e4594131495b1791d6654ea">MethodFailure</a> ()</td></tr>
<tr class="memdesc:a94fe52037e4594131495b1791d6654ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when the worked process dies unexpectedly.  <a href="classpkgAcquire.xhtml#a94fe52037e4594131495b1791d6654ea">More...</a><br /></td></tr>
<tr class="separator:a94fe52037e4594131495b1791d6654ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a6deb8c5e68383147e31b24690ea0fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a6a6deb8c5e68383147e31b24690ea0fd">ItemDone</a> ()</td></tr>
<tr class="memdesc:a6a6deb8c5e68383147e31b24690ea0fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when a fetch job is completed, either successfully or unsuccessfully.  <a href="classpkgAcquire.xhtml#a6a6deb8c5e68383147e31b24690ea0fd">More...</a><br /></td></tr>
<tr class="separator:a6a6deb8c5e68383147e31b24690ea0fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81c2ed5c92ad099344f44cfd9ebdb249"><td class="memItemLeft" align="right" valign="top"><a id="a81c2ed5c92ad099344f44cfd9ebdb249"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a81c2ed5c92ad099344f44cfd9ebdb249">Add</a> (Item *Item)</td></tr>
<tr class="memdesc:a81c2ed5c92ad099344f44cfd9ebdb249"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the given item to the list of items. <br /></td></tr>
<tr class="separator:a81c2ed5c92ad099344f44cfd9ebdb249"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3e5902c5c7d0b5c6856e6761205a39c"><td class="memItemLeft" align="right" valign="top"><a id="ae3e5902c5c7d0b5c6856e6761205a39c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ae3e5902c5c7d0b5c6856e6761205a39c">Remove</a> (Item *Item)</td></tr>
<tr class="memdesc:ae3e5902c5c7d0b5c6856e6761205a39c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the given item from the list of items. <br /></td></tr>
<tr class="separator:ae3e5902c5c7d0b5c6856e6761205a39c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4342a42ca975e033e3e859480b0c45ee"><td class="memItemLeft" align="right" valign="top"><a id="a4342a42ca975e033e3e859480b0c45ee"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a4342a42ca975e033e3e859480b0c45ee">Add</a> (<a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *Work)</td></tr>
<tr class="memdesc:a4342a42ca975e033e3e859480b0c45ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the given worker to the list of workers. <br /></td></tr>
<tr class="separator:a4342a42ca975e033e3e859480b0c45ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ec623661f28cc681c1145186227ab60"><td class="memItemLeft" align="right" valign="top"><a id="a8ec623661f28cc681c1145186227ab60"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a8ec623661f28cc681c1145186227ab60">Remove</a> (<a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *Work)</td></tr>
<tr class="memdesc:a8ec623661f28cc681c1145186227ab60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the given worker from the list of workers. <br /></td></tr>
<tr class="separator:a8ec623661f28cc681c1145186227ab60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adff4865b0b932d7c8dae0aee44006c13"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#adff4865b0b932d7c8dae0aee44006c13">Enqueue</a> (ItemDesc &amp;Item)</td></tr>
<tr class="memdesc:adff4865b0b932d7c8dae0aee44006c13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert the given fetch request into the appropriate queue.  <a href="classpkgAcquire.xhtml#adff4865b0b932d7c8dae0aee44006c13">More...</a><br /></td></tr>
<tr class="separator:adff4865b0b932d7c8dae0aee44006c13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad88e269d0297439604f25eb9c1309286"><td class="memItemLeft" align="right" valign="top"><a id="ad88e269d0297439604f25eb9c1309286"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ad88e269d0297439604f25eb9c1309286">Dequeue</a> (Item *Item)</td></tr>
<tr class="memdesc:ad88e269d0297439604f25eb9c1309286"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove all fetch requests for this item from all queues. <br /></td></tr>
<tr class="separator:ad88e269d0297439604f25eb9c1309286"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67678d9efe826f5824f2e8fc0e812338"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a67678d9efe826f5824f2e8fc0e812338">QueueName</a> (std::string <a class="el" href="classURI.xhtml">URI</a>, <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> const *&amp;<a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297">Config</a>)</td></tr>
<tr class="memdesc:a67678d9efe826f5824f2e8fc0e812338"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine the fetch method and queue of a <a class="el" href="classURI.xhtml">URI</a>.  <a href="classpkgAcquire.xhtml#a67678d9efe826f5824f2e8fc0e812338">More...</a><br /></td></tr>
<tr class="separator:a67678d9efe826f5824f2e8fc0e812338"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d36ab39eb6238a71b574a40730fd469"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a7d36ab39eb6238a71b574a40730fd469">SetFds</a> (int &amp;Fd, fd_set *RSet, fd_set *WSet)</td></tr>
<tr class="memdesc:a7d36ab39eb6238a71b574a40730fd469"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build up the set of file descriptors upon which select() should block.  <a href="classpkgAcquire.xhtml#a7d36ab39eb6238a71b574a40730fd469">More...</a><br /></td></tr>
<tr class="separator:a7d36ab39eb6238a71b574a40730fd469"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7b347350616935485a87dd147e0f2ec"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#af7b347350616935485a87dd147e0f2ec">RunFds</a> (fd_set *RSet, fd_set *WSet)</td></tr>
<tr class="separator:af7b347350616935485a87dd147e0f2ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf4fe627ab803887ecd2a8af30f17147"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#abf4fe627ab803887ecd2a8af30f17147">Bump</a> ()</td></tr>
<tr class="memdesc:abf4fe627ab803887ecd2a8af30f17147"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check for idle queues with ready-to-fetch items.  <a href="classpkgAcquire.xhtml#abf4fe627ab803887ecd2a8af30f17147">More...</a><br /></td></tr>
<tr class="separator:abf4fe627ab803887ecd2a8af30f17147"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ac0b2d9156c461297e38e9f3fdf2771b3"><td class="memItemLeft" align="right" valign="top"><a id="ac0b2d9156c461297e38e9f3fdf2771b3"></a>
<a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ac0b2d9156c461297e38e9f3fdf2771b3">Owner</a></td></tr>
<tr class="memdesc:ac0b2d9156c461297e38e9f3fdf2771b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">The acquire object with which this item is associated. <br /></td></tr>
<tr class="separator:ac0b2d9156c461297e38e9f3fdf2771b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63a8c90526aa28ea8a9c2458a53846bc"><td class="memItemLeft" align="right" valign="top"><a id="a63a8c90526aa28ea8a9c2458a53846bc"></a>
pkgAcquire::ItemDesc&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a63a8c90526aa28ea8a9c2458a53846bc">Desc</a></td></tr>
<tr class="memdesc:a63a8c90526aa28ea8a9c2458a53846bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">The item that is currently being downloaded. <br /></td></tr>
<tr class="separator:a63a8c90526aa28ea8a9c2458a53846bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70b012fdfb38bfe94b52924d45c5462d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a70b012fdfb38bfe94b52924d45c5462d">NextQueue</a></td></tr>
<tr class="memdesc:a70b012fdfb38bfe94b52924d45c5462d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The next link on the Queue list.  <a href="classpkgAcquire.xhtml#a70b012fdfb38bfe94b52924d45c5462d">More...</a><br /></td></tr>
<tr class="separator:a70b012fdfb38bfe94b52924d45c5462d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3faf9ec3dc6548bd0ec0f656a91d9b8f"><td class="memItemLeft" align="right" valign="top"><a id="a3faf9ec3dc6548bd0ec0f656a91d9b8f"></a>
<a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a3faf9ec3dc6548bd0ec0f656a91d9b8f">NextAcquire</a></td></tr>
<tr class="memdesc:a3faf9ec3dc6548bd0ec0f656a91d9b8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">The next link on the Acquire list. <br /></td></tr>
<tr class="separator:a3faf9ec3dc6548bd0ec0f656a91d9b8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99d906c6fe7507d8452fa4566377d2eb"><td class="memItemLeft" align="right" valign="top"><a id="a99d906c6fe7507d8452fa4566377d2eb"></a>
Queue *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a99d906c6fe7507d8452fa4566377d2eb">OwnerQ</a></td></tr>
<tr class="memdesc:a99d906c6fe7507d8452fa4566377d2eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">The Queue with which this worker is associated. <br /></td></tr>
<tr class="separator:a99d906c6fe7507d8452fa4566377d2eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7379b6d0158359d208d3793490cb445c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquireStatus.xhtml">pkgAcquireStatus</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c">Log</a></td></tr>
<tr class="memdesc:a7379b6d0158359d208d3793490cb445c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The download progress indicator to which progress messages should be sent.  <a href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c">More...</a><br /></td></tr>
<tr class="separator:a7379b6d0158359d208d3793490cb445c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33b828cdf6b336e68c51bb8e068e1297"><td class="memItemLeft" align="right" valign="top"><a id="a33b828cdf6b336e68c51bb8e068e1297"></a>
<a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297">Config</a></td></tr>
<tr class="memdesc:a33b828cdf6b336e68c51bb8e068e1297"><td class="mdescLeft">&#160;</td><td class="mdescRight">The configuration of this method. On startup, the target of this pointer is filled in with basic data about the method, as reported by the worker. <br /></td></tr>
<tr class="separator:a33b828cdf6b336e68c51bb8e068e1297"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a006a979c4801f6b6ceb33cb3acd6dc89"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a006a979c4801f6b6ceb33cb3acd6dc89">Access</a></td></tr>
<tr class="memdesc:a006a979c4801f6b6ceb33cb3acd6dc89"><td class="mdescLeft">&#160;</td><td class="mdescRight">The access method to be used by this worker.  <a href="classpkgAcquire.xhtml#a006a979c4801f6b6ceb33cb3acd6dc89">More...</a><br /></td></tr>
<tr class="separator:a006a979c4801f6b6ceb33cb3acd6dc89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a593a34f5ed2b53f33f69c4f17aa836eb"><td class="memItemLeft" align="right" valign="top"><a id="a593a34f5ed2b53f33f69c4f17aa836eb"></a>
pid_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a593a34f5ed2b53f33f69c4f17aa836eb">Process</a></td></tr>
<tr class="memdesc:a593a34f5ed2b53f33f69c4f17aa836eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">The PID of the subprocess. <br /></td></tr>
<tr class="separator:a593a34f5ed2b53f33f69c4f17aa836eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eb3145b965a64b578db347d1bae648b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a2eb3145b965a64b578db347d1bae648b">InFd</a></td></tr>
<tr class="memdesc:a2eb3145b965a64b578db347d1bae648b"><td class="mdescLeft">&#160;</td><td class="mdescRight">A file descriptor connected to the standard output of the subprocess.  <a href="classpkgAcquire.xhtml#a2eb3145b965a64b578db347d1bae648b">More...</a><br /></td></tr>
<tr class="separator:a2eb3145b965a64b578db347d1bae648b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2679e54f43d436f88045350be6fb2ab"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#af2679e54f43d436f88045350be6fb2ab">OutFd</a></td></tr>
<tr class="memdesc:af2679e54f43d436f88045350be6fb2ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">A file descriptor connected to the standard input of the subprocess.  <a href="classpkgAcquire.xhtml#af2679e54f43d436f88045350be6fb2ab">More...</a><br /></td></tr>
<tr class="separator:af2679e54f43d436f88045350be6fb2ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c248ae34ac80ca11a173980d49f991"><td class="memItemLeft" align="right" valign="top"><a id="ad7c248ae34ac80ca11a173980d49f991"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ad7c248ae34ac80ca11a173980d49f991">PrivSepSocketFd</a></td></tr>
<tr class="memdesc:ad7c248ae34ac80ca11a173980d49f991"><td class="mdescLeft">&#160;</td><td class="mdescRight">The socket to send SCM_RIGHTS message through. <br /></td></tr>
<tr class="separator:ad7c248ae34ac80ca11a173980d49f991"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fa9fc8e728a455a1cd4e76a8dd86411"><td class="memItemLeft" align="right" valign="top"><a id="a2fa9fc8e728a455a1cd4e76a8dd86411"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>PrivSepSocketFdChild</b></td></tr>
<tr class="separator:a2fa9fc8e728a455a1cd4e76a8dd86411"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a849bc65c54e1bcbe8a7f053ce2cec672"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a849bc65c54e1bcbe8a7f053ce2cec672">InReady</a></td></tr>
<tr class="memdesc:a849bc65c54e1bcbe8a7f053ce2cec672"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set to <b>true</b> if the worker is in a state in which it might generate data or command responses.  <a href="classpkgAcquire.xhtml#a849bc65c54e1bcbe8a7f053ce2cec672">More...</a><br /></td></tr>
<tr class="separator:a849bc65c54e1bcbe8a7f053ce2cec672"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b8717fb6d062212c251900cee4e6004"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a0b8717fb6d062212c251900cee4e6004">OutReady</a></td></tr>
<tr class="memdesc:a0b8717fb6d062212c251900cee4e6004"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set to <b>true</b> if the worker is in a state in which it is legal to send commands to it.  <a href="classpkgAcquire.xhtml#a0b8717fb6d062212c251900cee4e6004">More...</a><br /></td></tr>
<tr class="separator:a0b8717fb6d062212c251900cee4e6004"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdf3472c9b75f32dae88032d42d1cb6c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#acdf3472c9b75f32dae88032d42d1cb6c">Debug</a></td></tr>
<tr class="separator:acdf3472c9b75f32dae88032d42d1cb6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4a47a4aae6979a5a870f4fd7953a8d6"><td class="memItemLeft" align="right" valign="top"><a id="ad4a47a4aae6979a5a870f4fd7953a8d6"></a>
std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ad4a47a4aae6979a5a870f4fd7953a8d6">MessageQueue</a></td></tr>
<tr class="memdesc:ad4a47a4aae6979a5a870f4fd7953a8d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The raw text values of messages received from the worker, in sequence. <br /></td></tr>
<tr class="separator:ad4a47a4aae6979a5a870f4fd7953a8d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27ee7762ef1caaf3ec8c3598c15e7886"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a27ee7762ef1caaf3ec8c3598c15e7886">OutQueue</a></td></tr>
<tr class="memdesc:a27ee7762ef1caaf3ec8c3598c15e7886"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffers pending writes to the subprocess.  <a href="classpkgAcquire.xhtml#a27ee7762ef1caaf3ec8c3598c15e7886">More...</a><br /></td></tr>
<tr class="separator:a27ee7762ef1caaf3ec8c3598c15e7886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8089d1f0a2e10710afe1d1488a1f1f72"><td class="memItemLeft" align="right" valign="top">std::vector&lt; Item * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a8089d1f0a2e10710afe1d1488a1f1f72">Items</a></td></tr>
<tr class="memdesc:a8089d1f0a2e10710afe1d1488a1f1f72"><td class="mdescLeft">&#160;</td><td class="mdescRight">A list of items to download.  <a href="classpkgAcquire.xhtml#a8089d1f0a2e10710afe1d1488a1f1f72">More...</a><br /></td></tr>
<tr class="separator:a8089d1f0a2e10710afe1d1488a1f1f72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e42b66f176afafc1c75e78289e80e76"><td class="memItemLeft" align="right" valign="top">Queue *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a9e42b66f176afafc1c75e78289e80e76">Queues</a></td></tr>
<tr class="memdesc:a9e42b66f176afafc1c75e78289e80e76"><td class="mdescLeft">&#160;</td><td class="mdescRight">The head of the list of active queues.  <a href="classpkgAcquire.xhtml#a9e42b66f176afafc1c75e78289e80e76">More...</a><br /></td></tr>
<tr class="separator:a9e42b66f176afafc1c75e78289e80e76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfb69296d9a50a92927df7c30e56be2e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#adfb69296d9a50a92927df7c30e56be2e">Workers</a></td></tr>
<tr class="memdesc:adfb69296d9a50a92927df7c30e56be2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The head of the list of active workers.  <a href="classpkgAcquire.xhtml#adfb69296d9a50a92927df7c30e56be2e">More...</a><br /></td></tr>
<tr class="separator:adfb69296d9a50a92927df7c30e56be2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab04e9ee398f825f50e4f1ea7eaf37f77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ab04e9ee398f825f50e4f1ea7eaf37f77">Configs</a></td></tr>
<tr class="memdesc:ab04e9ee398f825f50e4f1ea7eaf37f77"><td class="mdescLeft">&#160;</td><td class="mdescRight">The head of the list of acquire method configurations.  <a href="classpkgAcquire.xhtml#ab04e9ee398f825f50e4f1ea7eaf37f77">More...</a><br /></td></tr>
<tr class="separator:ab04e9ee398f825f50e4f1ea7eaf37f77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc16dbbd88d0020e00b57ef0dce9471a"><td class="memItemLeft" align="right" valign="top"><a id="abc16dbbd88d0020e00b57ef0dce9471a"></a>
unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#abc16dbbd88d0020e00b57ef0dce9471a">ToFetch</a></td></tr>
<tr class="memdesc:abc16dbbd88d0020e00b57ef0dce9471a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of files which are to be fetched. <br /></td></tr>
<tr class="separator:abc16dbbd88d0020e00b57ef0dce9471a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0f098bf447e949411189251d6b56692"><td class="memItemLeft" align="right" valign="top"><a id="ae0f098bf447e949411189251d6b56692"></a>
enum <a class="el" href="classpkgAcquire.xhtml#aedefc2c8ff9f8aa323d296085f969555">pkgAcquire::QueueStrategy</a>&#160;</td><td class="memItemRight" valign="bottom"><b>QueueMode</b></td></tr>
<tr class="separator:ae0f098bf447e949411189251d6b56692"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25c57bcf8cdbeb6439120a35d90366d8"><td class="memItemLeft" align="right" valign="top"><a id="a25c57bcf8cdbeb6439120a35d90366d8"></a>
bool const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a25c57bcf8cdbeb6439120a35d90366d8">Debug</a></td></tr>
<tr class="memdesc:a25c57bcf8cdbeb6439120a35d90366d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, debugging information will be dumped to std::clog. <br /></td></tr>
<tr class="separator:a25c57bcf8cdbeb6439120a35d90366d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2e97f1ebd7c956e2c68d1209eabd4b1"><td class="memItemLeft" align="right" valign="top"><a id="ae2e97f1ebd7c956e2c68d1209eabd4b1"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ae2e97f1ebd7c956e2c68d1209eabd4b1">Running</a></td></tr>
<tr class="memdesc:ae2e97f1ebd7c956e2c68d1209eabd4b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, a download is currently in progress. <br /></td></tr>
<tr class="separator:ae2e97f1ebd7c956e2c68d1209eabd4b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc852f586959ce13117d737cf3f14899"><td class="memItemLeft" align="right" valign="top"><a id="adc852f586959ce13117d737cf3f14899"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#adc852f586959ce13117d737cf3f14899">Name</a></td></tr>
<tr class="memdesc:adc852f586959ce13117d737cf3f14899"><td class="mdescLeft">&#160;</td><td class="mdescRight">The name of this queue. <br /></td></tr>
<tr class="separator:adc852f586959ce13117d737cf3f14899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f4e8b582eeece0747d3fee5858b1a27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a2f4e8b582eeece0747d3fee5858b1a27">Items</a></td></tr>
<tr class="memdesc:a2f4e8b582eeece0747d3fee5858b1a27"><td class="mdescLeft">&#160;</td><td class="mdescRight">The head of the list of items contained in this queue.  <a href="classpkgAcquire.xhtml#a2f4e8b582eeece0747d3fee5858b1a27">More...</a><br /></td></tr>
<tr class="separator:a2f4e8b582eeece0747d3fee5858b1a27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae49de4816f8591cf1ccb70329d4dcb8c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">pkgAcquire::Worker</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#ae49de4816f8591cf1ccb70329d4dcb8c">Workers</a></td></tr>
<tr class="memdesc:ae49de4816f8591cf1ccb70329d4dcb8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The head of the list of workers associated with this queue.  <a href="classpkgAcquire.xhtml#ae49de4816f8591cf1ccb70329d4dcb8c">More...</a><br /></td></tr>
<tr class="separator:ae49de4816f8591cf1ccb70329d4dcb8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76f8c48f1e7f5669a16a9d5e863edd10"><td class="memItemLeft" align="right" valign="top"><a id="a76f8c48f1e7f5669a16a9d5e863edd10"></a>
<a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a76f8c48f1e7f5669a16a9d5e863edd10">Owner</a></td></tr>
<tr class="memdesc:a76f8c48f1e7f5669a16a9d5e863edd10"><td class="mdescLeft">&#160;</td><td class="mdescRight">the download scheduler with which this queue is associated. <br /></td></tr>
<tr class="separator:a76f8c48f1e7f5669a16a9d5e863edd10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9221078b3948388493f1b8360589b6e1"><td class="memItemLeft" align="right" valign="top"><a id="a9221078b3948388493f1b8360589b6e1"></a>
signed long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#a9221078b3948388493f1b8360589b6e1">PipeDepth</a></td></tr>
<tr class="memdesc:a9221078b3948388493f1b8360589b6e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of entries in this queue that are currently being downloaded. <br /></td></tr>
<tr class="separator:a9221078b3948388493f1b8360589b6e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe522e42f9b11c8444f4a35369b8b16c"><td class="memItemLeft" align="right" valign="top"><a id="afe522e42f9b11c8444f4a35369b8b16c"></a>
unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquire.xhtml#afe522e42f9b11c8444f4a35369b8b16c">MaxPipeDepth</a></td></tr>
<tr class="memdesc:afe522e42f9b11c8444f4a35369b8b16c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum number of entries that this queue will attempt to download at once. <br /></td></tr>
<tr class="separator:afe522e42f9b11c8444f4a35369b8b16c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a99ddaa5d86d35ffcd1bee6fb7bb64641"><td class="memItemLeft" align="right" valign="top"><a id="a99ddaa5d86d35ffcd1bee6fb7bb64641"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>pkgAcqMetaBase</b></td></tr>
<tr class="separator:a99ddaa5d86d35ffcd1bee6fb7bb64641"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77787be5d1f884fd07ded8b6a25a7865"><td class="memItemLeft" align="right" valign="top"><a id="a77787be5d1f884fd07ded8b6a25a7865"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>pkgAcqMetaClearSig</b></td></tr>
<tr class="separator:a77787be5d1f884fd07ded8b6a25a7865"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a132fca995c7138f1e5171c60ac3fa3e3"><td class="memItemLeft" align="right" valign="top"><a id="a132fca995c7138f1e5171c60ac3fa3e3"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Queue</b></td></tr>
<tr class="separator:a132fca995c7138f1e5171c60ac3fa3e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad85754f188b769ff61150eaf36106c4"><td class="memItemLeft" align="right" valign="top"><a id="aad85754f188b769ff61150eaf36106c4"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Item</b></td></tr>
<tr class="separator:aad85754f188b769ff61150eaf36106c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f3074688254f637a6916a11ffdf045e"><td class="memItemLeft" align="right" valign="top"><a id="a8f3074688254f637a6916a11ffdf045e"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>pkgAcquire::UriIterator</b></td></tr>
<tr class="separator:a8f3074688254f637a6916a11ffdf045e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98fe6798c77be5d7d2d21d21b650d860"><td class="memItemLeft" align="right" valign="top"><a id="a98fe6798c77be5d7d2d21d21b650d860"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>pkgAcquire::Worker</b></td></tr>
<tr class="separator:a98fe6798c77be5d7d2d21d21b650d860"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Represents the process by which a <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> object should retrieve a file or a collection of files. </p>
<p>Information about the properties of a single acquire method. {{{.</p>
<p>Iterates over all the URIs being fetched by a <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> object. {{{.</p>
<p>A single download queue in a <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> object. {{{.</p>
<p>Represents a single download source from which an item should be downloaded.</p>
<p>The core download scheduler. {{{.</p>
<p>A fetch subprocess.</p>
<p>By convention, Item subclasses should insert themselves into the acquire queue when they are created by calling <a class="el" href="classpkgAcquire.xhtml#a3796f802e2bbb94ea4d215acb092e1de" title="Insert this item into its owner&#39;s queue.">QueueURI()</a>, and remove themselves by calling <a class="el" href="classpkgAcquire.xhtml#a717924cd0aecc1908058a6ed7ffd31f3" title="Remove this item from its owner&#39;s queue.">Dequeue()</a> when either <a class="el" href="classpkgAcquire.xhtml#a17d459e7612a763c8eb2aa4aae9a6418" title="Invoked by the acquire worker when the object was fetched successfully.">Done()</a> or <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820a1f506c828f4945d6b5a7bf71445f7d54" title="Some files failed to download.">Failed()</a> is invoked. Item objects are also responsible for notifying the download progress indicator (accessible via <a class="el" href="classpkgAcquire.xhtml#ac0b2d9156c461297e38e9f3fdf2771b3" title="The acquire object with which this item is associated.">Owner</a>-&gt;Log) of their status.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a></dd></dl>
<p>A worker process is responsible for one stage of the fetch. This class encapsulates the communications protocol between the master process and the worker, from the master end.</p>
<p>Each worker is intrinsically placed on two linked lists. The Queue list (maintained in the <a class="el" href="classpkgAcquire.xhtml#a70b012fdfb38bfe94b52924d45c5462d" title="The next link on the Queue list.">NextQueue</a> variable) is maintained by the pkgAcquire::Queue class; it represents the set of workers assigned to a particular queue. The Acquire list (maintained in the <a class="el" href="classpkgAcquire.xhtml#a3faf9ec3dc6548bd0ec0f656a91d9b8f" title="The next link on the Acquire list.">NextAcquire</a> variable) is maintained by the <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> class; it represents the set of active workers for a particular <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> object.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000009">Todo:</a></b></dt><dd>Like everything else in the Acquire system, this has way too many protected items.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcqMethod.xhtml">pkgAcqMethod</a>, pkgAcquire::Item, <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a></dd></dl>
<p>This class represents an ongoing download. It manages the lists of active and pending downloads and handles setting up and tearing down download-related structures.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000017">Todo:</a></b></dt><dd>Why all the protected data items and methods? </dd></dl>
<p>An item may have several associated ItemDescs over its lifetime.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000018">Todo:</a></b></dt><dd>Why so many protected values? </dd></dl>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="abd4abbf0fe1f8b5299675b590315b4b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd4abbf0fe1f8b5299675b590315b4b9">&#9670;&nbsp;</a></span>ItemState</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classpkgAcquire.xhtml#abd4abbf0fe1f8b5299675b590315b4b9">ItemState</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The current status of this item. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="abd4abbf0fe1f8b5299675b590315b4b9aafe4203baf90d29ba26cdca204795329"></a>StatIdle&#160;</td><td class="fielddoc"><p>The item is waiting to be downloaded. </p>
</td></tr>
<tr><td class="fieldname"><a id="abd4abbf0fe1f8b5299675b590315b4b9a2438768d0d80b2bcbf37ffa6bae5d445"></a>StatFetching&#160;</td><td class="fielddoc"><p>The item is currently being downloaded. </p>
</td></tr>
<tr><td class="fieldname"><a id="abd4abbf0fe1f8b5299675b590315b4b9a875850b5de48d7a0ae71c47fbbef4832"></a>StatDone&#160;</td><td class="fielddoc"><p>The item has been successfully downloaded. </p>
</td></tr>
<tr><td class="fieldname"><a id="abd4abbf0fe1f8b5299675b590315b4b9a8523989e15c68262bb5469f61fbe72ba"></a>StatError&#160;</td><td class="fielddoc"><p>An error was encountered while downloading this item. </p>
</td></tr>
<tr><td class="fieldname"><a id="abd4abbf0fe1f8b5299675b590315b4b9a19728efb594f55c57218604ad77b25db"></a>StatAuthError&#160;</td><td class="fielddoc"><p>The item was downloaded but its authenticity could not be verified. </p>
</td></tr>
<tr><td class="fieldname"><a id="abd4abbf0fe1f8b5299675b590315b4b9a29a70e77eba9ee9773d3e6ac26348820"></a>StatTransientNetworkError&#160;</td><td class="fielddoc"><p>The item was could not be downloaded because of a transient network error (e.g. network down) </p>
</td></tr>
</table>

</div>
</div>
<a id="aedefc2c8ff9f8aa323d296085f969555"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedefc2c8ff9f8aa323d296085f969555">&#9670;&nbsp;</a></span>QueueStrategy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classpkgAcquire.xhtml#aedefc2c8ff9f8aa323d296085f969555">QueueStrategy</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Represents the queuing strategy for remote URIs. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aedefc2c8ff9f8aa323d296085f969555ad2a3b31a571e30aeeb9d40666f04b902"></a>QueueHost&#160;</td><td class="fielddoc"><p>Generate one queue for each protocol/host combination; downloads from multiple hosts can proceed in parallel. </p>
</td></tr>
<tr><td class="fieldname"><a id="aedefc2c8ff9f8aa323d296085f969555adfbf4cb90b4209e5981227965246d8f0"></a>QueueAccess&#160;</td><td class="fielddoc"><p>Generate a single queue for each protocol; serialize downloads from multiple hosts. </p>
</td></tr>
</table>

</div>
</div>
<a id="ad45c2d8ba7020a5b66bb0563cc773820"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad45c2d8ba7020a5b66bb0563cc773820">&#9670;&nbsp;</a></span>RunResult</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820">RunResult</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Provides information on how a download terminated. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad45c2d8ba7020a5b66bb0563cc773820a45a66636ecd16b869e4aadd738813583"></a>Continue&#160;</td><td class="fielddoc"><p>All files were fetched successfully. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad45c2d8ba7020a5b66bb0563cc773820a1f506c828f4945d6b5a7bf71445f7d54"></a>Failed&#160;</td><td class="fielddoc"><p>Some files failed to download. </p>
</td></tr>
<tr><td class="fieldname"><a id="ad45c2d8ba7020a5b66bb0563cc773820ad1e026338c0200900908a176717682b8"></a>Cancelled&#160;</td><td class="fielddoc"><p>The download was cancelled by the user (i.e., <a class="el" href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c" title="The download progress indicator to which progress messages should be sent.">Log</a>'s <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">pkgAcquireStatus::Pulse()</a> method returned <b>false</b>). </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ae505e0fb7b5ba6f2a2e42eab07a1d4ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae505e0fb7b5ba6f2a2e42eab07a1d4ec">&#9670;&nbsp;</a></span>~Worker()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clean up this worker. </p>
<p>Closes the file descriptors; if MethodConfig::NeedsCleanup is <b>false</b>, also rudely interrupts the worker with a SIGINT. </p>

</div>
</div>
<a id="a63b3097945b28966895045ffeaeb658c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63b3097945b28966895045ffeaeb658c">&#9670;&nbsp;</a></span>~pkgAcquire()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destroy this <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> object. </p>
<p>Destroys all queue, method, and item objects associated with this download. </p>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#ab04e9ee398f825f50e4f1ea7eaf37f77">Configs</a>, <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig()</a>, and <a class="el" href="classpkgAcquire.xhtml#ac5f038c2b480cf9ef5e19e3eba8dbaf9">Shutdown()</a>.</p>

</div>
</div>
<a id="ab9b9b24243b14b459eeae65f3b0c283a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9b9b24243b14b459eeae65f3b0c283a">&#9670;&nbsp;</a></span>~Queue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~Queue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Shut down all the worker processes associated with this queue and empty the queue. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="abf4fe627ab803887ecd2a8af30f17147"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf4fe627ab803887ecd2a8af30f17147">&#9670;&nbsp;</a></span>Bump() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Bump </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check for idle queues with ready-to-fetch items. </p>
<p>Called by pkgAcquire::Queue::Done each time an item is dequeued but remains on some queues; i.e., another queue should start fetching it. </p>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#a9e42b66f176afafc1c75e78289e80e76">Queues</a>.</p>

</div>
</div>
<a id="abf4fe627ab803887ecd2a8af30f17147"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf4fe627ab803887ecd2a8af30f17147">&#9670;&nbsp;</a></span>Bump() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Bump </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check for items that could be enqueued. </p>
<p>Call this after an item placed in multiple queues has gone from the pkgAcquire::Item::StatFetching state to the pkgAcquire::Item::StatIdle state, to possibly refill an empty queue. This is an alias for <a class="el" href="classpkgAcquire.xhtml#a5b2dd956b1adc90b13d47e26121d5486" title="Send idle items to the worker process.">Cycle()</a>.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000027">Todo:</a></b></dt><dd>Why both this and <a class="el" href="classpkgAcquire.xhtml#a5b2dd956b1adc90b13d47e26121d5486" title="Send idle items to the worker process.">Cycle()</a>? Are they expected to be different someday? </dd></dl>

</div>
</div>
<a id="aa3de23b9c5a564121a667dd9b392e158"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3de23b9c5a564121a667dd9b392e158">&#9670;&nbsp;</a></span>Capabilities()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Capabilities </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>Message</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Handle a 100 Capabilities response from the subprocess. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Message</td><td>the raw text of the message from the subprocess.</td></tr>
  </table>
  </dd>
</dl>
<p>The message will be parsed and its contents used to fill <a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297" title="The configuration of this method. On startup, the target of this pointer is filled in with basic data...">Config</a>. If <a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297" title="The configuration of this method. On startup, the target of this pointer is filled in with basic data...">Config</a> is NULL, this routine is a NOP.</p>
<dl class="section return"><dt>Returns</dt><dd><b>true</b>. </dd></dl>

</div>
</div>
<a id="aae5af42b94e25de2d233e1bfa6b0688c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae5af42b94e25de2d233e1bfa6b0688c">&#9670;&nbsp;</a></span>Clean()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Clean </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>Dir</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deletes each entry in the given directory that is not being downloaded by this object. For instance, when downloading new list files, calling <a class="el" href="classpkgAcquire.xhtml#aae5af42b94e25de2d233e1bfa6b0688c">Clean()</a> will delete the old ones.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Dir</td><td>The directory to be cleaned out.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if the directory exists and is readable. </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#a8089d1f0a2e10710afe1d1488a1f1f72">Items</a>.</p>

</div>
</div>
<a id="a9af72b216eb95e320f0f261d9497c5c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9af72b216eb95e320f0f261d9497c5c1">&#9670;&nbsp;</a></span>Construct()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Construct </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Common code for the constructor. </p>
<p>Initializes NextQueue and NextAcquire to NULL; Process, InFd, and OutFd to -1, OutReady and InReady to <b>false</b>, and Debug from _config. </p>

</div>
</div>
<a id="a65c34bf145cef32f615c0fd7be757a36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65c34bf145cef32f615c0fd7be757a36">&#9670;&nbsp;</a></span>Custom600Headers()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string Custom600Headers </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Custom headers to be sent to the fetch process. </p>
<dl class="section return"><dt>Returns</dt><dd>a string containing RFC822-style headers that are to be inserted into the 600 <a class="el" href="classURI.xhtml">URI</a> Acquire message sent to the fetch subprocess. The headers are inserted after a newline-less line, so they should (if nonempty) have a leading newline and no trailing newline. </dd></dl>

</div>
</div>
<a id="a5b2dd956b1adc90b13d47e26121d5486"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b2dd956b1adc90b13d47e26121d5486">&#9670;&nbsp;</a></span>Cycle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Cycle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send idle items to the worker process. </p>
<p>Fills up the pipeline by inserting idle items into the worker's queue. </p>

</div>
</div>
<a id="a875744fa53902d8821377a9222166a47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a875744fa53902d8821377a9222166a47">&#9670;&nbsp;</a></span>Dequeue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Dequeue </td>
          <td>(</td>
          <td class="paramtype">Item *&#160;</td>
          <td class="paramname"><em>Owner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove all fetch requests for the given item from this queue. </p>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if at least one request was removed from the queue. </dd></dl>

</div>
</div>
<a id="ad340ff53c2faad023e3f11627e91c5b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad340ff53c2faad023e3f11627e91c5b6">&#9670;&nbsp;</a></span>DescURI()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string DescURI </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A "descriptive" URI-like string. </p>
<dl class="section return"><dt>Returns</dt><dd>a <a class="el" href="classURI.xhtml">URI</a> that should be used to describe what is being fetched. </dd></dl>

</div>
</div>
<a id="a17d459e7612a763c8eb2aa4aae9a6418"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17d459e7612a763c8eb2aa4aae9a6418">&#9670;&nbsp;</a></span>Done()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Done </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>Message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classHashStringList.xhtml">HashStringList</a> const &amp;&#160;</td>
          <td class="paramname"><em>Hashes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">pkgAcquire::MethodConfig</a> const *const&#160;</td>
          <td class="paramname"><em>Cnf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked by the acquire worker when the object was fetched successfully. </p>
<p>Note that the object might <em>not</em> have been written to DestFile; check for the presence of an Alt-Filename entry in Message to find the file to which it was really written.</p>
<p>Done is often used to switch from one stage of the processing to the next (e.g. fetching, unpacking, copying). It is one branch of the continuation of the fetch process.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Message</td><td>Data from the acquire method. Use LookupTag() to parse it. </td></tr>
    <tr><td class="paramname"><a class="el" href="classHashes.xhtml">Hashes</a></td><td>The HashSums of the object that was fetched. </td></tr>
    <tr><td class="paramname">Cnf</td><td>The method via which the object was fetched.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcqMethod.xhtml">pkgAcqMethod</a> </dd></dl>

</div>
</div>
<a id="adff4865b0b932d7c8dae0aee44006c13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adff4865b0b932d7c8dae0aee44006c13">&#9670;&nbsp;</a></span>Enqueue() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Enqueue </td>
          <td>(</td>
          <td class="paramtype">ItemDesc &amp;&#160;</td>
          <td class="paramname"><em>Item</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Insert the given fetch request into the appropriate queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Item</td><td>The <a class="el" href="classURI.xhtml">URI</a> to download and the item to download it for. Copied by value into the queue; no reference to Item is retained. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297">Config</a>, <a class="el" href="classpkgAcquire.xhtml#acdf3472c9b75f32dae88032d42d1cb6c">Debug</a>, <a class="el" href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c">Log</a>, <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig()</a>, <a class="el" href="classpkgAcquire.xhtml#adc852f586959ce13117d737cf3f14899">Name</a>, <a class="el" href="classpkgAcquire.xhtml#a67678d9efe826f5824f2e8fc0e812338">QueueName()</a>, <a class="el" href="classpkgAcquire.xhtml#a9e42b66f176afafc1c75e78289e80e76">Queues</a>, <a class="el" href="classpkgAcquire.xhtml#ae2e97f1ebd7c956e2c68d1209eabd4b1">Running</a>, and <a class="el" href="classpkgAcquire.xhtml#abc16dbbd88d0020e00b57ef0dce9471a">ToFetch</a>.</p>

</div>
</div>
<a id="a2af342681f220fe125323f83c45dd074"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2af342681f220fe125323f83c45dd074">&#9670;&nbsp;</a></span>Enqueue() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Enqueue </td>
          <td>(</td>
          <td class="paramtype">ItemDesc &amp;&#160;</td>
          <td class="paramname"><em>Item</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insert the given fetch request into this queue. </p>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if the queuing was successful. May return <b>false</b> if the Item is already in the queue </dd></dl>

</div>
</div>
<a id="a8798e6e4055734c7f1e234ef4acd9371"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8798e6e4055734c7f1e234ef4acd9371">&#9670;&nbsp;</a></span>Failed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Failed </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>Message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">pkgAcquire::MethodConfig</a> const *const&#160;</td>
          <td class="paramname"><em>Cnf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked by the acquire worker when the object couldn't be fetched. </p>
<p>This is a branch of the continuation of the fetch process.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Message</td><td>An RFC822-formatted message from the acquire method describing what went wrong. Use LookupTag() to parse it.</td></tr>
    <tr><td class="paramname">Cnf</td><td>The method via which the worker tried to fetch this object.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcqMethod.xhtml">pkgAcqMethod</a> </dd></dl>

</div>
</div>
<a id="a08457b069b64cfcb38ba4ab429baedef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08457b069b64cfcb38ba4ab429baedef">&#9670;&nbsp;</a></span>FetchNeeded()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">APT_PURE unsigned long long FetchNeeded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the size in bytes of all non-local items included in this download. </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#af54b860e41ab56ec44a007f3542dbe82">ItemsBegin()</a>, and <a class="el" href="classpkgAcquire.xhtml#a06f41681fab7fd54db89fa55c09fac43">ItemsEnd()</a>.</p>

</div>
</div>
<a id="a8f9ed1e8cd6cec8f8c325d05207c8c48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f9ed1e8cd6cec8f8c325d05207c8c48">&#9670;&nbsp;</a></span>FindItem()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a>* FindItem </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>URI</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">pkgAcquire::Worker</a> *&#160;</td>
          <td class="paramname"><em>Owner</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Locate an item in this queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname"><a class="el" href="classURI.xhtml">URI</a></td><td>A <a class="el" href="classURI.xhtml">URI</a> to match against. </td></tr>
    <tr><td class="paramname">Owner</td><td>A <a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c" title="Create a new Worker to download files.">pkgAcquire::Worker</a> to match against.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the first item in the queue whose <a class="el" href="classURI.xhtml">URI</a> is <a class="el" href="classURI.xhtml">URI</a> and that is being downloaded by <a class="el" href="classpkgAcquire.xhtml#ac0b2d9156c461297e38e9f3fdf2771b3" title="The acquire object with which this item is associated.">Owner</a>. </dd></dl>

</div>
</div>
<a id="a8b88e4cc12a0a74aad2b80e5313859b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b88e4cc12a0a74aad2b80e5313859b3">&#9670;&nbsp;</a></span>GetConf()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a>* GetConf </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The fetch method configuration. </dd></dl>

</div>
</div>
<a id="ad698ed345d50318b53f3cc3ae43190db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad698ed345d50318b53f3cc3ae43190db">&#9670;&nbsp;</a></span>GetConfig()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">pkgAcquire::MethodConfig</a> * GetConfig </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>Access</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve information about a fetch method by name. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Access</td><td>The name of the method to look up.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the method whose name is Access, or <b>NULL</b> if no such method exists. </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#a006a979c4801f6b6ceb33cb3acd6dc89">Access</a>, <a class="el" href="classpkgAcquire.xhtml#ab04e9ee398f825f50e4f1ea7eaf37f77">Configs</a>, <a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig()</a>, and <a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker()</a>.</p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#a67678d9efe826f5824f2e8fc0e812338">QueueName()</a>.</p>

</div>
</div>
<a id="a908a8a85047dd5a135a84be0f3bc1baa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a908a8a85047dd5a135a84be0f3bc1baa">&#9670;&nbsp;</a></span>GetExpectedHashes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classHashStringList.xhtml">HashStringList</a> GetExpectedHashes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>HashSums the DestFile is supposed to have in this stage </dd></dl>

</div>
</div>
<a id="a9d019487d6dfd10c9f4801c55a2a65d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d019487d6dfd10c9f4801c55a2a65d2">&#9670;&nbsp;</a></span>GetLock()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetLock </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>Lock</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>acquire lock and perform directory setup </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Lock</td><td>defines a lock file that should be acquired to ensure only one Acquire class is in action at the time or an empty string if no lock file should be used. If set also all needed directories will be created and setup. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af5b29a075a3faef3bc2b34663801a256"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5b29a075a3faef3bc2b34663801a256">&#9670;&nbsp;</a></span>GetOwner()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a>* GetOwner </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the acquire process with which this item is associated. </dd></dl>

</div>
</div>
<a id="a1136af95870160bb254473a2f7e59a86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1136af95870160bb254473a2f7e59a86">&#9670;&nbsp;</a></span>HashesRequired()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool HashesRequired </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if having no hashes is a hard failure or not</dd></dl>
<p>Idealy this is always <b>true</b> for every subclass, but thanks to historical grow we don't have hashes for all files in all cases in all steps, so it is slightly more complicated than it should be. </p>

</div>
</div>
<a id="a237fd00f8b6cfdd3cdcf1815846149e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a237fd00f8b6cfdd3cdcf1815846149e0">&#9670;&nbsp;</a></span>HashSum()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string HashSum </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the 'best' hash for display proposes like &ndash;print-uris </dd></dl>

</div>
</div>
<a id="a5a3e1a57c0fe730162df8a50677ae513"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a3e1a57c0fe730162df8a50677ae513">&#9670;&nbsp;</a></span>InFdReady()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool InFdReady </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read and dispatch any pending messages from the subprocess. </p>
<dl class="section return"><dt>Returns</dt><dd><b>false</b> if the subprocess died unexpectedly while a message was being transmitted. </dd></dl>

</div>
</div>
<a id="abbd5b67ba93cd4d1d0d19ad5a37704a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbd5b67ba93cd4d1d0d19ad5a37704a5">&#9670;&nbsp;</a></span>IsTrusted()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsTrusted </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if this object is being fetched from a trusted source. </dd></dl>

</div>
</div>
<a id="aa391d1c541349a2c9d0968ef8660b45e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa391d1c541349a2c9d0968ef8660b45e">&#9670;&nbsp;</a></span>Item()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Item </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *const&#160;</td>
          <td class="paramname"><em>Owner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialize an item. </p>
<p>Adds the item to the list of items known to the acquire process, but does not place it into any fetch queues (you must manually invoke <a class="el" href="classpkgAcquire.xhtml#a3796f802e2bbb94ea4d215acb092e1de" title="Insert this item into its owner&#39;s queue.">QueueURI()</a> to do so).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Owner</td><td>The new owner of this item. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6a6deb8c5e68383147e31b24690ea0fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a6deb8c5e68383147e31b24690ea0fd">&#9670;&nbsp;</a></span>ItemDone() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ItemDone </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked when a fetch job is completed, either successfully or unsuccessfully. </p>
<p>Resets the status information for the worker process. </p>

</div>
</div>
<a id="a6dc41a112e43fd568e47e7a9c682112c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dc41a112e43fd568e47e7a9c682112c">&#9670;&nbsp;</a></span>ItemDone() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ItemDone </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a> *&#160;</td>
          <td class="paramname"><em>Itm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove the given item from this queue and set its state to pkgAcquire::Item::StatDone. </p>
<p>If this is the only queue containing the item, the item is also removed from the main queue by calling <a class="el" href="classpkgAcquire.xhtml#a717924cd0aecc1908058a6ed7ffd31f3" title="Remove this item from its owner&#39;s queue.">pkgAcquire::Dequeue</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Itm</td><td>The item to remove.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if no errors are encountered. </dd></dl>

</div>
</div>
<a id="a76f3403ec41517cce48d96a5b1f54e1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76f3403ec41517cce48d96a5b1f54e1e">&#9670;&nbsp;</a></span>ItemStart()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ItemStart </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a> *&#160;</td>
          <td class="paramname"><em>Itm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long long&#160;</td>
          <td class="paramname"><em>Size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Presumably this should start downloading an item?</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000026">Todo:</a></b></dt><dd>Unimplemented. Implement it or remove? </dd></dl>

</div>
</div>
<a id="a5fa3dc5431fbfcd2b5ceed5f97f1eb84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fa3dc5431fbfcd2b5ceed5f97f1eb84">&#9670;&nbsp;</a></span>MediaChange()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool MediaChange </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>Message</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Handle a 403 Media Change message. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Message</td><td>the raw text of the message; the Media field indicates what type of media should be changed, and the Drive field indicates where the media is located.</td></tr>
  </table>
  </dd>
</dl>
<p>Invokes pkgAcquireStatus::MediaChange(Media, Drive) to ask the user to swap disks; informs the subprocess of the result (via 603 Media Changed, with the Failed field set to <b>true</b> if the user cancelled the media change). </p>

</div>
</div>
<a id="a29c0cb60fa0c1e5f67d911bed92f2006"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29c0cb60fa0c1e5f67d911bed92f2006">&#9670;&nbsp;</a></span>MethodConfig()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MethodConfig </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set up the default method parameters. </p>
<p>All fields are initialized to NULL, "", or <b>false</b> as appropriate. </p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#adff4865b0b932d7c8dae0aee44006c13">Enqueue()</a>, <a class="el" href="classpkgAcquire.xhtml#ad698ed345d50318b53f3cc3ae43190db">GetConfig()</a>, and <a class="el" href="classpkgAcquire.xhtml#a63b3097945b28966895045ffeaeb658c">~pkgAcquire()</a>.</p>

</div>
</div>
<a id="a94fe52037e4594131495b1791d6654ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94fe52037e4594131495b1791d6654ea">&#9670;&nbsp;</a></span>MethodFailure()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool MethodFailure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked when the worked process dies unexpectedly. </p>
<p>Waits for the subprocess to terminate and generates an error if it terminated abnormally, then closes and blanks out all file descriptors. Discards all pending messages from the subprocess.</p>
<dl class="section return"><dt>Returns</dt><dd><b>false</b>. </dd></dl>

</div>
</div>
<a id="a2bd3e6488eaf8af11cedae06f7de9e2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bd3e6488eaf8af11cedae06f7de9e2c">&#9670;&nbsp;</a></span>OutFdReady()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OutFdReady </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Send any pending commands to the subprocess. </p>
<p>This method will fail if there is no pending output.</p>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if all commands were succeeded, <b>false</b> if an error occurred (in which case <a class="el" href="classpkgAcquire.xhtml#a94fe52037e4594131495b1791d6654ea" title="Invoked when the worked process dies unexpectedly.">MethodFailure()</a> will be invoked). </dd></dl>

</div>
</div>
<a id="af56f208869586464f3e478be784994a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af56f208869586464f3e478be784994a5">&#9670;&nbsp;</a></span>PartialPresent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">APT_PURE unsigned long long PartialPresent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the amount of data to be fetched that is already present on the filesystem. </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#af54b860e41ab56ec44a007f3542dbe82">ItemsBegin()</a>, and <a class="el" href="classpkgAcquire.xhtml#a06f41681fab7fd54db89fa55c09fac43">ItemsEnd()</a>.</p>

</div>
</div>
<a id="a97969ee86e84f640800a60dbc94e3ad7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97969ee86e84f640800a60dbc94e3ad7">&#9670;&nbsp;</a></span>Queue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Queue </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *const&#160;</td>
          <td class="paramname"><em>Owner</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new Queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the new queue. </td></tr>
    <tr><td class="paramname">Owner</td><td>The download process that owns the new queue. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a37fbf2dea83d49ebf053ecc76c5b39b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37fbf2dea83d49ebf053ecc76c5b39b3">&#9670;&nbsp;</a></span>QueueItem()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool QueueItem </td>
          <td>(</td>
          <td class="paramtype">pkgAcquire::Queue::QItem *&#160;</td>
          <td class="paramname"><em>Item</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell the subprocess to download the given item. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Item</td><td>the item to queue up. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if the item was successfully enqueued.</dd></dl>
<p>Queues up a 600 <a class="el" href="classURI.xhtml">URI</a> Acquire message for the given item to be sent at the next possible moment. Does <em>not</em> flush the output queue. </p>

</div>
</div>
<a id="a67678d9efe826f5824f2e8fc0e812338"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67678d9efe826f5824f2e8fc0e812338">&#9670;&nbsp;</a></span>QueueName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string QueueName </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>URI</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> const *&amp;&#160;</td>
          <td class="paramname"><em>Config</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Determine the fetch method and queue of a <a class="el" href="classURI.xhtml">URI</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname"><a class="el" href="classURI.xhtml">URI</a></td><td>The <a class="el" href="classURI.xhtml">URI</a> to fetch.</td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">Config</td><td>A location in which to place the method via which the <a class="el" href="classURI.xhtml">URI</a> is to be fetched.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the string-name of the queue in which a fetch request for the given <a class="el" href="classURI.xhtml">URI</a> should be placed. </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297">Config</a>, <a class="el" href="classpkgAcquire.xhtml#a8798fd49b6306cde3810ff5744d8bfc2">FileSize</a>, <a class="el" href="classpkgAcquire.xhtml#ad698ed345d50318b53f3cc3ae43190db">GetConfig()</a>, <a class="el" href="classpkgAcquire.xhtml#aedefc2c8ff9f8aa323d296085f969555adfbf4cb90b4209e5981227965246d8f0">QueueAccess</a>, and <a class="el" href="classpkgAcquire.xhtml#a9e42b66f176afafc1c75e78289e80e76">Queues</a>.</p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#adff4865b0b932d7c8dae0aee44006c13">Enqueue()</a>.</p>

</div>
</div>
<a id="a3796f802e2bbb94ea4d215acb092e1de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3796f802e2bbb94ea4d215acb092e1de">&#9670;&nbsp;</a></span>QueueURI()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool QueueURI </td>
          <td>(</td>
          <td class="paramtype">ItemDesc &amp;&#160;</td>
          <td class="paramname"><em>Item</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Insert this item into its owner's queue. </p>
<p>The method is designed to check if the request would end in an IMSHit and if it determines that it would, it isn't queueing the Item and instead sets it to completion instantly.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Item</td><td>Metadata about this item (its <a class="el" href="classURI.xhtml">URI</a> and description). </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the item was inserted, false if IMSHit was detected </dd></dl>

</div>
</div>
<a id="a1f374a34dcd1bd9881717b345118fd49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f374a34dcd1bd9881717b345118fd49">&#9670;&nbsp;</a></span>ReadMessages()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadMessages </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve any available messages from the subprocess. </p>
<p>The messages are retrieved as in <a class="el" href="strutl_8h_source.xhtml">ReadMessages()</a>, and <a class="el" href="classpkgAcquire.xhtml#a94fe52037e4594131495b1791d6654ea" title="Invoked when the worked process dies unexpectedly.">MethodFailure()</a> is invoked if an error occurs; in particular, if the pipe to the subprocess dies unexpectedly while a message is being read.</p>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if the messages were successfully read, <b>false</b> otherwise. </dd></dl>

</div>
</div>
<a id="a7787c3dcef8c503fb513569a9fdec68d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7787c3dcef8c503fb513569a9fdec68d">&#9670;&nbsp;</a></span>Rename()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Rename </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>From</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>To</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rename a file without modifying its timestamp. </p>
<p>Many item methods call this as their final action.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">From</td><td>The file to be renamed.</td></tr>
    <tr><td class="paramname">To</td><td>The new name of <em>From</em>. If <em>To</em> exists it will be overwritten. If <em>From</em> and <em>To</em> are equal nothing happens. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a140b713d7815b8dd427cc87c2df56585"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a140b713d7815b8dd427cc87c2df56585">&#9670;&nbsp;</a></span>RenameOnError()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool RenameOnError </td>
          <td>(</td>
          <td class="paramtype">RenameOnErrorState const&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rename failed file and set error. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">state</td><td>respresenting the error we encountered </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af15888f17717fe69c2a9d4a3f511b4a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af15888f17717fe69c2a9d4a3f511b4a8">&#9670;&nbsp;</a></span>Run()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820">pkgAcquire::RunResult</a> Run </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>PulseInterval</em> = <code>500000</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Download all the items that have been <a class="el" href="classpkgAcquire.xhtml#a81c2ed5c92ad099344f44cfd9ebdb249" title="Add the given item to the list of items.">Add()</a>ed to this download process. </p>
<p>This method will block until the download completes, invoking methods on <a class="el" href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c" title="The download progress indicator to which progress messages should be sent.">Log</a> to report on the progress of the download.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">PulseInterval</td><td>The method <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">pkgAcquireStatus::Pulse</a> will be invoked on <a class="el" href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c" title="The download progress indicator to which progress messages should be sent.">Log</a> at intervals of PulseInterval milliseconds.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the result of the download. </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820ad1e026338c0200900908a176717682b8">Cancelled</a>, <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820a45a66636ecd16b869e4aadd738813583">Continue</a>, <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820a1f506c828f4945d6b5a7bf71445f7d54">Failed</a>, <a class="el" href="classpkgAcquire.xhtml#a8089d1f0a2e10710afe1d1488a1f1f72">Items</a>, <a class="el" href="classpkgAcquire.xhtml#a7379b6d0158359d208d3793490cb445c">Log</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f">pkgAcquireStatus::Pulse()</a>, <a class="el" href="classpkgAcquire.xhtml#a9e42b66f176afafc1c75e78289e80e76">Queues</a>, <a class="el" href="classpkgAcquire.xhtml#af7b347350616935485a87dd147e0f2ec">RunFds()</a>, <a class="el" href="classpkgAcquire.xhtml#ae2e97f1ebd7c956e2c68d1209eabd4b1">Running</a>, <a class="el" href="classpkgAcquire.xhtml#a7d36ab39eb6238a71b574a40730fd469">SetFds()</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a07aaf1227e4d645f15e0a964f54ef291">pkgAcquireStatus::Start()</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a17a237457e57625296e6b24feb19c60a">pkgAcquireStatus::Stop()</a>, <a class="el" href="classpkgAcquire.xhtml#abc16dbbd88d0020e00b57ef0dce9471a">ToFetch</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a75386dbaef64dae27df6f182185de329">pkgAcquireStatus::Update</a>, <a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker()</a>, and <a class="el" href="classpkgAcquire.xhtml#adfb69296d9a50a92927df7c30e56be2e">Workers</a>.</p>

</div>
</div>
<a id="af7b347350616935485a87dd147e0f2ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7b347350616935485a87dd147e0f2ec">&#9670;&nbsp;</a></span>RunFds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool RunFds </td>
          <td>(</td>
          <td class="paramtype">fd_set *&#160;</td>
          <td class="paramname"><em>RSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">fd_set *&#160;</td>
          <td class="paramname"><em>WSet</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Handle input from and output to file descriptors which select() has determined are ready. The default implementation dispatches to all active downloads.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">RSet</td><td>The set of file descriptors that are ready for input.</td></tr>
    <tr><td class="paramname">WSet</td><td>The set of file descriptors that are ready for output.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>false if there is an error condition on one of the fds </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker()</a>, and <a class="el" href="classpkgAcquire.xhtml#adfb69296d9a50a92927df7c30e56be2e">Workers</a>.</p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">Run()</a>.</p>

</div>
</div>
<a id="a26a68d57a249a042c1e32186ce2fce8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26a68d57a249a042c1e32186ce2fce8b">&#9670;&nbsp;</a></span>RunMessages()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool RunMessages </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse and dispatch pending messages. </p>
<p>This dispatches the message in a manner appropriate for its type.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000015">Todo:</a></b></dt><dd>Several message types lack separate handlers.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcquire.xhtml#aa3de23b9c5a564121a667dd9b392e158" title="Handle a 100 Capabilities response from the subprocess.">Capabilities()</a>, <a class="el" href="classpkgAcquire.xhtml#af79a315ab449f2046389c91e3f114326" title="Send a 601 Configuration message (containing the APT configuration) to the subprocess.">SendConfiguration()</a>, <a class="el" href="classpkgAcquire.xhtml#a5fa3dc5431fbfcd2b5ceed5f97f1eb84" title="Handle a 403 Media Change message.">MediaChange()</a> </dd></dl>

</div>
</div>
<a id="af79a315ab449f2046389c91e3f114326"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af79a315ab449f2046389c91e3f114326">&#9670;&nbsp;</a></span>SendConfiguration()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SendConfiguration </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Send a 601 <a class="el" href="classConfiguration.xhtml">Configuration</a> message (containing the APT configuration) to the subprocess. </p>
<p>The APT configuration will be send to the subprocess in a message of the following form:</p>
<pre>
601 <a class="el" href="classConfiguration.xhtml">Configuration</a>
Config-Item: Fully-Qualified-Item=Val
Config-Item: Fully-Qualified-Item=Val
...
</pre><dl class="section return"><dt>Returns</dt><dd><b>true</b> if the command was successfully sent, <b>false</b> otherwise. </dd></dl>

</div>
</div>
<a id="aeeb2ad33090ed27447bfe86ff8d9d883"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeeb2ad33090ed27447bfe86ff8d9d883">&#9670;&nbsp;</a></span>SetActiveSubprocess()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetActiveSubprocess </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>subprocess</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the name of the current active subprocess. </p>
<p>See also <a class="el" href="classpkgAcquire.xhtml#a634f2accefd6f56896af45cedbebb08d" title="contains the name of the subprocess that is operating on this object (for instance,...">ActiveSubprocess</a> </p>

</div>
</div>
<a id="a7d36ab39eb6238a71b574a40730fd469"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d36ab39eb6238a71b574a40730fd469">&#9670;&nbsp;</a></span>SetFds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFds </td>
          <td>(</td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>Fd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">fd_set *&#160;</td>
          <td class="paramname"><em>RSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">fd_set *&#160;</td>
          <td class="paramname"><em>WSet</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Build up the set of file descriptors upon which select() should block. </p>
<p>The default implementation inserts the file descriptors corresponding to active downloads.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">Fd</td><td>The largest file descriptor in the generated sets.</td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">RSet</td><td>The set of file descriptors that should be watched for input.</td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">WSet</td><td>The set of file descriptors that should be watched for output. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#a2eb3145b965a64b578db347d1bae648b">InFd</a>, <a class="el" href="classpkgAcquire.xhtml#af2679e54f43d436f88045350be6fb2ab">OutFd</a>, <a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker()</a>, and <a class="el" href="classpkgAcquire.xhtml#adfb69296d9a50a92927df7c30e56be2e">Workers</a>.</p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">Run()</a>.</p>

</div>
</div>
<a id="a89dc1a987d2902d03b28100d3427d129"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89dc1a987d2902d03b28100d3427d129">&#9670;&nbsp;</a></span>ShortDesc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string ShortDesc </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Short item description. </p>
<dl class="section return"><dt>Returns</dt><dd>a brief description of the object being fetched. </dd></dl>

</div>
</div>
<a id="a0483a6e5db0c15e5445bcc6a00262204"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0483a6e5db0c15e5445bcc6a00262204">&#9670;&nbsp;</a></span>Shutdown()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Shutdown </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Final</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shut down the worker process associated with this queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Final</td><td>If <b>true</b>, then the process is stopped unconditionally. Otherwise, it is only stopped if it does not need cleanup as indicated by the pkgAcqMethod::NeedsCleanup member of its configuration.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b>. </dd></dl>

</div>
</div>
<a id="aa70efaa4751ac6d5d54dce88fe725e0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa70efaa4751ac6d5d54dce88fe725e0a">&#9670;&nbsp;</a></span>Start() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start up the worker and fill in <a class="el" href="classpkgAcquire.xhtml#a33b828cdf6b336e68c51bb8e068e1297" title="The configuration of this method. On startup, the target of this pointer is filled in with basic data...">Config</a>. </p>
<p>Reads the first message from the worker, which is assumed to be a 100 Capabilities message.</p>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if all operations completed successfully. </dd></dl>

</div>
</div>
<a id="a3bd3f16c6fa3134500f50f0bf8fd4ecd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bd3f16c6fa3134500f50f0bf8fd4ecd">&#9670;&nbsp;</a></span>Start() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Start </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>Message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long long const&#160;</td>
          <td class="paramname"><em>Size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked when the worker starts to fetch this object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Message</td><td>RFC822-formatted data from the worker process. Use LookupTag() to parse it.</td></tr>
    <tr><td class="paramname"><a class="el" href="classHashes.xhtml">Hashes</a></td><td>The expected hashes of the object being fetched.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcqMethod.xhtml">pkgAcqMethod</a> </dd></dl>

</div>
</div>
<a id="ab4442bc1bb880bd798d3c08a153364b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4442bc1bb880bd798d3c08a153364b8">&#9670;&nbsp;</a></span>Startup()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Startup </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start the worker process associated with this queue. </p>
<p>If a worker process is already associated with this queue, this is equivalent to calling <a class="el" href="classpkgAcquire.xhtml#a5b2dd956b1adc90b13d47e26121d5486" title="Send idle items to the worker process.">Cycle()</a>.</p>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if the startup was successful. </dd></dl>

</div>
</div>
<a id="a155b1c5f08787829418fc297bfc5d1d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a155b1c5f08787829418fc297bfc5d1d5">&#9670;&nbsp;</a></span>TotalNeeded()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">APT_PURE unsigned long long TotalNeeded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the total size in bytes of all the items included in this download. </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#af54b860e41ab56ec44a007f3542dbe82">ItemsBegin()</a>, and <a class="el" href="classpkgAcquire.xhtml#a06f41681fab7fd54db89fa55c09fac43">ItemsEnd()</a>.</p>

</div>
</div>
<a id="a03a67f9076e4dd4a46bb429a9b1f5164"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03a67f9076e4dd4a46bb429a9b1f5164">&#9670;&nbsp;</a></span>UriBegin()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#ad7be95273598f4fcd8b0279f7f8145fc">pkgAcquire::UriIterator</a> UriBegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the head of the list of enqueued item URIs. </p>
<p>This iterator will step over every element of every active queue. </p>

<p class="reference">References <a class="el" href="classpkgAcquire.xhtml#a9e42b66f176afafc1c75e78289e80e76">Queues</a>, and <a class="el" href="classpkgAcquire.xhtml#ad7be95273598f4fcd8b0279f7f8145fc">UriIterator()</a>.</p>

</div>
</div>
<a id="ad7be95273598f4fcd8b0279f7f8145fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7be95273598f4fcd8b0279f7f8145fc">&#9670;&nbsp;</a></span>UriIterator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">UriIterator </td>
          <td>(</td>
          <td class="paramtype">pkgAcquire::Queue *&#160;</td>
          <td class="paramname"><em>Q</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a new UriIterator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Q</td><td>The queue over which this UriIterator should iterate. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#a03a67f9076e4dd4a46bb429a9b1f5164">UriBegin()</a>, and <a class="el" href="classpkgAcquire.xhtml#a5e782c6e73a812c3650623fe076d4dcc">UriEnd()</a>.</p>

</div>
</div>
<a id="a16cbb205286be182faec2cbc0434eef2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16cbb205286be182faec2cbc0434eef2">&#9670;&nbsp;</a></span>VerifyDone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool VerifyDone </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>Message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">pkgAcquire::MethodConfig</a> const *const&#160;</td>
          <td class="paramname"><em>Cnf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked by the acquire worker to check if the successfully fetched object is also the objected we wanted to have. </p>
<p>Note that the object might <em>not</em> have been written to DestFile; check for the presence of an Alt-Filename entry in Message to find the file to which it was really written.</p>
<p>This is called before Done is called and can prevent it by returning <b>false</b> which will result in Failed being called instead.</p>
<p>You should prefer to use this method over calling <a class="el" href="classpkgAcquire.xhtml#ad45c2d8ba7020a5b66bb0563cc773820a1f506c828f4945d6b5a7bf71445f7d54" title="Some files failed to download.">Failed()</a> from <a class="el" href="classpkgAcquire.xhtml#a17d459e7612a763c8eb2aa4aae9a6418" title="Invoked by the acquire worker when the object was fetched successfully.">Done()</a> as this has e.g. the wrong progress reporting.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Message</td><td>Data from the acquire method. Use LookupTag() to parse it. </td></tr>
    <tr><td class="paramname">Cnf</td><td>The method via which the object was fetched.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcqMethod.xhtml">pkgAcqMethod</a> </dd></dl>

</div>
</div>
<a id="ae2af0336261da4341b48814adf215290"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2af0336261da4341b48814adf215290">&#9670;&nbsp;</a></span>Worker() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Worker </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *&#160;</td>
          <td class="paramname"><em>Config</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a new Worker that should just retrieve information about the fetch method. </p>
<p>Nothing in particular forces you to refrain from actually downloading stuff, but the various status callbacks won't be invoked.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Config</td><td>A location in which to store information about the fetch method. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac0cf8a483d82d1372c6f7d499937860c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0cf8a483d82d1372c6f7d499937860c">&#9670;&nbsp;</a></span>Worker() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Worker </td>
          <td>(</td>
          <td class="paramtype">Queue *&#160;</td>
          <td class="paramname"><em>OwnerQ</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a> *&#160;</td>
          <td class="paramname"><em>Config</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classpkgAcquireStatus.xhtml">pkgAcquireStatus</a> *&#160;</td>
          <td class="paramname"><em>Log</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new Worker to download files. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">OwnerQ</td><td>The queue into which this worker should be placed.</td></tr>
    <tr><td class="paramname">Config</td><td>A location in which to store information about the fetch method.</td></tr>
    <tr><td class="paramname">Log</td><td>The download progress indicator that should be used to report the progress of this worker. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#ad698ed345d50318b53f3cc3ae43190db">GetConfig()</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f">pkgAcquireStatus::Pulse()</a>, <a class="el" href="classpkgAcquire.xhtml#a8ec623661f28cc681c1145186227ab60">Remove()</a>, <a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">Run()</a>, <a class="el" href="classpkgAcquire.xhtml#af7b347350616935485a87dd147e0f2ec">RunFds()</a>, and <a class="el" href="classpkgAcquire.xhtml#a7d36ab39eb6238a71b574a40730fd469">SetFds()</a>.</p>

</div>
</div>
<a id="a1670b365447a9c9262393be646dc0c83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1670b365447a9c9262393be646dc0c83">&#9670;&nbsp;</a></span>WorkersBegin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a>* WorkersBegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the first Worker object. </p>
<dl class="section return"><dt>Returns</dt><dd>the first active worker in this download process. </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f">pkgAcquireStatus::Pulse()</a>.</p>

</div>
</div>
<a id="ae88f77b544d05718eb98cf4c93bad3e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae88f77b544d05718eb98cf4c93bad3e8">&#9670;&nbsp;</a></span>WorkerStep()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">pkgAcquire::Worker</a> * WorkerStep </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a> *&#160;</td>
          <td class="paramname"><em>I</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Advance to the next Worker object. </p>
<dl class="section return"><dt>Returns</dt><dd>the worker immediately following I, or <b>NULL</b> if none exists. </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f">pkgAcquireStatus::Pulse()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a006a979c4801f6b6ceb33cb3acd6dc89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a006a979c4801f6b6ceb33cb3acd6dc89">&#9670;&nbsp;</a></span>Access</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string Access</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The access method to be used by this worker. </p>
<p>The name of this acquire method (e.g., http).</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000011">Todo:</a></b></dt><dd>Doesn't this duplicate Config-&gt;Access? </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#ad698ed345d50318b53f3cc3ae43190db">GetConfig()</a>.</p>

</div>
</div>
<a id="a886f6c17d366793eb6202ba2482372f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a886f6c17d366793eb6202ba2482372f5">&#9670;&nbsp;</a></span>Complete</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Complete</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If <b>true</b>, the entire object has been successfully fetched. </p>
<p>Subclasses should set this to <b>true</b> when appropriate. </p>

</div>
</div>
<a id="ab04e9ee398f825f50e4f1ea7eaf37f77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab04e9ee398f825f50e4f1ea7eaf37f77">&#9670;&nbsp;</a></span>Configs</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a>* Configs</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The head of the list of acquire method configurations. </p>
<p>Each protocol (http, ftp, gzip, etc) via which files can be fetched can have a representation in this list. The configuration data is filled in by parsing the 100 Capabilities string output by a method on startup (see pkgAcqMethod::pkgAcqMethod and <a class="el" href="classpkgAcquire.xhtml#ad698ed345d50318b53f3cc3ae43190db" title="Retrieve information about a fetch method by name.">pkgAcquire::GetConfig</a>).</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000022">Todo:</a></b></dt><dd>why a hand-managed config dictionary instead of std::map? </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#ad698ed345d50318b53f3cc3ae43190db">GetConfig()</a>, and <a class="el" href="classpkgAcquire.xhtml#a63b3097945b28966895045ffeaeb658c">~pkgAcquire()</a>.</p>

</div>
</div>
<a id="acdf3472c9b75f32dae88032d42d1cb6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdf3472c9b75f32dae88032d42d1cb6c">&#9670;&nbsp;</a></span>Debug</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Debug</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>If <b>true</b>, debugging output will be sent to std::clog. </p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#ad88e269d0297439604f25eb9c1309286">Dequeue()</a>, and <a class="el" href="classpkgAcquire.xhtml#adff4865b0b932d7c8dae0aee44006c13">Enqueue()</a>.</p>

</div>
</div>
<a id="a4bef8db29346252205b0a9be3c530739"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bef8db29346252205b0a9be3c530739">&#9670;&nbsp;</a></span>ExpectedAdditionalItems</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int ExpectedAdditionalItems</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The number of additional fetch items that are expected once this item is done. </p>
<p>Some items like pkgAcqMeta{Index,Sig} will queue additional items. This variable can be set by the methods if it knows in advance how many items to expect to get a more accurate progress. </p>

</div>
</div>
<a id="a7fc877a36248a6101304994352d1ad87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fc877a36248a6101304994352d1ad87">&#9670;&nbsp;</a></span>ID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long ID</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A client-supplied unique identifier. </p>
<p>This field is initialized to 0; it is meant to be filled in by clients that wish to use it to uniquely identify items.</p>
<p>APT progress reporting will store an ID there as shown in "Get:42 …" </p>

</div>
</div>
<a id="a2eb3145b965a64b578db347d1bae648b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2eb3145b965a64b578db347d1bae648b">&#9670;&nbsp;</a></span>InFd</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int InFd</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A file descriptor connected to the standard output of the subprocess. </p>
<p>Used to read messages and data from the subprocess. </p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#a7d36ab39eb6238a71b574a40730fd469">SetFds()</a>.</p>

</div>
</div>
<a id="a849bc65c54e1bcbe8a7f053ce2cec672"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a849bc65c54e1bcbe8a7f053ce2cec672">&#9670;&nbsp;</a></span>InReady</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool InReady</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set to <b>true</b> if the worker is in a state in which it might generate data or command responses. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000012">Todo:</a></b></dt><dd>Is this right? It's a guess. </dd></dl>

</div>
</div>
<a id="a8089d1f0a2e10710afe1d1488a1f1f72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8089d1f0a2e10710afe1d1488a1f1f72">&#9670;&nbsp;</a></span>Items <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;Item *&gt; Items</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A list of items to download. </p>
<p>This is built monotonically as items are created and only emptied when the download shuts down. </p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#a81c2ed5c92ad099344f44cfd9ebdb249">Add()</a>, <a class="el" href="classpkgAcquire.xhtml#aae5af42b94e25de2d233e1bfa6b0688c">Clean()</a>, <a class="el" href="classpkgAcquire.xhtml#ae3e5902c5c7d0b5c6856e6761205a39c">Remove()</a>, <a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">Run()</a>, and <a class="el" href="classpkgAcquire.xhtml#ac5f038c2b480cf9ef5e19e3eba8dbaf9">Shutdown()</a>.</p>

</div>
</div>
<a id="a2f4e8b582eeece0747d3fee5858b1a27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f4e8b582eeece0747d3fee5858b1a27">&#9670;&nbsp;</a></span>Items <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structpkgAcquire_1_1QItem.xhtml">QItem</a>* Items</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The head of the list of items contained in this queue. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000023">Todo:</a></b></dt><dd>why a by-hand list instead of an STL structure? </dd></dl>

</div>
</div>
<a id="a98d3c89be817752144bb35823e365fec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98d3c89be817752144bb35823e365fec">&#9670;&nbsp;</a></span>Local</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Local</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If <b>true</b>, the <a class="el" href="classURI.xhtml">URI</a> of this object is "local". </p>
<p>The only effect of this field is to exclude the object from the download progress indicator's overall statistics. </p>

</div>
</div>
<a id="a7379b6d0158359d208d3793490cb445c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7379b6d0158359d208d3793490cb445c">&#9670;&nbsp;</a></span>Log</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquireStatus.xhtml">pkgAcquireStatus</a> * Log</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The download progress indicator to which progress messages should be sent. </p>
<p>The progress indicator for this download. </p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#adff4865b0b932d7c8dae0aee44006c13">Enqueue()</a>, <a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">Run()</a>, and <a class="el" href="classpkgAcqMetaBase.xhtml#a94ab40c779f200a8895c219f51fbc546">pkgAcqMetaBase::VerifyVendor()</a>.</p>

</div>
</div>
<a id="a18ab15b6a105e10118c35973765cce34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18ab15b6a105e10118c35973765cce34">&#9670;&nbsp;</a></span>NeedsCleanup</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool NeedsCleanup</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If <b>true</b>, the subprocess has to carry out some cleanup actions before shutting down. </p>
<p>For instance, the cdrom method needs to unmount the CD after it finishes. </p>

</div>
</div>
<a id="add1daf6c866236479bdac390ed41f80a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add1daf6c866236479bdac390ed41f80a">&#9670;&nbsp;</a></span>Next</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#a29c0cb60fa0c1e5f67d911bed92f2006">MethodConfig</a>* Next</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The next link on the acquire method list. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000028">Todo:</a></b></dt><dd>Why not an STL container? </dd></dl>

</div>
</div>
<a id="a70b012fdfb38bfe94b52924d45c5462d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70b012fdfb38bfe94b52924d45c5462d">&#9670;&nbsp;</a></span>NextQueue</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a>* NextQueue</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The next link on the Queue list. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000010">Todo:</a></b></dt><dd>This is always NULL; is it just for future use? </dd></dl>

</div>
</div>
<a id="af2679e54f43d436f88045350be6fb2ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2679e54f43d436f88045350be6fb2ab">&#9670;&nbsp;</a></span>OutFd</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int OutFd</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A file descriptor connected to the standard input of the subprocess. </p>
<p>Used to send commands and configuration data to the subprocess. </p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#a7d36ab39eb6238a71b574a40730fd469">SetFds()</a>.</p>

</div>
</div>
<a id="a27ee7762ef1caaf3ec8c3598c15e7886"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27ee7762ef1caaf3ec8c3598c15e7886">&#9670;&nbsp;</a></span>OutQueue</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string OutQueue</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Buffers pending writes to the subprocess. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000014">Todo:</a></b></dt><dd>Wouldn't a std::dequeue be more appropriate? </dd></dl>

</div>
</div>
<a id="a0b8717fb6d062212c251900cee4e6004"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b8717fb6d062212c251900cee4e6004">&#9670;&nbsp;</a></span>OutReady</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OutReady</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set to <b>true</b> if the worker is in a state in which it is legal to send commands to it. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000013">Todo:</a></b></dt><dd>Is this right? </dd></dl>

</div>
</div>
<a id="a1d1d5538b9875279b01b81e1ef494601"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d1d5538b9875279b01b81e1ef494601">&#9670;&nbsp;</a></span>QueueCounter</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int QueueCounter</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The number of fetch queues into which this item has been inserted. </p>
<p>There is one queue for each source from which an item could be downloaded.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> </dd></dl>

</div>
</div>
<a id="a9e42b66f176afafc1c75e78289e80e76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e42b66f176afafc1c75e78289e80e76">&#9670;&nbsp;</a></span>Queues</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Queue* Queues</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The head of the list of active queues. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000020">Todo:</a></b></dt><dd>why a hand-managed list of queues instead of std::list or std::set? </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#abf4fe627ab803887ecd2a8af30f17147">Bump()</a>, <a class="el" href="classpkgAcquire.xhtml#ad88e269d0297439604f25eb9c1309286">Dequeue()</a>, <a class="el" href="classpkgAcquire.xhtml#adff4865b0b932d7c8dae0aee44006c13">Enqueue()</a>, <a class="el" href="classpkgAcquire.xhtml#a67678d9efe826f5824f2e8fc0e812338">QueueName()</a>, <a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">Run()</a>, <a class="el" href="classpkgAcquire.xhtml#ac5f038c2b480cf9ef5e19e3eba8dbaf9">Shutdown()</a>, and <a class="el" href="classpkgAcquire.xhtml#a03a67f9076e4dd4a46bb429a9b1f5164">UriBegin()</a>.</p>

</div>
</div>
<a id="adfb69296d9a50a92927df7c30e56be2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfb69296d9a50a92927df7c30e56be2e">&#9670;&nbsp;</a></span>Workers <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">Worker</a>* Workers</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The head of the list of active workers. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000021">Todo:</a></b></dt><dd>why a hand-managed list of workers instead of std::list or std::set? </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#a4342a42ca975e033e3e859480b0c45ee">Add()</a>, <a class="el" href="classpkgAcquire.xhtml#a8ec623661f28cc681c1145186227ab60">Remove()</a>, <a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">Run()</a>, <a class="el" href="classpkgAcquire.xhtml#af7b347350616935485a87dd147e0f2ec">RunFds()</a>, and <a class="el" href="classpkgAcquire.xhtml#a7d36ab39eb6238a71b574a40730fd469">SetFds()</a>.</p>

</div>
</div>
<a id="ae49de4816f8591cf1ccb70329d4dcb8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae49de4816f8591cf1ccb70329d4dcb8c">&#9670;&nbsp;</a></span>Workers <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">pkgAcquire::Worker</a>* Workers</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The head of the list of workers associated with this queue. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000024">Todo:</a></b></dt><dd>This is plural because support exists in Queue for multiple workers. However, it does not appear that there is any way to actually associate more than one worker with a queue.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000025">Todo:</a></b></dt><dd>Why not just use a std::set? </dd></dl>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>apt-pkg/<a class="el" href="acquire-item_8h_source.xhtml">acquire-item.h</a></li>
<li>apt-pkg/<a class="el" href="acquire_8h_source.xhtml">acquire.h</a></li>
<li>apt-pkg/<a class="el" href="acquire-worker_8h_source.xhtml">acquire-worker.h</a></li>
<li>apt-pkg/acquire.cc</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
