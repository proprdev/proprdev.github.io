<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/pkgcachegen.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">pkgcachegen.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Package Cache Generator - Generator for the cache structure.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   This builds the cache structure from the abstract package list parser. </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   Each archive source has it&#39;s own list parser that is instantiated by</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   the caller to provide data for the generator. </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   Parts of the cache are created by this generator class while other</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   parts are created by the list parser. The list parser is responsible</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   for creating version, depends and provides structures, and some of</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   their contents</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#ifndef PKGLIB_PKGCACHEGEN_H</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#define PKGLIB_PKGCACHEGEN_H</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/mmap.h&gt;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="pkgcache_8h.xhtml">apt-pkg/pkgcache.h</a>&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#if __cplusplus &gt;= 201103L</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/string_view.h&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#ifdef APT_COMPILING_APT</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;xxhash.h&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">class </span><a class="code" href="classFileFd.xhtml">FileFd</a>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">class </span><a class="code" href="classpkgSourceList.xhtml">pkgSourceList</a>;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">class </span><a class="code" href="classOpProgress.xhtml">OpProgress</a>;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">class </span><a class="code" href="classpkgIndexFile.xhtml">pkgIndexFile</a>;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">class </span><a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classpkgCacheGenerator.xhtml">   42</a></span>&#160;<span class="keyword">class </span>APT_HIDDEN <a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a>                                      <span class="comment">/*{{{*/</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;   APT_HIDDEN <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> WriteStringInMap(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> String) { <span class="keywordflow">return</span> WriteStringInMap(String.data(), String.size()); };</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;   APT_HIDDEN <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> WriteStringInMap(<span class="keyword">const</span> <span class="keywordtype">char</span> *String);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;   APT_HIDDEN <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> WriteStringInMap(<span class="keyword">const</span> <span class="keywordtype">char</span> *String, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;Len);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;   APT_HIDDEN uint32_t AllocateInMap(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;size);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;   <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;T&gt;</a> AllocateInMap() {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;T&gt;</a>{AllocateInMap(<span class="keyword">sizeof</span>(T))};</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;   }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;   <span class="comment">// Dirty hack for public users that do not use C++11 yet</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#if __cplusplus &gt;= 201103L &amp;&amp; defined(APT_COMPILING_APT)</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;   <span class="keyword">struct </span>string_pointer {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span> *data_;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="keywordtype">size_t</span> size;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      <a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a> *generator;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> item;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span> *data()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;         <span class="keywordflow">return</span> data_ != <span class="keyword">nullptr</span> ? data_ : <span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(generator-&gt;Map.Data()) + item;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keywordtype">bool</span> operator ==(string_pointer <span class="keyword">const</span> &amp;other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;         <span class="keywordflow">return</span> size == other.size &amp;&amp; memcmp(data(), other.data(), size) == 0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;   };</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;   <span class="keyword">struct </span>hash {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      uint32_t operator()(string_pointer <span class="keyword">const</span> &amp;that)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;         <span class="keywordflow">return</span> XXH3_64bits(that.data(), that.size) &amp; 0xFFFFFFFF;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;   };</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   std::unordered_set&lt;string_pointer, hash&gt; strMixed;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;   std::unordered_set&lt;string_pointer, hash&gt; strVersions;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;   std::unordered_set&lt;string_pointer, hash&gt; strSections;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;   <span class="keyword">typedef</span> <a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a> <a class="code" href="classpkgCacheListParser.xhtml">ListParser</a>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classpkgCacheGenerator_1_1Dynamic.xhtml">   84</a></span>&#160;   <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iter&gt; <span class="keyword">class </span><a class="code" href="classpkgCacheGenerator_1_1Dynamic.xhtml">Dynamic</a> {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <span class="keyword">static</span> std::vector&lt;Iter*&gt; toReMap;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keyword">explicit</span> <a class="code" href="classpkgCacheGenerator_1_1Dynamic.xhtml">Dynamic</a>(Iter &amp;I) {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;         toReMap.push_back(&amp;I);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      ~<a class="code" href="classpkgCacheGenerator_1_1Dynamic.xhtml">Dynamic</a>() {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;         toReMap.pop_back();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">#if __cplusplus &gt;= 201103L</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <a class="code" href="classpkgCacheGenerator_1_1Dynamic.xhtml">Dynamic</a>(<span class="keyword">const</span> <a class="code" href="classpkgCacheGenerator_1_1Dynamic.xhtml">Dynamic</a>&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="classpkgCacheGenerator_1_1Dynamic.xhtml">Dynamic</a>&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;   };</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;   <a class="code" href="classDynamicMMap.xhtml">DynamicMMap</a> &amp;Map;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;   <a class="code" href="classpkgCache.xhtml">pkgCache</a> Cache;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;   <a class="code" href="classOpProgress.xhtml">OpProgress</a> *Progress;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;   std::string RlsFileName;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;   <a class="code" href="structpkgCache_1_1ReleaseFile.xhtml">pkgCache::ReleaseFile</a> *CurrentRlsFile;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;   std::string PkgFileName;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;   <a class="code" href="structpkgCache_1_1PackageFile.xhtml">pkgCache::PackageFile</a> *CurrentFile;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;   <span class="keywordtype">bool</span> NewGroup(pkgCache::GrpIterator &amp;Grp, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Name);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;   <span class="keywordtype">bool</span> NewPackage(pkgCache::PkgIterator &amp;Pkg, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Name, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Arch);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;   <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::Version&gt;</a> NewVersion(pkgCache::VerIterator &amp;Ver, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> <span class="keyword">const</span> &amp;VerStr,</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                            <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::Package&gt;</a> <span class="keyword">const</span> ParentPkg, uint32_t Hash,</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                            <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::Version&gt;</a> <span class="keyword">const</span> Next);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;   <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::Description&gt;</a> NewDescription(pkgCache::DescIterator &amp;Desc,<span class="keyword">const</span> std::string &amp;Lang, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> md5sum,<a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> <span class="keyword">const</span> idxmd5str);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;   <span class="keywordtype">bool</span> NewFileVer(pkgCache::VerIterator &amp;Ver,<a class="code" href="classpkgCacheListParser.xhtml">ListParser</a> &amp;List);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;   <span class="keywordtype">bool</span> NewFileDesc(pkgCache::DescIterator &amp;Desc,<a class="code" href="classpkgCacheListParser.xhtml">ListParser</a> &amp;List);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;   <span class="keywordtype">bool</span> NewDepends(pkgCache::PkgIterator &amp;Pkg, pkgCache::VerIterator &amp;Ver,</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                   <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> <span class="keyword">const</span> Version, uint8_t <span class="keyword">const</span> Op,</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                   uint8_t <span class="keyword">const</span> Type, <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::Dependency&gt;</a>* &amp;OldDepLast);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;   <span class="keywordtype">bool</span> NewProvides(pkgCache::VerIterator &amp;Ver, pkgCache::PkgIterator &amp;Pkg,</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> <span class="keyword">const</span> ProvidesVersion, uint8_t <span class="keyword">const</span> Flags);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;   <span class="keyword">enum</span> StringType { MIXED, VERSIONNUMBER, SECTION };</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;   <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> StoreString(StringType <span class="keyword">const</span> type, <span class="keyword">const</span> <span class="keywordtype">char</span> * S, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Size);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;   <span class="keyword">inline</span> <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> StoreString(<span class="keyword">enum</span> StringType <span class="keyword">const</span> type, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> S) {<span class="keywordflow">return</span> StoreString(type, S.data(),S.length());};</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;   <span class="keywordtype">void</span> DropProgress() {Progress = 0;};</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;   <span class="keywordtype">bool</span> SelectFile(<span class="keyword">const</span> std::string &amp;File,<a class="code" href="classpkgIndexFile.xhtml">pkgIndexFile</a> <span class="keyword">const</span> &amp;Index, std::string <span class="keyword">const</span> &amp;Architecture, std::string <span class="keyword">const</span> &amp;Component, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags = 0);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;   <span class="keywordtype">bool</span> SelectReleaseFile(<span class="keyword">const</span> std::string &amp;File, <span class="keyword">const</span> std::string &amp;Site, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags = 0);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;   <span class="keywordtype">bool</span> MergeList(ListParser &amp;List,pkgCache::VerIterator *Ver = 0);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;   <span class="keyword">inline</span> <a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;GetCache() {<span class="keywordflow">return</span> Cache;};</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;   <span class="keyword">inline</span> pkgCache::PkgFileIterator GetCurFile()</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;         {<span class="keywordflow">return</span> pkgCache::PkgFileIterator(Cache,CurrentFile);};</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;   <span class="keyword">inline</span> pkgCache::RlsFileIterator GetCurRlsFile()</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;         {<span class="keywordflow">return</span> pkgCache::RlsFileIterator(Cache,CurrentRlsFile);};</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;   APT_PUBLIC <span class="keyword">static</span> <span class="keywordtype">bool</span> MakeStatusCache(<a class="code" href="classpkgSourceList.xhtml">pkgSourceList</a> &amp;List,<a class="code" href="classOpProgress.xhtml">OpProgress</a> *Progress,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        <a class="code" href="classMMap.xhtml">MMap</a> **OutMap = 0,<span class="keywordtype">bool</span> AllowMem = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;   APT_HIDDEN <span class="keyword">static</span> <span class="keywordtype">bool</span> MakeStatusCache(<a class="code" href="classpkgSourceList.xhtml">pkgSourceList</a> &amp;List,<a class="code" href="classOpProgress.xhtml">OpProgress</a> *Progress,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        <a class="code" href="classMMap.xhtml">MMap</a> **OutMap,<a class="code" href="classpkgCache.xhtml">pkgCache</a> **OutCache, <span class="keywordtype">bool</span> AllowMem = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;   APT_PUBLIC <span class="keyword">static</span> <span class="keywordtype">bool</span> MakeOnlyStatusCache(<a class="code" href="classOpProgress.xhtml">OpProgress</a> *Progress,<a class="code" href="classDynamicMMap.xhtml">DynamicMMap</a> **OutMap);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;   <span class="keywordtype">void</span> ReMap(<span class="keywordtype">void</span> <span class="keyword">const</span> * <span class="keyword">const</span> oldMap, <span class="keywordtype">void</span> * <span class="keyword">const</span> newMap, <span class="keywordtype">size_t</span> oldSize);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;   <span class="keywordtype">bool</span> Start();</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;   <a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a>(<a class="code" href="classDynamicMMap.xhtml">DynamicMMap</a> *Map,<a class="code" href="classOpProgress.xhtml">OpProgress</a> *Progress);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a>();</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;   <span class="keyword">private</span>:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;   <span class="keywordtype">void</span> * <span class="keyword">const</span> d;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> MergeListGroup(ListParser &amp;List, std::string <span class="keyword">const</span> &amp;GrpName);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> MergeListPackage(ListParser &amp;List, pkgCache::PkgIterator &amp;Pkg);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> MergeListVersion(ListParser &amp;List, pkgCache::PkgIterator &amp;Pkg,</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                         <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> <span class="keyword">const</span> &amp;Version, pkgCache::VerIterator* &amp;OutVer);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> AddImplicitDepends(pkgCache::GrpIterator &amp;G, pkgCache::PkgIterator &amp;P,</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                           pkgCache::VerIterator &amp;V);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> AddImplicitDepends(pkgCache::VerIterator &amp;V, pkgCache::PkgIterator &amp;D);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> AddNewDescription(ListParser &amp;List, pkgCache::VerIterator &amp;Ver,</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;         std::string <span class="keyword">const</span> &amp;lang, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> CurMd5, <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> &amp;md5idx);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;};</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">// This is the abstract package list parser class.                      /*{{{*/</span></div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classpkgCacheListParser.xhtml">  171</a></span>&#160;<span class="keyword">class </span>APT_HIDDEN <a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;   <a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a> *Owner;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a>;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;   <span class="comment">// Some cache items</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;   pkgCache::VerIterator OldDepVer;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;   <a class="code" href="classmap__pointer.xhtml">map_pointer&lt;pkgCache::Dependency&gt;</a> *OldDepLast;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;   <span class="keywordtype">void</span> * <span class="keyword">const</span> d;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> NewGroup(pkgCache::GrpIterator &amp;Grp, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Name) { <span class="keywordflow">return</span> Owner-&gt;NewGroup(Grp, Name); }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;   <span class="keyword">inline</span> <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> StoreString(pkgCacheGenerator::StringType <span class="keyword">const</span> type, <span class="keyword">const</span> <span class="keywordtype">char</span> *S,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Size) {<span class="keywordflow">return</span> Owner-&gt;StoreString(type, S, Size);};</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;   <span class="keyword">inline</span> <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> StoreString(pkgCacheGenerator::StringType <span class="keyword">const</span> type, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> S) {<span class="keywordflow">return</span> Owner-&gt;StoreString(type, S);};</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;   <span class="keyword">inline</span> <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> WriteString(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> S) {<span class="keywordflow">return</span> Owner-&gt;WriteStringInMap(S.data(), S.size());};</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;   <span class="keyword">inline</span> <a class="code" href="classmap__pointer.xhtml">map_stringitem_t</a> WriteString(<span class="keyword">const</span> <span class="keywordtype">char</span> *S,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Size) {<span class="keywordflow">return</span> Owner-&gt;WriteStringInMap(S,Size);};</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;   <span class="keywordtype">bool</span> NewDepends(pkgCache::VerIterator &amp;Ver,<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Package, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Arch,</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                   <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Version,uint8_t <span class="keyword">const</span> Op,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                   uint8_t <span class="keyword">const</span> Type);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;   <span class="keywordtype">bool</span> NewProvides(pkgCache::VerIterator &amp;Ver,<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> PkgName,</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> PkgArch, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Version,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    uint8_t <span class="keyword">const</span> Flags);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;   <span class="keywordtype">bool</span> NewProvidesAllArch(pkgCache::VerIterator &amp;Ver, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Package,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                           <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Version, uint8_t <span class="keyword">const</span> Flags);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;   </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;   <span class="comment">// These all operate against the current section</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;   <span class="keyword">virtual</span> std::string Package() = 0;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ArchitectureAll() = 0;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;   <span class="keyword">virtual</span> <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Architecture() = 0;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;   <span class="keyword">virtual</span> <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Version() = 0;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> NewVersion(pkgCache::VerIterator &amp;Ver) = 0;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;   <span class="keyword">virtual</span> std::vector&lt;std::string&gt; AvailableDescriptionLanguages() = 0;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;   <span class="keyword">virtual</span> <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Description_md5() = 0;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;   <span class="keyword">virtual</span> uint32_t VersionHash() = 0;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SameVersion(uint32_t Hash, pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> UsePackage(pkgCache::PkgIterator &amp;Pkg,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                           pkgCache::VerIterator &amp;Ver) = 0;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;   <span class="keyword">virtual</span> map_filesize_t Offset() = 0;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;   <span class="keyword">virtual</span> map_filesize_t Size() = 0;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;   </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Step() = 0;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;   </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CollectFileProvides(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;<span class="comment">/*Cache*/</span>,</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                    pkgCache::VerIterator &amp;<span class="comment">/*Ver*/</span>) {<span class="keywordflow">return</span> <span class="keyword">true</span>;};</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;   <a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a>();</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a>();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;};</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassAPT_1_1StringView_xhtml"><div class="ttname"><a href="classAPT_1_1StringView.xhtml">APT::StringView</a></div><div class="ttdoc">Simple subset of std::string_view from C++17.</div><div class="ttdef"><b>Definition:</b> string_view.h:27</div></div>
<div class="ttc" id="aclassDynamicMMap_xhtml"><div class="ttname"><a href="classDynamicMMap.xhtml">DynamicMMap</a></div><div class="ttdef"><b>Definition:</b> mmap.h:78</div></div>
<div class="ttc" id="aclassFileFd_xhtml"><div class="ttname"><a href="classFileFd.xhtml">FileFd</a></div><div class="ttdef"><b>Definition:</b> fileutl.h:39</div></div>
<div class="ttc" id="aclassMMap_xhtml"><div class="ttname"><a href="classMMap.xhtml">MMap</a></div><div class="ttdef"><b>Definition:</b> mmap.h:41</div></div>
<div class="ttc" id="aclassOpProgress_xhtml"><div class="ttname"><a href="classOpProgress.xhtml">OpProgress</a></div><div class="ttdef"><b>Definition:</b> progress.h:30</div></div>
<div class="ttc" id="aclassmap__pointer_xhtml"><div class="ttname"><a href="classmap__pointer.xhtml">map_pointer&lt; char &gt;</a></div></div>
<div class="ttc" id="aclasspkgCacheGenerator_1_1Dynamic_xhtml"><div class="ttname"><a href="classpkgCacheGenerator_1_1Dynamic.xhtml">pkgCacheGenerator::Dynamic</a></div><div class="ttdef"><b>Definition:</b> pkgcachegen.h:84</div></div>
<div class="ttc" id="aclasspkgCacheGenerator_xhtml"><div class="ttname"><a href="classpkgCacheGenerator.xhtml">pkgCacheGenerator</a></div><div class="ttdef"><b>Definition:</b> pkgcachegen.h:43</div></div>
<div class="ttc" id="aclasspkgCacheListParser_xhtml"><div class="ttname"><a href="classpkgCacheListParser.xhtml">pkgCacheListParser</a></div><div class="ttdef"><b>Definition:</b> pkgcachegen.h:172</div></div>
<div class="ttc" id="aclasspkgCache_xhtml"><div class="ttname"><a href="classpkgCache.xhtml">pkgCache</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:48</div></div>
<div class="ttc" id="aclasspkgIndexFile_xhtml"><div class="ttname"><a href="classpkgIndexFile.xhtml">pkgIndexFile</a></div><div class="ttdef"><b>Definition:</b> indexfile.h:102</div></div>
<div class="ttc" id="aclasspkgSourceList_xhtml"><div class="ttname"><a href="classpkgSourceList.xhtml">pkgSourceList</a></div><div class="ttdef"><b>Definition:</b> sourcelist.h:43</div></div>
<div class="ttc" id="apkgcache_8h_xhtml"><div class="ttname"><a href="pkgcache_8h.xhtml">pkgcache.h</a></div><div class="ttdoc">pkgCache - Structure definitions for the cache file</div></div>
<div class="ttc" id="astructpkgCache_1_1PackageFile_xhtml"><div class="ttname"><a href="structpkgCache_1_1PackageFile.xhtml">pkgCache::PackageFile</a></div><div class="ttdoc">stores information about the files used to generate the cache</div><div class="ttdef"><b>Definition:</b> pkgcache.h:552</div></div>
<div class="ttc" id="astructpkgCache_1_1ReleaseFile_xhtml"><div class="ttname"><a href="structpkgCache_1_1ReleaseFile.xhtml">pkgCache::ReleaseFile</a></div><div class="ttdoc">stores information about the release files used to generate the cache</div><div class="ttdef"><b>Definition:</b> pkgcache.h:508</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
