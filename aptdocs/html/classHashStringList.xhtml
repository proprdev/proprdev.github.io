<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: HashStringList Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classHashStringList-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">HashStringList Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a57e80667f19ce0073bd7bcdfca4f305c"><td class="memItemLeft" align="right" valign="top"><a id="a57e80667f19ce0073bd7bcdfca4f305c"></a>
typedef std::vector&lt; <a class="el" href="classHashString.xhtml">HashString</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b></td></tr>
<tr class="separator:a57e80667f19ce0073bd7bcdfca4f305c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6af9b51411b3a757213e4c0f7b4a25b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classHashString.xhtml">HashString</a> const  *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a6af9b51411b3a757213e4c0f7b4a25b9">find</a> (char const *const type) const</td></tr>
<tr class="separator:a6af9b51411b3a757213e4c0f7b4a25b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a9c1b1044b468cb0244ced2ec22c568"><td class="memItemLeft" align="right" valign="top"><a id="a8a9c1b1044b468cb0244ced2ec22c568"></a>
<a class="el" href="classHashString.xhtml">HashString</a> const  *&#160;</td><td class="memItemRight" valign="bottom"><b>find</b> (std::string const &amp;type) const</td></tr>
<tr class="separator:a8a9c1b1044b468cb0244ced2ec22c568"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad377451a8d52cc254f0097fa634df352"><td class="memItemLeft" align="right" valign="top">unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#ad377451a8d52cc254f0097fa634df352">FileSize</a> () const</td></tr>
<tr class="separator:ad377451a8d52cc254f0097fa634df352"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e2254e41ae8d16e5d9cd56ccc95a661"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a3e2254e41ae8d16e5d9cd56ccc95a661">FileSize</a> (unsigned long long const Size)</td></tr>
<tr class="separator:a3e2254e41ae8d16e5d9cd56ccc95a661"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ab0545cb4ff2f208cb2ab14f21d357b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a7ab0545cb4ff2f208cb2ab14f21d357b">push_back</a> (const <a class="el" href="classHashString.xhtml">HashString</a> &amp;hashString)</td></tr>
<tr class="separator:a7ab0545cb4ff2f208cb2ab14f21d357b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a259cb5a711406a8c3e5d937eb9350cca"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a> () const</td></tr>
<tr class="separator:a259cb5a711406a8c3e5d937eb9350cca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bc5c62e61246f1538e90b211f4d306f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a1bc5c62e61246f1538e90b211f4d306f">VerifyFile</a> (std::string filename) const</td></tr>
<tr class="separator:a1bc5c62e61246f1538e90b211f4d306f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a644718bb2fb240de962dc3c9a1fdf0dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a> () const</td></tr>
<tr class="separator:a644718bb2fb240de962dc3c9a1fdf0dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17779e9f4f73e8f7a6c4b6d3d40c62f3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a17779e9f4f73e8f7a6c4b6d3d40c62f3">usable</a> () const</td></tr>
<tr class="separator:a17779e9f4f73e8f7a6c4b6d3d40c62f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29305669b60ca1680752e2fc3592ba99"><td class="memItemLeft" align="right" valign="top">const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a29305669b60ca1680752e2fc3592ba99">begin</a> () const</td></tr>
<tr class="separator:a29305669b60ca1680752e2fc3592ba99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accf9a4bd0c34d4a5f6a7dab66ea10cdc"><td class="memItemLeft" align="right" valign="top">const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#accf9a4bd0c34d4a5f6a7dab66ea10cdc">end</a> () const</td></tr>
<tr class="separator:accf9a4bd0c34d4a5f6a7dab66ea10cdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8bb3912a3ce86b15842e79d0b421204"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#ac8bb3912a3ce86b15842e79d0b421204">clear</a> ()</td></tr>
<tr class="separator:ac8bb3912a3ce86b15842e79d0b421204"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a813e6abd11d13381b64edbe1022fb7fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#a813e6abd11d13381b64edbe1022fb7fc">operator==</a> (<a class="el" href="classHashStringList.xhtml">HashStringList</a> const &amp;other) const</td></tr>
<tr class="separator:a813e6abd11d13381b64edbe1022fb7fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c87e717283c2a04d56b36c75393d342"><td class="memItemLeft" align="right" valign="top"><a id="a1c87e717283c2a04d56b36c75393d342"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator!=</b> (<a class="el" href="classHashStringList.xhtml">HashStringList</a> const &amp;other) const</td></tr>
<tr class="separator:a1c87e717283c2a04d56b36c75393d342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1639b028592d374aadce0d6d42edf343"><td class="memItemLeft" align="right" valign="top"><a id="a1639b028592d374aadce0d6d42edf343"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>HashStringList</b> (std::string const &amp;hash)</td></tr>
<tr class="separator:a1639b028592d374aadce0d6d42edf343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0527d5406c310d1ba7391cc838546066"><td class="memItemLeft" align="right" valign="top"><a id="a0527d5406c310d1ba7391cc838546066"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>HashStringList</b> (char const *const hash)</td></tr>
<tr class="separator:a0527d5406c310d1ba7391cc838546066"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac43c8cba4c9d163ca8884e6ae1b4c99f"><td class="memItemLeft" align="right" valign="top">static APT_PURE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classHashStringList.xhtml#ac43c8cba4c9d163ca8884e6ae1b4c99f">supported</a> (char const *const type)</td></tr>
<tr class="separator:ac43c8cba4c9d163ca8884e6ae1b4c99f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a29305669b60ca1680752e2fc3592ba99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29305669b60ca1680752e2fc3592ba99">&#9670;&nbsp;</a></span>begin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const_iterator begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>iterator to the first element </p>

</div>
</div>
<a id="ac8bb3912a3ce86b15842e79d0b421204"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8bb3912a3ce86b15842e79d0b421204">&#9670;&nbsp;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>start fresh with a clear list </p>

</div>
</div>
<a id="a644718bb2fb240de962dc3c9a1fdf0dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a644718bb2fb240de962dc3c9a1fdf0dc">&#9670;&nbsp;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>is the list empty ?</p>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if the list is empty, otherwise <b>false</b> </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcqArchive.xhtml#af0b82dec9f15690631561c7efb134398">pkgAcqArchive::pkgAcqArchive()</a>, <a class="el" href="classpkgAcqMetaClearSig.xhtml#a19e175320e9e5d97d477bf174a616a0a">pkgAcqMetaClearSig::QueueIndexes()</a>, and <a class="el" href="classHashStringList.xhtml#a17779e9f4f73e8f7a6c4b6d3d40c62f3">usable()</a>.</p>

</div>
</div>
<a id="accf9a4bd0c34d4a5f6a7dab66ea10cdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accf9a4bd0c34d4a5f6a7dab66ea10cdc">&#9670;&nbsp;</a></span>end()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const_iterator end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>iterator to the end element </p>

</div>
</div>
<a id="ad377451a8d52cc254f0097fa634df352"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad377451a8d52cc254f0097fa634df352">&#9670;&nbsp;</a></span>FileSize() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long long FileSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>finds the filesize hash and returns it as number</p>
<dl class="section return"><dt>Returns</dt><dd>beware: if the size isn't known we return <b>0</b> here, just like we would do for an empty file. If that is a problem for you have to get the size manually out of the list. </dd></dl>

<p class="reference">References <a class="el" href="classHashStringList.xhtml#a6af9b51411b3a757213e4c0f7b4a25b9">find()</a>.</p>

<p class="reference">Referenced by <a class="el" href="classdebReleaseIndex.xhtml#aeaf2e9db914b9ddb21625a6172e5882f">debReleaseIndex::Load()</a>, and <a class="el" href="classpkgAcqDiffIndex.xhtml#a3980b570ebaa4972bbe5218ba6d3e32b">pkgAcqDiffIndex::ParseDiffIndex()</a>.</p>

</div>
</div>
<a id="a3e2254e41ae8d16e5d9cd56ccc95a661"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e2254e41ae8d16e5d9cd56ccc95a661">&#9670;&nbsp;</a></span>FileSize() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool FileSize </td>
          <td>(</td>
          <td class="paramtype">unsigned long long const&#160;</td>
          <td class="paramname"><em>Size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>sets the filesize hash</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Size</td><td>of the file </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classHashStringList.xhtml#a7ab0545cb4ff2f208cb2ab14f21d357b">push_back</a> </dd></dl>

<p class="reference">References <a class="el" href="classHashStringList.xhtml#a7ab0545cb4ff2f208cb2ab14f21d357b">push_back()</a>.</p>

</div>
</div>
<a id="a6af9b51411b3a757213e4c0f7b4a25b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6af9b51411b3a757213e4c0f7b4a25b9">&#9670;&nbsp;</a></span>find()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classHashString.xhtml">HashString</a> const  * find </td>
          <td>(</td>
          <td class="paramtype">char const *const&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>find best hash if no specific one is requested</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>of the checksum to return, can be <b>NULL</b> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>If type is <b>NULL</b> (or the empty string) it will return the 'best' hash; otherwise the hash which was specifically requested. If no hash is found <b>NULL</b> will be returned. </dd></dl>

<p class="reference">Referenced by <a class="el" href="classHashStringList.xhtml#ad377451a8d52cc254f0097fa634df352">FileSize()</a>, <a class="el" href="classpkgAcqDiffIndex.xhtml#a3980b570ebaa4972bbe5218ba6d3e32b">pkgAcqDiffIndex::ParseDiffIndex()</a>, <a class="el" href="classHashStringList.xhtml#a7ab0545cb4ff2f208cb2ab14f21d357b">push_back()</a>, and <a class="el" href="classHashStringList.xhtml#a17779e9f4f73e8f7a6c4b6d3d40c62f3">usable()</a>.</p>

</div>
</div>
<a id="a813e6abd11d13381b64edbe1022fb7fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a813e6abd11d13381b64edbe1022fb7fc">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classHashStringList.xhtml">HashStringList</a> const &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>compare two <a class="el" href="classHashStringList.xhtml">HashStringList</a> for similarity.</p>
<p>Two lists are similar if at least one hashtype is in both lists and the hashsum matches. All hashes are checked by default, if one doesn't match false is returned regardless of how many matched before. If a hash is forced, only this hash is compared, all others are ignored. </p>

</div>
</div>
<a id="a7ab0545cb4ff2f208cb2ab14f21d357b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ab0545cb4ff2f208cb2ab14f21d357b">&#9670;&nbsp;</a></span>push_back()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool push_back </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classHashString.xhtml">HashString</a> &amp;&#160;</td>
          <td class="paramname"><em>hashString</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>add the given <a class="el" href="classHashString.xhtml">HashString</a> to the list</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hashString</td><td>to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the hash is added because it is supported and not already a different hash of the same type included, otherwise false </dd></dl>

<p class="reference">References <a class="el" href="classHashStringList.xhtml#a6af9b51411b3a757213e4c0f7b4a25b9">find()</a>, and <a class="el" href="classHashStringList.xhtml#ac43c8cba4c9d163ca8884e6ae1b4c99f">supported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="classHashStringList.xhtml#a3e2254e41ae8d16e5d9cd56ccc95a661">FileSize()</a>, <a class="el" href="classdebReleaseIndex.xhtml#aeaf2e9db914b9ddb21625a6172e5882f">debReleaseIndex::Load()</a>, <a class="el" href="classpkgAcqDiffIndex.xhtml#a3980b570ebaa4972bbe5218ba6d3e32b">pkgAcqDiffIndex::ParseDiffIndex()</a>, and <a class="el" href="classpkgAcqArchive.xhtml#af0b82dec9f15690631561c7efb134398">pkgAcqArchive::pkgAcqArchive()</a>.</p>

</div>
</div>
<a id="a259cb5a711406a8c3e5d937eb9350cca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a259cb5a711406a8c3e5d937eb9350cca">&#9670;&nbsp;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>size of the list of HashStrings </dd></dl>

</div>
</div>
<a id="ac43c8cba4c9d163ca8884e6ae1b4c99f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac43c8cba4c9d163ca8884e6ae1b4c99f">&#9670;&nbsp;</a></span>supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool supported </td>
          <td>(</td>
          <td class="paramtype">char const *const&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>check if the given hash type is supported</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if supported, otherwise false </dd></dl>

<p class="reference">Referenced by <a class="el" href="classHashStringList.xhtml#a7ab0545cb4ff2f208cb2ab14f21d357b">push_back()</a>.</p>

</div>
</div>
<a id="a17779e9f4f73e8f7a6c4b6d3d40c62f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17779e9f4f73e8f7a6c4b6d3d40c62f3">&#9670;&nbsp;</a></span>usable()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool usable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>has the list at least one good entry</p>
<p>similar to <a class="el" href="classHashStringList.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>, but handles forced hashes.</p>
<dl class="section return"><dt>Returns</dt><dd>if no hash is forced, same result as <a class="el" href="classHashStringList.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>, if one is forced <b>true</b> if this has is available, <b>false</b> otherwise </dd></dl>

<p class="reference">References <a class="el" href="classHashStringList.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty()</a>, and <a class="el" href="classHashStringList.xhtml#a6af9b51411b3a757213e4c0f7b4a25b9">find()</a>.</p>

<p class="reference">Referenced by <a class="el" href="classpkgAcqDiffIndex.xhtml#a3980b570ebaa4972bbe5218ba6d3e32b">pkgAcqDiffIndex::ParseDiffIndex()</a>, and <a class="el" href="classpkgAcqMetaClearSig.xhtml#a19e175320e9e5d97d477bf174a616a0a">pkgAcqMetaClearSig::QueueIndexes()</a>.</p>

</div>
</div>
<a id="a1bc5c62e61246f1538e90b211f4d306f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bc5c62e61246f1538e90b211f4d306f">&#9670;&nbsp;</a></span>VerifyFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool VerifyFile </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>verify file against all hashes in the list</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>to verify </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the file matches the hashsum, otherwise false </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>apt-pkg/contrib/<a class="el" href="hashes_8h_source.xhtml">hashes.h</a></li>
<li>apt-pkg/contrib/hashes.cc</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
