<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: pkgAcquireStatus Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classpkgAcquireStatus-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">pkgAcquireStatus Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__acquire.xhtml">Acquire system                                        {{{</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>A monitor object for downloads controlled by the <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> class. {{{.  
 <a href="classpkgAcquireStatus.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="acquire_8h_source.xhtml">apt-pkg/acquire.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structpkgAcquireStatus_1_1ReleaseInfoChange.xhtml">ReleaseInfoChange</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae1ac138afa29527542590c89dcc065a9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#ae1ac138afa29527542590c89dcc065a9">Fetched</a> (unsigned long long Size, unsigned long long ResumePoint)</td></tr>
<tr class="memdesc:ae1ac138afa29527542590c89dcc065a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when a local or remote file has been completely fetched.  <a href="classpkgAcquireStatus.xhtml#ae1ac138afa29527542590c89dcc065a9">More...</a><br /></td></tr>
<tr class="separator:ae1ac138afa29527542590c89dcc065a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61c6f568f6582836223430d117a62e69"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a61c6f568f6582836223430d117a62e69">MediaChange</a> (std::string Media, std::string Drive)=0</td></tr>
<tr class="memdesc:a61c6f568f6582836223430d117a62e69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when the user should be prompted to change the inserted removable media.  <a href="classpkgAcquireStatus.xhtml#a61c6f568f6582836223430d117a62e69">More...</a><br /></td></tr>
<tr class="separator:a61c6f568f6582836223430d117a62e69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af526301de6c334f053a57a05b204b77b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#af526301de6c334f053a57a05b204b77b">ReleaseInfoChanges</a> (<a class="el" href="classmetaIndex.xhtml">metaIndex</a> const *const LastRelease, <a class="el" href="classmetaIndex.xhtml">metaIndex</a> const *const CurrentRelease, std::vector&lt; <a class="el" href="structpkgAcquireStatus_1_1ReleaseInfoChange.xhtml">ReleaseInfoChange</a> &gt; &amp;&amp;Changes)</td></tr>
<tr class="memdesc:af526301de6c334f053a57a05b204b77b"><td class="mdescLeft">&#160;</td><td class="mdescRight">ask the user for confirmation of changes to infos about a repository  <a href="classpkgAcquireStatus.xhtml#af526301de6c334f053a57a05b204b77b">More...</a><br /></td></tr>
<tr class="separator:af526301de6c334f053a57a05b204b77b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31421608993b5036d3d5aa465a4b7a83"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a31421608993b5036d3d5aa465a4b7a83">IMSHit</a> (pkgAcquire::ItemDesc &amp;)</td></tr>
<tr class="memdesc:a31421608993b5036d3d5aa465a4b7a83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when an item is confirmed to be up-to-date.  <a href="classpkgAcquireStatus.xhtml#a31421608993b5036d3d5aa465a4b7a83">More...</a><br /></td></tr>
<tr class="separator:a31421608993b5036d3d5aa465a4b7a83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f115e9a73caa8e6a665228d46625c16"><td class="memItemLeft" align="right" valign="top"><a id="a6f115e9a73caa8e6a665228d46625c16"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a6f115e9a73caa8e6a665228d46625c16">Fetch</a> (pkgAcquire::ItemDesc &amp;)</td></tr>
<tr class="memdesc:a6f115e9a73caa8e6a665228d46625c16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when some of an item's data is fetched. <br /></td></tr>
<tr class="separator:a6f115e9a73caa8e6a665228d46625c16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6043ea862253ac53dd4c6487c242971e"><td class="memItemLeft" align="right" valign="top"><a id="a6043ea862253ac53dd4c6487c242971e"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a6043ea862253ac53dd4c6487c242971e">Done</a> (pkgAcquire::ItemDesc &amp;)</td></tr>
<tr class="memdesc:a6043ea862253ac53dd4c6487c242971e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when an item is successfully and completely fetched. <br /></td></tr>
<tr class="separator:a6043ea862253ac53dd4c6487c242971e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c697905fd152636d1970bbfe7783684"><td class="memItemLeft" align="right" valign="top"><a id="a5c697905fd152636d1970bbfe7783684"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a5c697905fd152636d1970bbfe7783684">Fail</a> (pkgAcquire::ItemDesc &amp;)</td></tr>
<tr class="memdesc:a5c697905fd152636d1970bbfe7783684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when the process of fetching an item encounters a fatal error. <br /></td></tr>
<tr class="separator:a5c697905fd152636d1970bbfe7783684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b094d1d0cbeadde35a2f09d6e60bf3f"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f">Pulse</a> (<a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *Owner)</td></tr>
<tr class="memdesc:a3b094d1d0cbeadde35a2f09d6e60bf3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Periodically invoked while the Acquire process is underway.  <a href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f">More...</a><br /></td></tr>
<tr class="separator:a3b094d1d0cbeadde35a2f09d6e60bf3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07aaf1227e4d645f15e0a964f54ef291"><td class="memItemLeft" align="right" valign="top"><a id="a07aaf1227e4d645f15e0a964f54ef291"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a07aaf1227e4d645f15e0a964f54ef291">Start</a> ()</td></tr>
<tr class="memdesc:a07aaf1227e4d645f15e0a964f54ef291"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when the Acquire process starts running. <br /></td></tr>
<tr class="separator:a07aaf1227e4d645f15e0a964f54ef291"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17a237457e57625296e6b24feb19c60a"><td class="memItemLeft" align="right" valign="top"><a id="a17a237457e57625296e6b24feb19c60a"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a17a237457e57625296e6b24feb19c60a">Stop</a> ()</td></tr>
<tr class="memdesc:a17a237457e57625296e6b24feb19c60a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoked when the Acquire process stops running. <br /></td></tr>
<tr class="separator:a17a237457e57625296e6b24feb19c60a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65aadfe2ebefc7ef551dd996063b2bba"><td class="memItemLeft" align="right" valign="top"><a id="a65aadfe2ebefc7ef551dd996063b2bba"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a65aadfe2ebefc7ef551dd996063b2bba">pkgAcquireStatus</a> ()</td></tr>
<tr class="memdesc:a65aadfe2ebefc7ef551dd996063b2bba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize all counters to 0 and the time to the current time. <br /></td></tr>
<tr class="separator:a65aadfe2ebefc7ef551dd996063b2bba"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aa0fad3d13184b3ac760f459937ef3932"><td class="memItemLeft" align="right" valign="top"><a id="aa0fad3d13184b3ac760f459937ef3932"></a>
static APT_HIDDEN bool&#160;</td><td class="memItemRight" valign="bottom"><b>ReleaseInfoChangesAsGlobalErrors</b> (std::vector&lt; <a class="el" href="structpkgAcquireStatus_1_1ReleaseInfoChange.xhtml">ReleaseInfoChange</a> &gt; &amp;&amp;Changes)</td></tr>
<tr class="separator:aa0fad3d13184b3ac760f459937ef3932"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a75386dbaef64dae27df6f182185de329"><td class="memItemLeft" align="right" valign="top"><a id="a75386dbaef64dae27df6f182185de329"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a75386dbaef64dae27df6f182185de329">Update</a></td></tr>
<tr class="memdesc:a75386dbaef64dae27df6f182185de329"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, the download scheduler should call <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">Pulse()</a> at the next available opportunity. <br /></td></tr>
<tr class="separator:a75386dbaef64dae27df6f182185de329"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8888d6bbff950b1d8a84124a41bcea77"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a8888d6bbff950b1d8a84124a41bcea77">MorePulses</a></td></tr>
<tr class="memdesc:a8888d6bbff950b1d8a84124a41bcea77"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <b>true</b>, extra <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">Pulse()</a> invocations will be performed.  <a href="classpkgAcquireStatus.xhtml#a8888d6bbff950b1d8a84124a41bcea77">More...</a><br /></td></tr>
<tr class="separator:a8888d6bbff950b1d8a84124a41bcea77"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a7f0b9956570bf544551d6288519d501c"><td class="memItemLeft" align="right" valign="top"><a id="a7f0b9956570bf544551d6288519d501c"></a>
struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a7f0b9956570bf544551d6288519d501c">Time</a></td></tr>
<tr class="memdesc:a7f0b9956570bf544551d6288519d501c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The last time at which this monitor object was updated. <br /></td></tr>
<tr class="separator:a7f0b9956570bf544551d6288519d501c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5317f41dbf24dd14106c90ad772ee08e"><td class="memItemLeft" align="right" valign="top"><a id="a5317f41dbf24dd14106c90ad772ee08e"></a>
struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a5317f41dbf24dd14106c90ad772ee08e">StartTime</a></td></tr>
<tr class="memdesc:a5317f41dbf24dd14106c90ad772ee08e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The time at which the download started. <br /></td></tr>
<tr class="separator:a5317f41dbf24dd14106c90ad772ee08e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adad74148bc0a0f410de29f3f7863f013"><td class="memItemLeft" align="right" valign="top"><a id="adad74148bc0a0f410de29f3f7863f013"></a>
unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#adad74148bc0a0f410de29f3f7863f013">LastBytes</a></td></tr>
<tr class="memdesc:adad74148bc0a0f410de29f3f7863f013"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of bytes fetched as of the previous call to <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">pkgAcquireStatus::Pulse</a>, including local items. <br /></td></tr>
<tr class="separator:adad74148bc0a0f410de29f3f7863f013"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab935757c5f7498bd38f5ac2f53859098"><td class="memItemLeft" align="right" valign="top"><a id="ab935757c5f7498bd38f5ac2f53859098"></a>
unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#ab935757c5f7498bd38f5ac2f53859098">CurrentCPS</a></td></tr>
<tr class="memdesc:ab935757c5f7498bd38f5ac2f53859098"><td class="mdescLeft">&#160;</td><td class="mdescRight">The current rate of download as of the most recent call to <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">pkgAcquireStatus::Pulse</a>, in bytes per second. <br /></td></tr>
<tr class="separator:ab935757c5f7498bd38f5ac2f53859098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a839c10cdfc05e059bd3ec88965db5585"><td class="memItemLeft" align="right" valign="top"><a id="a839c10cdfc05e059bd3ec88965db5585"></a>
unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a839c10cdfc05e059bd3ec88965db5585">CurrentBytes</a></td></tr>
<tr class="memdesc:a839c10cdfc05e059bd3ec88965db5585"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of bytes fetched as of the most recent call to <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">pkgAcquireStatus::Pulse</a>, including local items. <br /></td></tr>
<tr class="separator:a839c10cdfc05e059bd3ec88965db5585"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1ad65db4dde0b9750bde5349e8a78d5"><td class="memItemLeft" align="right" valign="top">unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#aa1ad65db4dde0b9750bde5349e8a78d5">TotalBytes</a></td></tr>
<tr class="memdesc:aa1ad65db4dde0b9750bde5349e8a78d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">The total number of bytes that need to be fetched.  <a href="classpkgAcquireStatus.xhtml#aa1ad65db4dde0b9750bde5349e8a78d5">More...</a><br /></td></tr>
<tr class="separator:aa1ad65db4dde0b9750bde5349e8a78d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70569692426d234ad8d8b820c86a3309"><td class="memItemLeft" align="right" valign="top"><a id="a70569692426d234ad8d8b820c86a3309"></a>
unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a70569692426d234ad8d8b820c86a3309">FetchedBytes</a></td></tr>
<tr class="memdesc:a70569692426d234ad8d8b820c86a3309"><td class="mdescLeft">&#160;</td><td class="mdescRight">The total number of bytes accounted for by items that were successfully fetched. <br /></td></tr>
<tr class="separator:a70569692426d234ad8d8b820c86a3309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3150f73ac776293da38e85adad70a242"><td class="memItemLeft" align="right" valign="top"><a id="a3150f73ac776293da38e85adad70a242"></a>
unsigned long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a3150f73ac776293da38e85adad70a242">ElapsedTime</a></td></tr>
<tr class="memdesc:a3150f73ac776293da38e85adad70a242"><td class="mdescLeft">&#160;</td><td class="mdescRight">The amount of time that has elapsed since the download started. <br /></td></tr>
<tr class="separator:a3150f73ac776293da38e85adad70a242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae422deccb4fc1ae710c07b5120c68321"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#ae422deccb4fc1ae710c07b5120c68321">TotalItems</a></td></tr>
<tr class="memdesc:ae422deccb4fc1ae710c07b5120c68321"><td class="mdescLeft">&#160;</td><td class="mdescRight">The total number of items that need to be fetched.  <a href="classpkgAcquireStatus.xhtml#ae422deccb4fc1ae710c07b5120c68321">More...</a><br /></td></tr>
<tr class="separator:ae422deccb4fc1ae710c07b5120c68321"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fde14d094769c8f2bb3cb65f040a6fd"><td class="memItemLeft" align="right" valign="top"><a id="a9fde14d094769c8f2bb3cb65f040a6fd"></a>
unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a9fde14d094769c8f2bb3cb65f040a6fd">CurrentItems</a></td></tr>
<tr class="memdesc:a9fde14d094769c8f2bb3cb65f040a6fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of items that have been successfully downloaded. <br /></td></tr>
<tr class="separator:a9fde14d094769c8f2bb3cb65f040a6fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59f26e718fb0b5e6ec8aeb81c1e6163e"><td class="memItemLeft" align="right" valign="top"><a id="a59f26e718fb0b5e6ec8aeb81c1e6163e"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpkgAcquireStatus.xhtml#a59f26e718fb0b5e6ec8aeb81c1e6163e">Percent</a></td></tr>
<tr class="memdesc:a59f26e718fb0b5e6ec8aeb81c1e6163e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The estimated percentage of the download (0-100) <br /></td></tr>
<tr class="separator:a59f26e718fb0b5e6ec8aeb81c1e6163e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A monitor object for downloads controlled by the <a class="el" href="classpkgAcquire.xhtml" title="Represents the process by which a pkgAcquire object should retrieve a file or a collection of files.">pkgAcquire</a> class. {{{. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000019">Todo:</a></b></dt><dd>Why protected members? </dd></dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ae1ac138afa29527542590c89dcc065a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1ac138afa29527542590c89dcc065a9">&#9670;&nbsp;</a></span>Fetched()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Fetched </td>
          <td>(</td>
          <td class="paramtype">unsigned long long&#160;</td>
          <td class="paramname"><em>Size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long long&#160;</td>
          <td class="paramname"><em>ResumePoint</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked when a local or remote file has been completely fetched. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Size</td><td>The size of the file fetched.</td></tr>
    <tr><td class="paramname">ResumePoint</td><td>How much of the file was already fetched. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="classpkgAcquireStatus.xhtml#a70569692426d234ad8d8b820c86a3309">FetchedBytes</a>.</p>

</div>
</div>
<a id="a31421608993b5036d3d5aa465a4b7a83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31421608993b5036d3d5aa465a4b7a83">&#9670;&nbsp;</a></span>IMSHit()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void IMSHit </td>
          <td>(</td>
          <td class="paramtype">pkgAcquire::ItemDesc &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked when an item is confirmed to be up-to-date. </p>
<p>For instance, when an HTTP download is informed that the file on the server was not modified. </p>

</div>
</div>
<a id="a61c6f568f6582836223430d117a62e69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61c6f568f6582836223430d117a62e69">&#9670;&nbsp;</a></span>MediaChange()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool MediaChange </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>Media</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>Drive</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invoked when the user should be prompted to change the inserted removable media. </p>
<p>This method should not return until the user has confirmed to the user interface that the media change is complete.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Media</td><td>The name of the media type that should be changed.</td></tr>
    <tr><td class="paramname">Drive</td><td>The identifying name of the drive whose media should be changed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if the user confirms the media change, <b>false</b> if it is cancelled.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000029">Todo:</a></b></dt><dd>This is a horrible blocking monster; it should be CPSed with prejudice. </dd></dl>

</div>
</div>
<a id="a3b094d1d0cbeadde35a2f09d6e60bf3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b094d1d0cbeadde35a2f09d6e60bf3f">&#9670;&nbsp;</a></span>Pulse()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Pulse </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpkgAcquire.xhtml">pkgAcquire</a> *&#160;</td>
          <td class="paramname"><em>Owner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Periodically invoked while the Acquire process is underway. </p>
<p>Subclasses should first call <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">pkgAcquireStatus::Pulse()</a>, then update their status output. The download process is blocked while <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">Pulse()</a> is being called.</p>
<dl class="section return"><dt>Returns</dt><dd><b>false</b> if the user asked to cancel the whole Acquire process.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8" title="Download all the items that have been Add()ed to this download process.">pkgAcquire::Run</a> </dd></dl>

<p class="reference">References <a class="el" href="classpkgAcquireStatus.xhtml#a839c10cdfc05e059bd3ec88965db5585">CurrentBytes</a>, <a class="el" href="classpkgAcquireStatus.xhtml#ab935757c5f7498bd38f5ac2f53859098">CurrentCPS</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a9fde14d094769c8f2bb3cb65f040a6fd">CurrentItems</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a3150f73ac776293da38e85adad70a242">ElapsedTime</a>, <a class="el" href="classpkgAcquire.xhtml#af54b860e41ab56ec44a007f3542dbe82">pkgAcquire::ItemsBegin()</a>, <a class="el" href="classpkgAcquire.xhtml#a06f41681fab7fd54db89fa55c09fac43">pkgAcquire::ItemsEnd()</a>, <a class="el" href="classpkgAcquireStatus.xhtml#adad74148bc0a0f410de29f3f7863f013">LastBytes</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a59f26e718fb0b5e6ec8aeb81c1e6163e">Percent</a>, <a class="el" href="classpkgAcquireStatus.xhtml#a7f0b9956570bf544551d6288519d501c">Time</a>, <a class="el" href="classpkgAcquireStatus.xhtml#aa1ad65db4dde0b9750bde5349e8a78d5">TotalBytes</a>, <a class="el" href="classpkgAcquireStatus.xhtml#ae422deccb4fc1ae710c07b5120c68321">TotalItems</a>, <a class="el" href="classpkgAcquire.xhtml#ac0cf8a483d82d1372c6f7d499937860c">pkgAcquire::Worker()</a>, <a class="el" href="classpkgAcquire.xhtml#a1670b365447a9c9262393be646dc0c83">pkgAcquire::WorkersBegin()</a>, and <a class="el" href="classpkgAcquire.xhtml#ae88f77b544d05718eb98cf4c93bad3e8">pkgAcquire::WorkerStep()</a>.</p>

<p class="reference">Referenced by <a class="el" href="classpkgAcquire.xhtml#af15888f17717fe69c2a9d4a3f511b4a8">pkgAcquire::Run()</a>.</p>

</div>
</div>
<a id="af526301de6c334f053a57a05b204b77b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af526301de6c334f053a57a05b204b77b">&#9670;&nbsp;</a></span>ReleaseInfoChanges()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ReleaseInfoChanges </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classmetaIndex.xhtml">metaIndex</a> const *const&#160;</td>
          <td class="paramname"><em>LastRelease</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classmetaIndex.xhtml">metaIndex</a> const *const&#160;</td>
          <td class="paramname"><em>CurrentRelease</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="structpkgAcquireStatus_1_1ReleaseInfoChange.xhtml">ReleaseInfoChange</a> &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>Changes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>ask the user for confirmation of changes to infos about a repository </p>
<p>This method should present the user with a choice of accepting the change or not and indicate the user opinion via the return value. If DefaultAction is true it is acceptable to only notify the user about the change, but to accept the change automatically on behalf of the user.</p>
<p>The default implementation will fail if any Change has DefaultAction == false. Regardless of success it will print for each change the message attached to it via <a class="el" href="classGlobalError.xhtml">GlobalError</a> either as an error (if DefaultAction == false) or as a notice otherwise.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">LastRelease</td><td>can be used to extract further information from the previous Release file </td></tr>
    <tr><td class="paramname">CurrentRelease</td><td>can be used to extract further information from the current Release file </td></tr>
    <tr><td class="paramname">Changes</td><td>is an array of changes alongside explanatory messages which should be presented in some way to the user. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> if all changes are accepted by user, otherwise or if user can't be asked <b>false</b> </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcqMetaBase.xhtml#a94ab40c779f200a8895c219f51fbc546">pkgAcqMetaBase::VerifyVendor()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a8888d6bbff950b1d8a84124a41bcea77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8888d6bbff950b1d8a84124a41bcea77">&#9670;&nbsp;</a></span>MorePulses</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool MorePulses</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If <b>true</b>, extra <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">Pulse()</a> invocations will be performed. </p>
<p>With this option set, <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f" title="Periodically invoked while the Acquire process is underway.">Pulse()</a> will be called every time that a download item starts downloading, finishes downloading, or terminates with an error. </p>

</div>
</div>
<a id="aa1ad65db4dde0b9750bde5349e8a78d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1ad65db4dde0b9750bde5349e8a78d5">&#9670;&nbsp;</a></span>TotalBytes</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long long TotalBytes</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The total number of bytes that need to be fetched. </p>
<dl class="section warning"><dt>Warning</dt><dd>This member is inaccurate, as new items might be enqueued while the download is in progress! </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f">Pulse()</a>, and <a class="el" href="classpkgAcquireStatus.xhtml#a07aaf1227e4d645f15e0a964f54ef291">Start()</a>.</p>

</div>
</div>
<a id="ae422deccb4fc1ae710c07b5120c68321"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae422deccb4fc1ae710c07b5120c68321">&#9670;&nbsp;</a></span>TotalItems</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long TotalItems</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The total number of items that need to be fetched. </p>
<dl class="section warning"><dt>Warning</dt><dd>This member is inaccurate, as new items might be enqueued while the download is in progress! </dd></dl>

<p class="reference">Referenced by <a class="el" href="classpkgAcquireStatus.xhtml#a3b094d1d0cbeadde35a2f09d6e60bf3f">Pulse()</a>, and <a class="el" href="classpkgAcquireStatus.xhtml#a07aaf1227e4d645f15e0a964f54ef291">Start()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>apt-pkg/<a class="el" href="acquire_8h_source.xhtml">acquire.h</a></li>
<li>apt-pkg/acquire.cc</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
