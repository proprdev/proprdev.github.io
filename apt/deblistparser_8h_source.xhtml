<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/deb/deblistparser.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_b856b2b7784a7c6bda5cb12e6897d9ab.xhtml">deb</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">deblistparser.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Debian Package List Parser - This implements the abstract parser </span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   interface for Debian package files</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#ifndef PKGLIB_DEBLISTPARSER_H</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#define PKGLIB_DEBLISTPARSER_H</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="pkgcache_8h.xhtml">apt-pkg/pkgcache.h</a>&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/pkgcachegen.h&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/tagfile.h&gt;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/string_view.h&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">class </span><a class="code" href="classFileFd.xhtml">FileFd</a>;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classdebListParser.xhtml">   25</a></span>&#160;<span class="keyword">class </span>APT_HIDDEN <a class="code" href="classdebListParser.xhtml">debListParser</a> : <span class="keyword">public</span> <a class="code" href="classpkgCacheListParser.xhtml">pkgCacheListParser</a></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;   <span class="comment">// Parser Helper</span></div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="structdebListParser_1_1WordList.xhtml">   30</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structdebListParser_1_1WordList.xhtml">WordList</a></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;   {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Str;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> Val;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;   };</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;   <span class="keyword">private</span>:</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;   std::vector&lt;std::string&gt; forceEssential;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;   std::vector&lt;std::string&gt; forceImportant;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;   std::string MD5Buffer;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;   std::string myArch;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;   <a class="code" href="classpkgTagFile.xhtml">pkgTagFile</a> Tags;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;   <a class="code" href="classpkgTagSection.xhtml">pkgTagSection</a> Section;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;   map_filesize_t iOffset;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ParseStatus(pkgCache::PkgIterator &amp;Pkg,pkgCache::VerIterator &amp;Ver);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;   <span class="keywordtype">bool</span> ParseDepends(pkgCache::VerIterator &amp;Ver, pkgTagSection::Key Key,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Type);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;   <span class="keywordtype">bool</span> ParseProvides(pkgCache::VerIterator &amp;Ver);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;   APT_HIDDEN <span class="keyword">static</span> <span class="keywordtype">bool</span> GrabWord(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Word,<span class="keyword">const</span> <a class="code" href="structdebListParser_1_1WordList.xhtml">WordList</a> *List,<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> &amp;Out);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;   APT_HIDDEN <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> ParseMultiArch(<span class="keywordtype">bool</span> <span class="keyword">const</span> showErrors);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   APT_PUBLIC <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> GetPrio(std::string Str);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;   <span class="comment">// These all operate against the current section</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;   <span class="keyword">virtual</span> std::string Package() APT_OVERRIDE;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;   virtual <span class="keywordtype">bool</span> ArchitectureAll() APT_OVERRIDE;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;   virtual APT::StringView Architecture() APT_OVERRIDE;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;   virtual APT::StringView Version() APT_OVERRIDE;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;   virtual <span class="keywordtype">bool</span> NewVersion(<a class="code" href="classpkgCache.xhtml">pkgCache</a>::VerIterator &amp;Ver) APT_OVERRIDE;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;   virtual std::vector&lt;std::<span class="keywordtype">string</span>&gt; AvailableDescriptionLanguages() APT_OVERRIDE;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;   virtual APT::StringView Description_md5() APT_OVERRIDE;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;   virtual uint32_t VersionHash() APT_OVERRIDE;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;   virtual <span class="keywordtype">bool</span> SameVersion(uint32_t Hash, <a class="code" href="classpkgCache.xhtml">pkgCache</a>::VerIterator const &amp;Ver) APT_OVERRIDE;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;   virtual <span class="keywordtype">bool</span> UsePackage(<a class="code" href="classpkgCache.xhtml">pkgCache</a>::PkgIterator &amp;Pkg,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                           <a class="code" href="classpkgCache.xhtml">pkgCache</a>::VerIterator &amp;Ver) APT_OVERRIDE;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   virtual map_filesize_t Offset() APT_OVERRIDE {<span class="keywordflow">return</span> iOffset;};</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;   <span class="keyword">virtual</span> map_filesize_t Size() APT_OVERRIDE {<span class="keywordflow">return</span> Section.size();};</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Step() APT_OVERRIDE;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;   APT_PUBLIC static const <span class="keywordtype">char</span> *ParseDepends(const <span class="keywordtype">char</span> *Start, const <span class="keywordtype">char</span> *Stop,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                              std::<span class="keywordtype">string</span> &amp;Package, std::<span class="keywordtype">string</span> &amp;Ver, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;Op,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                              <span class="keywordtype">bool</span> const &amp;ParseArchFlags = false, <span class="keywordtype">bool</span> const &amp;StripMultiArch = true,</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                              <span class="keywordtype">bool</span> const &amp;ParseRestrictionsList = false,</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                              std::<span class="keywordtype">string</span> const &amp;Arch = &quot;&quot;);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;   APT_PUBLIC static const <span class="keywordtype">char</span> *ParseDepends(const <span class="keywordtype">char</span> *Start, const <span class="keywordtype">char</span> *Stop,</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                              APT::StringView &amp;Package,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                              APT::StringView &amp;Ver, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;Op,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                              <span class="keywordtype">bool</span> const ParseArchFlags = false, <span class="keywordtype">bool</span> StripMultiArch = true,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                              <span class="keywordtype">bool</span> const ParseRestrictionsList = false,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                              std::<span class="keywordtype">string</span> Arch = &quot;&quot;);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;   APT_PUBLIC static const <span class="keywordtype">char</span> *ConvertRelation(const <span class="keywordtype">char</span> *I,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;Op);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;   explicit <a class="code" href="classdebListParser.xhtml">debListParser</a>(<a class="code" href="classFileFd.xhtml">FileFd</a> *File);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;   virtual ~<a class="code" href="classdebListParser.xhtml">debListParser</a>();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;};</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classdebDebFileParser.xhtml">   95</a></span>&#160;class APT_HIDDEN <a class="code" href="classdebDebFileParser.xhtml">debDebFileParser</a> : public <a class="code" href="classdebListParser.xhtml">debListParser</a></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; <span class="keyword">private</span>:</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;   std::string DebFile;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;   <a class="code" href="classdebDebFileParser.xhtml">debDebFileParser</a>(<a class="code" href="classFileFd.xhtml">FileFd</a> *File, std::string <span class="keyword">const</span> &amp;DebFile);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> UsePackage(pkgCache::PkgIterator &amp;Pkg,</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                           pkgCache::VerIterator &amp;Ver) APT_OVERRIDE;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;};</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classdebTranslationsParser.xhtml">  106</a></span>&#160;<span class="keyword">class </span>APT_HIDDEN <a class="code" href="classdebTranslationsParser.xhtml">debTranslationsParser</a> : <span class="keyword">public</span> <a class="code" href="classdebListParser.xhtml">debListParser</a></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;   <span class="comment">// a translation can never be a real package</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;   <span class="keyword">virtual</span> <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Architecture() APT_OVERRIDE { <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>; }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;   <span class="keyword">virtual</span> <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> Version() APT_OVERRIDE { <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>; }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="classdebTranslationsParser.xhtml">debTranslationsParser</a>(<a class="code" href="classFileFd.xhtml">FileFd</a> *File)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      : <a class="code" href="classdebListParser.xhtml">debListParser</a>(File) {};</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;};</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classdebStatusListParser.xhtml">  117</a></span>&#160;<span class="keyword">class </span>APT_HIDDEN <a class="code" href="classdebStatusListParser.xhtml">debStatusListParser</a> : <span class="keyword">public</span> <a class="code" href="classdebListParser.xhtml">debListParser</a></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ParseStatus(pkgCache::PkgIterator &amp;Pkg,pkgCache::VerIterator &amp;Ver) APT_OVERRIDE;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="classdebStatusListParser.xhtml">debStatusListParser</a>(<a class="code" href="classFileFd.xhtml">FileFd</a> *File)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      : <a class="code" href="classdebListParser.xhtml">debListParser</a>(File) {};</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;};</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassAPT_1_1StringView_xhtml"><div class="ttname"><a href="classAPT_1_1StringView.xhtml">APT::StringView</a></div><div class="ttdoc">Simple subset of std::string_view from C++17.</div><div class="ttdef"><b>Definition:</b> string_view.h:27</div></div>
<div class="ttc" id="aclassFileFd_xhtml"><div class="ttname"><a href="classFileFd.xhtml">FileFd</a></div><div class="ttdef"><b>Definition:</b> fileutl.h:39</div></div>
<div class="ttc" id="aclassdebDebFileParser_xhtml"><div class="ttname"><a href="classdebDebFileParser.xhtml">debDebFileParser</a></div><div class="ttdef"><b>Definition:</b> deblistparser.h:96</div></div>
<div class="ttc" id="aclassdebListParser_xhtml"><div class="ttname"><a href="classdebListParser.xhtml">debListParser</a></div><div class="ttdef"><b>Definition:</b> deblistparser.h:26</div></div>
<div class="ttc" id="aclassdebStatusListParser_xhtml"><div class="ttname"><a href="classdebStatusListParser.xhtml">debStatusListParser</a></div><div class="ttdef"><b>Definition:</b> deblistparser.h:118</div></div>
<div class="ttc" id="aclassdebTranslationsParser_xhtml"><div class="ttname"><a href="classdebTranslationsParser.xhtml">debTranslationsParser</a></div><div class="ttdef"><b>Definition:</b> deblistparser.h:107</div></div>
<div class="ttc" id="aclasspkgCacheListParser_xhtml"><div class="ttname"><a href="classpkgCacheListParser.xhtml">pkgCacheListParser</a></div><div class="ttdef"><b>Definition:</b> pkgcachegen.h:172</div></div>
<div class="ttc" id="aclasspkgCache_xhtml"><div class="ttname"><a href="classpkgCache.xhtml">pkgCache</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:48</div></div>
<div class="ttc" id="aclasspkgTagFile_xhtml"><div class="ttname"><a href="classpkgTagFile.xhtml">pkgTagFile</a></div><div class="ttdef"><b>Definition:</b> tagfile.h:174</div></div>
<div class="ttc" id="aclasspkgTagSection_xhtml"><div class="ttname"><a href="classpkgTagSection.xhtml">pkgTagSection</a></div><div class="ttdef"><b>Definition:</b> tagfile.h:45</div></div>
<div class="ttc" id="apkgcache_8h_xhtml"><div class="ttname"><a href="pkgcache_8h.xhtml">pkgcache.h</a></div><div class="ttdoc">pkgCache - Structure definitions for the cache file</div></div>
<div class="ttc" id="astructdebListParser_1_1WordList_xhtml"><div class="ttname"><a href="structdebListParser_1_1WordList.xhtml">debListParser::WordList</a></div><div class="ttdef"><b>Definition:</b> deblistparser.h:31</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
