<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/contrib/string_view.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_c6ef23f15b074dcedf6810e24f2a7676.xhtml">contrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">string_view.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Basic implementation of string_view</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * (C) 2015 Julian Andres Klode &lt;jak@debian.org&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * the Free Software Foundation; either version 2 of the License, or</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * (at your option) any later version.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#if !defined(APT_STRINGVIEW_H)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#define APT_STRINGVIEW_H</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span>APT {</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classAPT_1_1StringView.xhtml">   27</a></span>&#160;<span class="keyword">class </span><a class="code" href="classAPT_1_1StringView.xhtml">StringView</a> {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *data_;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordtype">size_t</span> size_;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> npos = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(-1);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    static_assert(APT::StringView::npos == std::string::npos, <span class="stringliteral">&quot;npos values are different&quot;</span>);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">/* Constructors */</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    constexpr <a class="code" href="classAPT_1_1StringView.xhtml">StringView</a>() : data_(<span class="stringliteral">&quot;&quot;</span>), size_(0) {}</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    constexpr <a class="code" href="classAPT_1_1StringView.xhtml">StringView</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *data, <span class="keywordtype">size_t</span> size) : data_(data), size_(size) {}</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="classAPT_1_1StringView.xhtml">StringView</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *data) : data_(data), size_(strlen(data)) {}</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="classAPT_1_1StringView.xhtml">StringView</a>(std::string <span class="keyword">const</span> &amp; str): data_(str.data()), size_(str.size()) {}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">/* Modifiers */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">void</span> remove_prefix(<span class="keywordtype">size_t</span> n) { data_ += n; size_ -= n; }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">void</span> remove_suffix(<span class="keywordtype">size_t</span> n) { size_ -= n; }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">void</span> clear() { size_ = 0; }</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">/* Viewers */</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    constexpr <a class="code" href="classAPT_1_1StringView.xhtml">StringView</a> substr(<span class="keywordtype">size_t</span> pos, <span class="keywordtype">size_t</span> n = npos)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classAPT_1_1StringView.xhtml">StringView</a>(data_ + pos, n &gt; (size_ - pos) ? (size_ - pos) : n);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">size_t</span> find(<span class="keywordtype">int</span> c, <span class="keywordtype">size_t</span> pos)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;       <span class="keywordflow">if</span> (pos == 0)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;          <span class="keywordflow">return</span> find(c);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;       <span class="keywordtype">size_t</span> <span class="keyword">const</span> found = substr(pos).find(c);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;       <span class="keywordflow">if</span> (found == npos)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;          <span class="keywordflow">return</span> npos;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;       <span class="keywordflow">return</span> pos + found;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">size_t</span> find(<span class="keywordtype">int</span> c)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> *found = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(memchr(data_, c, size_));</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">if</span> (found == NULL)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">return</span> npos;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> found - data_;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">size_t</span> rfind(<span class="keywordtype">int</span> c, <span class="keywordtype">size_t</span> pos)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;       <span class="keywordflow">if</span> (pos == npos)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;          <span class="keywordflow">return</span> rfind(c);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;       <span class="keywordflow">return</span> <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a>(data_, pos).rfind(c);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">size_t</span> rfind(<span class="keywordtype">int</span> c)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> *found = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(memrchr(data_, c, size_));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">if</span> (found == NULL)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">return</span> npos;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">return</span> found - data_;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">size_t</span> find(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> <span class="keyword">const</span> needle)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;       <span class="keywordflow">if</span> (needle.empty())</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;          <span class="keywordflow">return</span> npos;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;       <span class="keywordflow">if</span> (needle.length() == 1)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;          <span class="keywordflow">return</span> find(*needle.data());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;       <span class="keywordtype">size_t</span> found = 0;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;       <span class="keywordflow">while</span> ((found = find(*needle.data(), found)) != npos) {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;          <span class="keywordflow">if</span> (compare(found, needle.length(), needle) == 0)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;             <span class="keywordflow">return</span> found;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;          ++found;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;       }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;       <span class="keywordflow">return</span> found;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">size_t</span> find(<a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> <span class="keyword">const</span> needle, <span class="keywordtype">size_t</span> pos)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;       <span class="keywordflow">if</span> (pos == 0)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;          <span class="keywordflow">return</span> find(needle);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;       <span class="keywordtype">size_t</span> <span class="keyword">const</span> found = substr(pos).find(needle);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;       <span class="keywordflow">if</span> (found == npos)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;          <span class="keywordflow">return</span> npos;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;       <span class="keywordflow">return</span> pos + found;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">/* Conversions */</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::string to_string()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">return</span> std::string(data_, size_);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">/* Comparisons */</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">int</span> compare(<span class="keywordtype">size_t</span> pos, <span class="keywordtype">size_t</span> n, <a class="code" href="classAPT_1_1StringView.xhtml">StringView</a> other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">return</span> substr(pos, n).compare(other);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">int</span> compare(<a class="code" href="classAPT_1_1StringView.xhtml">StringView</a> other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordtype">int</span> res;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        res = memcmp(data_, other.data_, std::min(size_, other.size_));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> (res != 0)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">if</span> (size_ == other.size_)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> (size_ &gt; other.size_) ? 1 : -1;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">/* Optimization: If size not equal, string cannot be equal */</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">bool</span> operator ==(<a class="code" href="classAPT_1_1StringView.xhtml">StringView</a> other)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> size_ == other.size_ &amp;&amp; compare(other) == 0; }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">bool</span> operator !=(<a class="code" href="classAPT_1_1StringView.xhtml">StringView</a> other)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other); }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">/* Accessors */</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    constexpr <span class="keywordtype">bool</span> empty()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> size_ == 0; }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    constexpr <span class="keyword">const</span> <span class="keywordtype">char</span>* data()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> data_; }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    constexpr <span class="keyword">const</span> <span class="keywordtype">char</span>* begin()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> data_; }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    constexpr <span class="keyword">const</span> <span class="keywordtype">char</span>* end()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> data_ + size_; }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    constexpr <span class="keywordtype">char</span> operator [](<span class="keywordtype">size_t</span> i)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> data_[i]; }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    constexpr <span class="keywordtype">size_t</span> size()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> size_; }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    constexpr <span class="keywordtype">size_t</span> length()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> size_; }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;};</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> StringViewCompareFast(<a class="code" href="classAPT_1_1StringView.xhtml">StringView</a> a, <a class="code" href="classAPT_1_1StringView.xhtml">StringView</a> b) {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span> (a.size() != b.size())</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">return</span> a.size() - b.size();</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> memcmp(a.data(), b.data(), a.size());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">static</span> constexpr <span class="keyword">inline</span> <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>_sv(<span class="keyword">const</span> <span class="keywordtype">char</span> *data, <span class="keywordtype">size_t</span> size)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;   <span class="keywordflow">return</span> <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a>(data, size);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <span class="keywordtype">char</span> *other, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> that);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <span class="keywordtype">char</span> *other, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> that) { <span class="keywordflow">return</span> that.operator==(other); }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> operator ==(std::string <span class="keyword">const</span> &amp;other, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> that);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> operator ==(std::string <span class="keyword">const</span> &amp;other, <a class="code" href="classAPT_1_1StringView.xhtml">APT::StringView</a> that) { <span class="keywordflow">return</span> that.operator==(other); }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassAPT_1_1StringView_xhtml"><div class="ttname"><a href="classAPT_1_1StringView.xhtml">APT::StringView</a></div><div class="ttdoc">Simple subset of std::string_view from C++17.</div><div class="ttdef"><b>Definition:</b> string_view.h:27</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
