<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/policy.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">policy.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Package Version Policy implementation</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   This implements the more advanced &#39;Version 4&#39; APT policy engine. The</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   standard &#39;Version 0&#39; engine is included inside the DepCache which is</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   it&#39;s historical location.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   The V4 engine allows the user to completely control all aspects of</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   version selection. There are three primary means to choose a version</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">    * Selection by version match</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    * Selection by Release file match</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    * Selection by origin server</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   Each package may be &#39;pinned&#39; with a single criteria, which will ultimately</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   result in the selection of a single version, or no version, for each</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">   package.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Furthermore, the default selection can be influenced by specifying</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">   the ordering of package files. The order is derived by reading the</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   package file preferences and assigning a priority to each package </span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   file.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">   A special flag may be set to indicate if no version should be returned</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">   if no matching versions are found, otherwise the default matching</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">   rules are used to locate a hit.</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#ifndef PKGLIB_POLICY_H</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#define PKGLIB_POLICY_H</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/depcache.h&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="pkgcache_8h.xhtml">apt-pkg/pkgcache.h</a>&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/versionmatch.h&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classpkgPolicy.xhtml">   43</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgPolicy.xhtml">pkgPolicy</a> : <span class="keyword">public</span> <a class="code" href="classpkgDepCache_1_1Policy.xhtml">pkgDepCache::Policy</a></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="structpkgPolicy_1_1Pin.xhtml">   47</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structpkgPolicy_1_1Pin.xhtml">Pin</a></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;   {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      pkgVersionMatch::MatchType Type;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      std::string Data;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keywordtype">signed</span> <span class="keywordtype">short</span> Priority;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      <a class="code" href="structpkgPolicy_1_1Pin.xhtml">Pin</a>() : Type(pkgVersionMatch::None), Priority(0) {};</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;   };</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="structpkgPolicy_1_1PkgPin.xhtml">   55</a></span>&#160;   <span class="keyword">struct </span><a class="code" href="structpkgPolicy_1_1PkgPin.xhtml">PkgPin</a> : <a class="code" href="structpkgPolicy_1_1Pin.xhtml">Pin</a></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;   {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      std::string Pkg;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="keyword">explicit</span> <a class="code" href="structpkgPolicy_1_1PkgPin.xhtml">PkgPin</a>(std::string <span class="keyword">const</span> &amp;Pkg) : <a class="code" href="structpkgPolicy_1_1Pin.xhtml">Pin</a>(), Pkg(Pkg) {};</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;   };</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;   <a class="code" href="structpkgPolicy_1_1Pin.xhtml">Pin</a> *VerPins;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;   <span class="keywordtype">signed</span> <span class="keywordtype">short</span> *PFPriority;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;   std::vector&lt;Pin&gt; Defaults;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;   std::vector&lt;PkgPin&gt; Unmatched;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;   <a class="code" href="classpkgCache.xhtml">pkgCache</a> *Cache;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;   <span class="keywordtype">bool</span> StatusOverride;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;   </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;   <span class="comment">// Things for manipulating pins</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   <span class="keywordtype">void</span> CreatePin(pkgVersionMatch::MatchType Type,std::string Pkg,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                  std::string Data,<span class="keywordtype">signed</span> <span class="keywordtype">short</span> Priority);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   <span class="comment">// Things for the cache interface.</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;   <span class="keyword">virtual</span> pkgCache::VerIterator GetCandidateVer(pkgCache::PkgIterator <span class="keyword">const</span> &amp;Pkg) APT_OVERRIDE;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">signed</span> <span class="keywordtype">short</span> GetPriority(pkgCache::VerIterator <span class="keyword">const</span> &amp;Ver, <span class="keywordtype">bool</span> ConsiderFiles = <span class="keyword">true</span>) APT_OVERRIDE;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;   virtual <span class="keywordtype">signed</span> <span class="keywordtype">short</span> GetPriority(<a class="code" href="classpkgCache.xhtml">pkgCache</a>::PkgFileIterator const &amp;File) APT_OVERRIDE;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;   <span class="keywordtype">void</span> SetPriority(<a class="code" href="classpkgCache.xhtml">pkgCache</a>::VerIterator const &amp;Ver, <span class="keywordtype">signed</span> <span class="keywordtype">short</span> Priority);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;   <span class="keywordtype">void</span> SetPriority(<a class="code" href="classpkgCache.xhtml">pkgCache</a>::PkgFileIterator const &amp;File, <span class="keywordtype">signed</span> <span class="keywordtype">short</span> Priority);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;   <span class="keywordtype">bool</span> InitDefaults();</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;   </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;   explicit <a class="code" href="classpkgPolicy.xhtml">pkgPolicy</a>(<a class="code" href="classpkgCache.xhtml">pkgCache</a> *Owner);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;   virtual ~<a class="code" href="classpkgPolicy.xhtml">pkgPolicy</a>();</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;   private:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;   struct <a class="code" href="structpkgPolicy_1_1Private.xhtml">Private</a>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;   <a class="code" href="structpkgPolicy_1_1Private.xhtml">Private</a> *const d;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;};</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> ReadPinFile(<a class="code" href="classpkgPolicy.xhtml">pkgPolicy</a> &amp;Plcy, std::<span class="keywordtype">string</span> File = &quot;&quot;);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;APT_PUBLIC <span class="keywordtype">bool</span> ReadPinDir(<a class="code" href="classpkgPolicy.xhtml">pkgPolicy</a> &amp;Plcy, std::<span class="keywordtype">string</span> Dir = &quot;&quot;);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclasspkgCache_xhtml"><div class="ttname"><a href="classpkgCache.xhtml">pkgCache</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:48</div></div>
<div class="ttc" id="aclasspkgDepCache_1_1Policy_xhtml"><div class="ttname"><a href="classpkgDepCache_1_1Policy.xhtml">pkgDepCache::Policy</a></div><div class="ttdef"><b>Definition:</b> depcache.h:274</div></div>
<div class="ttc" id="aclasspkgPolicy_xhtml"><div class="ttname"><a href="classpkgPolicy.xhtml">pkgPolicy</a></div><div class="ttdef"><b>Definition:</b> policy.h:44</div></div>
<div class="ttc" id="apkgcache_8h_xhtml"><div class="ttname"><a href="pkgcache_8h.xhtml">pkgcache.h</a></div><div class="ttdoc">pkgCache - Structure definitions for the cache file</div></div>
<div class="ttc" id="astructpkgPolicy_1_1Pin_xhtml"><div class="ttname"><a href="structpkgPolicy_1_1Pin.xhtml">pkgPolicy::Pin</a></div><div class="ttdef"><b>Definition:</b> policy.h:48</div></div>
<div class="ttc" id="astructpkgPolicy_1_1PkgPin_xhtml"><div class="ttname"><a href="structpkgPolicy_1_1PkgPin.xhtml">pkgPolicy::PkgPin</a></div><div class="ttdef"><b>Definition:</b> policy.h:56</div></div>
<div class="ttc" id="astructpkgPolicy_1_1Private_xhtml"><div class="ttname"><a href="structpkgPolicy_1_1Private.xhtml">pkgPolicy::Private</a></div><div class="ttdef"><b>Definition:</b> policy.cc:46</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
