<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: Configuration Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classConfiguration-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Configuration Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structConfiguration_1_1Item.xhtml">Item</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classConfiguration_1_1MatchAgainstConfig.xhtml">MatchAgainstConfig</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">match a string against a configurable list of patterns  <a href="classConfiguration_1_1MatchAgainstConfig.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8b3542d896591396d2f326a6e394b3e5"><td class="memItemLeft" align="right" valign="top"><a id="a8b3542d896591396d2f326a6e394b3e5"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><b>Find</b> (const char *Name, const char *Default=0) const</td></tr>
<tr class="separator:a8b3542d896591396d2f326a6e394b3e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a778eaa52bc0704c8abfa69e1b67893b5"><td class="memItemLeft" align="right" valign="top"><a id="a778eaa52bc0704c8abfa69e1b67893b5"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><b>Find</b> (std::string const &amp;Name, const char *Default=0) const</td></tr>
<tr class="separator:a778eaa52bc0704c8abfa69e1b67893b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae486ce6806faf1412cf3c61eb7b4900"><td class="memItemLeft" align="right" valign="top"><a id="aae486ce6806faf1412cf3c61eb7b4900"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><b>Find</b> (std::string const &amp;Name, std::string const &amp;Default) const</td></tr>
<tr class="separator:aae486ce6806faf1412cf3c61eb7b4900"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9993947fe2aa17aeb728b60748c4d35"><td class="memItemLeft" align="right" valign="top"><a id="ae9993947fe2aa17aeb728b60748c4d35"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><b>FindFile</b> (const char *Name, const char *Default=0) const</td></tr>
<tr class="separator:ae9993947fe2aa17aeb728b60748c4d35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae082d51f90cc518c89787d007df34196"><td class="memItemLeft" align="right" valign="top"><a id="ae082d51f90cc518c89787d007df34196"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><b>FindDir</b> (const char *Name, const char *Default=0) const</td></tr>
<tr class="separator:ae082d51f90cc518c89787d007df34196"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82921e6f004e5dd3604688eb8ebd66fe"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classConfiguration.xhtml#a82921e6f004e5dd3604688eb8ebd66fe">FindVector</a> (const char *Name, std::string const &amp;Default=&quot;&quot;, bool const Keys=false) const</td></tr>
<tr class="separator:a82921e6f004e5dd3604688eb8ebd66fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e698f1cebe8c81f0496bfbbace718fc"><td class="memItemLeft" align="right" valign="top"><a id="a5e698f1cebe8c81f0496bfbbace718fc"></a>
std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>FindVector</b> (std::string const &amp;Name, std::string const &amp;Default=&quot;&quot;, bool const Keys=false) const</td></tr>
<tr class="separator:a5e698f1cebe8c81f0496bfbbace718fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b5bd7ce553c1f9cf44f5badc09f3802"><td class="memItemLeft" align="right" valign="top"><a id="a4b5bd7ce553c1f9cf44f5badc09f3802"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>FindI</b> (const char *Name, int const &amp;Default=0) const</td></tr>
<tr class="separator:a4b5bd7ce553c1f9cf44f5badc09f3802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2249b7f4be1367108be4e804b845e17"><td class="memItemLeft" align="right" valign="top"><a id="ae2249b7f4be1367108be4e804b845e17"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>FindI</b> (std::string const &amp;Name, int const &amp;Default=0) const</td></tr>
<tr class="separator:ae2249b7f4be1367108be4e804b845e17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4e1500422a37a8f96ad3d32f1c6ef74"><td class="memItemLeft" align="right" valign="top"><a id="ad4e1500422a37a8f96ad3d32f1c6ef74"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>FindB</b> (const char *Name, bool const &amp;Default=false) const</td></tr>
<tr class="separator:ad4e1500422a37a8f96ad3d32f1c6ef74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64a397be1c1c0723deac5c9d7289ffdb"><td class="memItemLeft" align="right" valign="top"><a id="a64a397be1c1c0723deac5c9d7289ffdb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>FindB</b> (std::string const &amp;Name, bool const &amp;Default=false) const</td></tr>
<tr class="separator:a64a397be1c1c0723deac5c9d7289ffdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaabb90901b3ccfc36b2d8e5d48a9632b"><td class="memItemLeft" align="right" valign="top"><a id="aaabb90901b3ccfc36b2d8e5d48a9632b"></a>
std::string&#160;</td><td class="memItemRight" valign="bottom"><b>FindAny</b> (const char *Name, const char *Default=0) const</td></tr>
<tr class="separator:aaabb90901b3ccfc36b2d8e5d48a9632b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c8d07c5cc53218a1b3fb3659128d5d3"><td class="memItemLeft" align="right" valign="top"><a id="a5c8d07c5cc53218a1b3fb3659128d5d3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (const std::string &amp;Name, const std::string &amp;Value)</td></tr>
<tr class="separator:a5c8d07c5cc53218a1b3fb3659128d5d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3d0ea4eb16eb609c544bb305ec0016e"><td class="memItemLeft" align="right" valign="top"><a id="ae3d0ea4eb16eb609c544bb305ec0016e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>CndSet</b> (const char *Name, const std::string &amp;Value)</td></tr>
<tr class="separator:ae3d0ea4eb16eb609c544bb305ec0016e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38668d470479b51d926069ba2294e091"><td class="memItemLeft" align="right" valign="top"><a id="a38668d470479b51d926069ba2294e091"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>CndSet</b> (const char *Name, const int Value)</td></tr>
<tr class="separator:a38668d470479b51d926069ba2294e091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51dd0c6878731bdf68eea3e31a214b52"><td class="memItemLeft" align="right" valign="top"><a id="a51dd0c6878731bdf68eea3e31a214b52"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (const char *Name, const std::string &amp;Value)</td></tr>
<tr class="separator:a51dd0c6878731bdf68eea3e31a214b52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a698036176655aadb406228c39780c5e0"><td class="memItemLeft" align="right" valign="top"><a id="a698036176655aadb406228c39780c5e0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (const char *Name, const int &amp;Value)</td></tr>
<tr class="separator:a698036176655aadb406228c39780c5e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24c33733996e4ef053f8d6845a42170f"><td class="memItemLeft" align="right" valign="top"><a id="a24c33733996e4ef053f8d6845a42170f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>Exists</b> (const std::string &amp;Name) const</td></tr>
<tr class="separator:a24c33733996e4ef053f8d6845a42170f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5d1b5c9a779c64669871f176e4e3814"><td class="memItemLeft" align="right" valign="top"><a id="ab5d1b5c9a779c64669871f176e4e3814"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>Exists</b> (const char *Name) const</td></tr>
<tr class="separator:ab5d1b5c9a779c64669871f176e4e3814"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87fff9b1d7674de499e5b0fdbd058d5d"><td class="memItemLeft" align="right" valign="top"><a id="a87fff9b1d7674de499e5b0fdbd058d5d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>ExistsAny</b> (const char *Name) const</td></tr>
<tr class="separator:a87fff9b1d7674de499e5b0fdbd058d5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a3b286ef60afbd53db7289c401c4ca3"><td class="memItemLeft" align="right" valign="top"><a id="a2a3b286ef60afbd53db7289c401c4ca3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MoveSubTree</b> (char const *const OldRoot, char const *const NewRoot)</td></tr>
<tr class="separator:a2a3b286ef60afbd53db7289c401c4ca3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6219214a423e6371727e1794b25bf33"><td class="memItemLeft" align="right" valign="top"><a id="ac6219214a423e6371727e1794b25bf33"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> (const std::string &amp;Name)</td></tr>
<tr class="separator:ac6219214a423e6371727e1794b25bf33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa71d36872f416feaa853788a7a7a7ef8"><td class="memItemLeft" align="right" valign="top"><a id="aa71d36872f416feaa853788a7a7a7ef8"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="separator:aa71d36872f416feaa853788a7a7a7ef8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a248ff420b60b5b6e8f1bf8443b64b4ac"><td class="memItemLeft" align="right" valign="top"><a id="a248ff420b60b5b6e8f1bf8443b64b4ac"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> (std::string const &amp;List, std::string const &amp;Value)</td></tr>
<tr class="separator:a248ff420b60b5b6e8f1bf8443b64b4ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c9d5bbe2426dd5fa2b38f7323d70cd8"><td class="memItemLeft" align="right" valign="top"><a id="a2c9d5bbe2426dd5fa2b38f7323d70cd8"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> (std::string const &amp;List, int const &amp;Value)</td></tr>
<tr class="separator:a2c9d5bbe2426dd5fa2b38f7323d70cd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d5b08f6145ce1424b741ce484c52fad"><td class="memItemLeft" align="right" valign="top"><a id="a5d5b08f6145ce1424b741ce484c52fad"></a>
const <a class="el" href="structConfiguration_1_1Item.xhtml">Item</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>Tree</b> (const char *Name) const</td></tr>
<tr class="separator:a5d5b08f6145ce1424b741ce484c52fad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a793169e06e9183e678805ce0663b6000"><td class="memItemLeft" align="right" valign="top"><a id="a793169e06e9183e678805ce0663b6000"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Dump</b> ()</td></tr>
<tr class="separator:a793169e06e9183e678805ce0663b6000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70b2730c72d8c133ff3acca2fd366d59"><td class="memItemLeft" align="right" valign="top"><a id="a70b2730c72d8c133ff3acca2fd366d59"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Dump</b> (std::ostream &amp;str)</td></tr>
<tr class="separator:a70b2730c72d8c133ff3acca2fd366d59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ce1048aa489d7271590cfa627fa5f44"><td class="memItemLeft" align="right" valign="top"><a id="a1ce1048aa489d7271590cfa627fa5f44"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Dump</b> (std::ostream &amp;str, char const *const root, char const *const format, bool const emptyValue)</td></tr>
<tr class="separator:a1ce1048aa489d7271590cfa627fa5f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7589283aa8058ca4c15e27bcff331aa"><td class="memItemLeft" align="right" valign="top"><a id="aa7589283aa8058ca4c15e27bcff331aa"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>Configuration</b> (const <a class="el" href="structConfiguration_1_1Item.xhtml">Item</a> *Root)</td></tr>
<tr class="separator:aa7589283aa8058ca4c15e27bcff331aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a82921e6f004e5dd3604688eb8ebd66fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82921e6f004e5dd3604688eb8ebd66fe">&#9670;&nbsp;</a></span>FindVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::string&gt; FindVector </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>Default</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool const&#160;</td>
          <td class="paramname"><em>Keys</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>return a list of child options</p>
<p>Options like Acquire::Languages are handled as lists which can be overridden and have a default. For the later two a comma separated list of values is supported.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>of the parent node </td></tr>
    <tr><td class="paramname">Default</td><td>list of values separated by commas </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>apt-pkg/contrib/<a class="el" href="configuration_8h_source.xhtml">configuration.h</a></li>
<li>apt-pkg/contrib/configuration.cc</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
