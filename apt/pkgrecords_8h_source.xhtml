<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/pkgrecords.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">2.2.3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">pkgrecords.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Package Records - Allows access to complete package description records</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">                     directly from the file.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   The package record system abstracts the actual parsing of the </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   package files. This is different than the generators parser in that</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   it is used to access information not generate information. No </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   information touched by the generator should be parable from here as</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   it can always be retrieved directly from the cache.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   ##################################################################### */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#ifndef PKGLIB_PKGRECORDS_H</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#define PKGLIB_PKGRECORDS_H</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/hashes.h&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="pkgcache_8h.xhtml">apt-pkg/pkgcache.h</a>&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classpkgRecords.xhtml">   26</a></span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgRecords.xhtml">pkgRecords</a>                                                     <span class="comment">/*{{{*/</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;   <span class="keyword">class </span>Parser;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;   </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;   <span class="keyword">private</span>:</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;   <span class="keywordtype">void</span> * <span class="keyword">const</span> d;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;   </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;   <a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Cache;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;   std::vector&lt;Parser *&gt;Files;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;   <span class="comment">// Lookup function</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;   Parser &amp;Lookup(pkgCache::VerFileIterator <span class="keyword">const</span> &amp;Ver);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;   Parser &amp;Lookup(pkgCache::DescFileIterator <span class="keyword">const</span> &amp;Desc);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;   <span class="comment">// Construct destruct</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;   <span class="keyword">explicit</span> <a class="code" href="classpkgRecords.xhtml">pkgRecords</a>(<a class="code" href="classpkgCache.xhtml">pkgCache</a> &amp;Cache);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classpkgRecords.xhtml">pkgRecords</a>();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;};</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">class </span>APT_PUBLIC <a class="code" href="classpkgRecords.xhtml">pkgRecords</a>::Parser                                             <span class="comment">/*{{{*/</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;   <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;   </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Jump(pkgCache::VerFileIterator <span class="keyword">const</span> &amp;Ver) = 0;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Jump(pkgCache::DescFileIterator <span class="keyword">const</span> &amp;Desc) = 0;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;   </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;   <span class="keyword">public</span>:</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classpkgRecords.xhtml">pkgRecords</a>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;   <span class="comment">// These refer to the archive file for the Version</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;   <span class="keyword">virtual</span> std::string FileName() {<span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;   <span class="keyword">virtual</span> std::string SourcePkg() {<span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;   <span class="keyword">virtual</span> std::string SourceVer() {<span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classpkgRecords.xhtml#aa2579392152f7476508b7bd4e96b7b6f">   69</a></span>&#160;   <span class="keyword">virtual</span> <a class="code" href="classHashStringList.xhtml">HashStringList</a> <a class="code" href="classpkgRecords.xhtml#aa2579392152f7476508b7bd4e96b7b6f">Hashes</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classHashStringList.xhtml">HashStringList</a>(); };</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   <span class="comment">// These are some general stats about the package</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;   <span class="keyword">virtual</span> std::string Maintainer() {<span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classpkgRecords.xhtml#a8d7d6c2367bd5d19f6597daf75a212a7">   77</a></span>&#160;   <span class="keyword">virtual</span> std::string <a class="code" href="classpkgRecords.xhtml#a8d7d6c2367bd5d19f6597daf75a212a7">ShortDesc</a>(std::string <span class="keyword">const</span> &amp;<span class="comment">/*lang*/</span>) {<span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classpkgRecords.xhtml#a38f09c07085c8a7422ea5a344ccc0084">   85</a></span>&#160;   <span class="keyword">virtual</span> std::string <a class="code" href="classpkgRecords.xhtml#a38f09c07085c8a7422ea5a344ccc0084">LongDesc</a>(std::string <span class="keyword">const</span> &amp;<span class="comment">/*lang*/</span>) {<span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;   std::string ShortDesc() {<span class="keywordflow">return</span> ShortDesc(<span class="stringliteral">&quot;&quot;</span>);};</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;   std::string LongDesc() {<span class="keywordflow">return</span> LongDesc(<span class="stringliteral">&quot;&quot;</span>);};</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;   <span class="keyword">virtual</span> std::string Name() {<span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   <span class="keyword">virtual</span> std::string Homepage() {<span class="keywordflow">return</span> std::string();}</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;   <span class="comment">// An arbitrary custom field</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;   <span class="keyword">virtual</span> std::string RecordField(<span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="comment">/*fieldName*/</span>) { <span class="keywordflow">return</span> std::string();};</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;   <span class="comment">// The record in binary form</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">void</span> GetRec(<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Start,<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Stop) {Start = Stop = 0;};</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;   Parser();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;   <span class="keyword">virtual</span> ~Parser();</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;   <span class="keyword">private</span>:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;   <span class="keywordtype">void</span> * <span class="keyword">const</span> d;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;   APT_HIDDEN std::string GetHashFromHashes(<span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> type)<span class="keyword"> const</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">   </span>{</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <a class="code" href="classHashStringList.xhtml">HashStringList</a> <span class="keyword">const</span> hashes = <a class="code" href="classpkgRecords.xhtml#aa2579392152f7476508b7bd4e96b7b6f">Hashes</a>();</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      <a class="code" href="classHashString.xhtml">HashString</a> <span class="keyword">const</span> * <span class="keyword">const</span> hs = hashes.<a class="code" href="classHashStringList.xhtml#a6af9b51411b3a757213e4c0f7b4a25b9">find</a>(type);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      <span class="keywordflow">return</span> hs != NULL ? hs-&gt;HashValue() : <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;   };</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;};</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclassHashStringList_xhtml"><div class="ttname"><a href="classHashStringList.xhtml">HashStringList</a></div><div class="ttdef"><b>Definition:</b> hashes.h:65</div></div>
<div class="ttc" id="aclassHashStringList_xhtml_a6af9b51411b3a757213e4c0f7b4a25b9"><div class="ttname"><a href="classHashStringList.xhtml#a6af9b51411b3a757213e4c0f7b4a25b9">HashStringList::find</a></div><div class="ttdeci">HashString const  * find(char const *const type) const</div><div class="ttdef"><b>Definition:</b> hashes.cc:191</div></div>
<div class="ttc" id="aclassHashString_xhtml"><div class="ttname"><a href="classHashString.xhtml">HashString</a></div><div class="ttdef"><b>Definition:</b> hashes.h:28</div></div>
<div class="ttc" id="aclasspkgCache_xhtml"><div class="ttname"><a href="classpkgCache.xhtml">pkgCache</a></div><div class="ttdef"><b>Definition:</b> cacheiterators.h:48</div></div>
<div class="ttc" id="aclasspkgRecords_xhtml"><div class="ttname"><a href="classpkgRecords.xhtml">pkgRecords</a></div><div class="ttdef"><b>Definition:</b> pkgrecords.h:27</div></div>
<div class="ttc" id="aclasspkgRecords_xhtml_a38f09c07085c8a7422ea5a344ccc0084"><div class="ttname"><a href="classpkgRecords.xhtml#a38f09c07085c8a7422ea5a344ccc0084">pkgRecords::LongDesc</a></div><div class="ttdeci">virtual std::string LongDesc(std::string const &amp;)</div><div class="ttdef"><b>Definition:</b> pkgrecords.h:85</div></div>
<div class="ttc" id="aclasspkgRecords_xhtml_a8d7d6c2367bd5d19f6597daf75a212a7"><div class="ttname"><a href="classpkgRecords.xhtml#a8d7d6c2367bd5d19f6597daf75a212a7">pkgRecords::ShortDesc</a></div><div class="ttdeci">virtual std::string ShortDesc(std::string const &amp;)</div><div class="ttdef"><b>Definition:</b> pkgrecords.h:77</div></div>
<div class="ttc" id="aclasspkgRecords_xhtml_aa2579392152f7476508b7bd4e96b7b6f"><div class="ttname"><a href="classpkgRecords.xhtml#aa2579392152f7476508b7bd4e96b7b6f">pkgRecords::Hashes</a></div><div class="ttdeci">virtual HashStringList Hashes() const</div><div class="ttdef"><b>Definition:</b> pkgrecords.h:69</div></div>
<div class="ttc" id="apkgcache_8h_xhtml"><div class="ttname"><a href="pkgcache_8h.xhtml">pkgcache.h</a></div><div class="ttdoc">pkgCache - Structure definitions for the cache file</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
